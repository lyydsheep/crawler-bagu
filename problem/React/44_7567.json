{"success":true,"data":{"id":7567,"name":"<p>useEffect 与 useLayoutEffect 的区别</p>","options":null,"answer":"<p><code>useEffect</code> 和 <code>useLayoutEffect</code> 都是 React Hooks，用于处理副作用（side effects），但它们在执行时机和使用场景上有所不同。</p>\n<h3>useEffect</h3>\n<ul>\n  <li>\n    <p><strong>执行时机</strong>：在浏览器完成绘制后执行。也就是说，浏览器先渲染 DOM，随后再执行 <code>useEffect</code> 中的代码。这使得 <code>useEffect</code> 非常适合处理网络请求、数据订阅、或 DOM 操作，这些操作不需要在页面绘制之前完成。</p>\n  </li>\n  <li>\n    <p><strong>影响</strong>：因为它是在浏览器绘制后执行的，所以可能会导致短暂的闪烁或不一致的 UI 状态，但通常这不会对用户体验造成严重影响。</p>\n  </li>\n  <li>\n    <p><strong>清理</strong>：支持返回一个清理函数，用于在组件卸载或依赖项变化时清理副作用。</p>\n  </li>\n</ul>\n<h3>useLayoutEffect</h3>\n<ul>\n  <li>\n    <p><strong>执行时机</strong>：在 DOM 更新后、浏览器绘制之前执行。也就是说，它会在 React 完成 DOM 更改后立即同步执行。这对于需要读取 DOM 布局并同步更新的操作非常重要。</p>\n  </li>\n  <li>\n    <p><strong>影响</strong>：它可以避免 UI 闪烁，因为你可以在浏览器完成绘制之前执行副作用，从而确保在下一次绘制时 UI 是一致的。</p>\n  </li>\n  <li>\n    <p><strong>清理</strong>：同样支持返回一个清理函数。</p>\n  </li>\n</ul>\n<h3>何时使用</h3>\n<ul>\n  <li>\n    <p><strong>使用 <code>useEffect</code></strong>：大多数情况下，使用 <code>useEffect</code> 是最佳选择，特别是处理数据获取、订阅等操作。</p>\n  </li>\n  <li>\n    <p><strong>使用 <code>useLayoutEffect</code></strong>：如果你需要在浏览器绘制之前读取布局信息或进行同步操作（例如，测量 DOM 元素的大小），可以使用 <code>useLayoutEffect</code>。</p>\n  </li>\n</ul>\n<h3>性能考虑</h3>\n<p>由于 <code>useLayoutEffect</code> 会阻塞浏览器的绘制，因此过度使用可能会导致性能问题。建议尽量优先使用 <code>useEffect</code>，并仅在确实需要时使用 <code>useLayoutEffect</code>。</p>","type":6,"level":2,"freq":0.02409638,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：useEffect与useLayoutEffect的区别。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对React中这两个Hook的基本使用的理解。</li>\n      <li>它们在执行时机上的差异。</li>\n      <li>不同使用场景的认知。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Hook简介</h4>\n<ul>\n  <li>React Hooks是React 16.8引入的新特性，允许在不编写class的情况下使用state和其他React特性。</li>\n  <li>useEffect和useLayoutEffect是其中用于处理副作用的Hook。</li>\n</ul>\n<h4>（2）副作用概念</h4>\n<ul>\n  <li>在React中，副作用是指那些除了返回JSX用于渲染之外的操作，如数据获取、订阅、手动修改DOM等。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）执行时机差异</h4>\n<ul>\n  <li><strong>useEffect</strong>：在浏览器完成渲染后异步执行。也就是说，当组件渲染到屏幕上之后，useEffect里的代码才会开始执行，这不会阻塞浏览器的渲染过程，用户可以先看到页面的更新，之后再处理副作用逻辑。</li>\n  <li><strong>useLayoutEffect</strong>：在DOM更新之后、浏览器绘制之前同步执行。它会阻塞浏览器的绘制，直到useLayoutEffect里的代码执行完毕，确保在用户看到更新后的页面之前完成一些必要的DOM操作。</li>\n</ul>\n<h4>（2）使用场景差异</h4>\n<ul>\n  <li><strong>useEffect</strong>：适用于大多数副作用场景，如数据获取、订阅事件等，因为这些操作通常不需要立即影响DOM的外观，异步执行可以避免阻塞渲染，提升用户体验。</li>\n  <li><strong>useLayoutEffect</strong>：适用于需要在DOM更新后立即进行一些测量或修改DOM的场景，例如根据新的DOM布局来调整元素的位置或大小，避免出现闪烁或布局抖动的问题。</li>\n</ul>\n<h4>（3）性能影响</h4>\n<ul>\n  <li><strong>useEffect</strong>：由于是异步执行，不会阻塞渲染，对性能的影响相对较小，尤其是在处理一些耗时的操作时，不会让用户感觉到页面卡顿。</li>\n  <li><strong>useLayoutEffect</strong>：因为是同步执行且会阻塞绘制，如果在其中执行耗时的操作，会导致页面渲染延迟，影响用户体验。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-jsx\">import React, { useEffect, useLayoutEffect, useState } from 'react';\n\nfunction Example() {\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        console.log('useEffect: DOM已渲染，异步执行副作用');\n        return () => {\n            console.log('useEffect: 清理副作用');\n        };\n    }, [count]);\n\n    useLayoutEffect(() => {\n        console.log('useLayoutEffect: DOM更新后、绘制前同步执行副作用');\n        return () => {\n            console.log('useLayoutEffect: 清理副作用');\n        };\n    }, [count]);\n\n    return (\n        &#x3C;div>\n            &#x3C;p>Count: {count}&#x3C;/p>\n            &#x3C;button onClick={() => setCount(count + 1)}>Increment&#x3C;/button>\n        &#x3C;/div>\n    );\n}\n\nexport default Example;\n</code></pre>\n<ul>\n  <li>在这个例子中，每次<code>count</code>状态更新时，<code>useLayoutEffect</code>会先同步执行，然后页面绘制，最后<code>useEffect</code>异步执行。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）随意使用useLayoutEffect</h4>\n<ul>\n  <li>误区：不考虑执行时机和性能影响，在任何需要处理副作用的地方都使用<code>useLayoutEffect</code>。</li>\n  <li>纠正：优先使用<code>useEffect</code>，只有在确实需要在DOM绘制前完成副作用操作时才使用<code>useLayoutEffect</code>。</li>\n</ul>\n<h4>（2）忽略清理函数</h4>\n<ul>\n  <li>误区：在使用<code>useEffect</code>和<code>useLayoutEffect</code>时，忘记返回清理函数来处理副作用的清理工作，如取消订阅、清除定时器等。</li>\n  <li>纠正：根据副作用的类型，在Hook中返回清理函数，确保在组件卸载或依赖项更新时正确清理副作用。</li>\n</ul>\n<h4>（3）错误理解依赖项数组</h4>\n<ul>\n  <li>误区：不清楚依赖项数组的作用，要么传入不必要的依赖项，导致Hook不必要地频繁执行；要么遗漏必要的依赖项，导致副作用逻辑不完整。</li>\n  <li>纠正：准确判断副作用逻辑中依赖的状态或属性，将其正确地放入依赖项数组中。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“<code>useEffect</code>和<code>useLayoutEffect</code>都是React中用于处理副作用的Hook，但它们在执行时机和使用场景上有所不同。</p>\n<p><code>useEffect</code>在浏览器完成渲染后异步执行，不会阻塞渲染过程，适用于大多数副作用场景，如数据获取、订阅事件等，能提升用户体验且对性能影响较小。</p>\n<p><code>useLayoutEffect</code>在DOM更新之后、浏览器绘制之前同步执行，会阻塞绘制，适用于需要在DOM更新后立即进行测量或修改DOM的场景，可避免布局抖动，但如果执行耗时操作会影响性能。</p>\n<p>在使用时，应优先考虑<code>useEffect</code>，仅在必要时使用<code>useLayoutEffect</code>，同时要注意正确处理清理函数和依赖项数组。”</p>","more_ask":"<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>如何使用依赖数组来优化 useEffect？</strong></p>\n    <ul>\n      <li>提示：讨论依赖数组如何影响副作用的执行。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在什么情况下你会选择使用 useLayoutEffect 而不是 useEffect？</strong></p>\n    <ul>\n      <li>提示：考虑视觉更新和性能的问题。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>能否描述一下 useEffect 中的清理函数的作用？</strong></p>\n    <ul>\n      <li>提示：讨论清理函数在卸载时的用途以及如何避免内存泄漏。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在使用 useEffect 时，你如何处理异步操作？</strong></p>\n    <ul>\n      <li>提示：解释如何管理请求和设置状态。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>useEffect 与类组件中的生命周期方法对比，你觉得它们的相似点与不同点是什么？</strong></p>\n    <ul>\n      <li>提示：讨论 componentDidMount、componentDidUpdate 和 componentWillUnmount。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果多个 useEffect 共存，你是如何管理它们之间的依赖和副作用的？</strong></p>\n    <ul>\n      <li>提示：考虑使用多个 useEffect 处理不同副作用的情况。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何在函数组件中处理错误边界和错误处理？</strong></p>\n    <ul>\n      <li>提示：探讨如何捕获和处理异步错误。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在 useEffect 中，你如何确保可以取消未完成的请求？</strong></p>\n    <ul>\n      <li>提示：阐述如何使用清理函数来管理请求的取消。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何确保使用 useEffect 时不会造成无限循环？</strong></p>\n    <ul>\n      <li>提示：讨论依赖数组的使用和状态更新。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何在 useEffect 中使用自定义 Hook 来复用逻辑？</strong></p>\n    <ul>\n      <li>提示：讨论创建包装 logic 以最终结果的想法。</li>\n    </ul>\n  </li>\n</ol>","mindmap":"mindmap\n  root((React Hooks))\n    useEffect\n      执行时机\n      影响\n      清理\n    useLayoutEffect\n      执行时机\n      影响\n      清理\n    何时使用\n      使用 useEffect\n      使用 useLayoutEffect\n    性能考虑","keynote":"- `useEffect` 和 `useLayoutEffect` 都用于处理副作用。\n- `useEffect` 在浏览器绘制后执行，适合网络请求、数据订阅、DOM 操作。\n- `useEffect` 可能导致UI短暂闪烁，支持返回清理函数。\n- `useLayoutEffect` 在DOM更新后、浏览器绘制前执行，避免UI闪烁。\n- `useLayoutEffect` 也支持返回清理函数。\n- 大多数情况下优先使用 `useEffect`。\n- 需要读取布局信息或同步操作时使用 `useLayoutEffect`。\n- 过度使用 `useLayoutEffect` 可能影响性能。","group_id":44,"kps":["Hooks"],"years":[2024,2023,2022],"corps":["MiniMax","数势科技","美团","帆软","字节跳动","阿里巴巴","拼多多","携程","顺丰","蚂蚁集团","欢聚集团","知乎","金山","字节懂车帝","快手"]}}