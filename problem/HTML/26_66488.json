{
  "success": true,
  "data": {
    "id": 66488,
    "name": "<p>如何实现左边宽度 200px，右边自适应的两栏布局</p>",
    "options": null,
    "answer": "<p>以下是几种实现左边宽度 200px，右边自适应的两栏布局的方法：</p>\n<h3>浮动布局</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .left {\n            float: left;\n            width: 200px;\n            background-color: lightblue;\n        }\n\n        .right {\n            overflow: hidden;\n            background-color: lightgreen;\n        }\n\n        .container {\n            overflow: auto;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度 200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将左边元素设置为左浮动，宽度固定为 200px，右边元素设置 <code>overflow: hidden</code>，触发 BFC（块级格式化上下文），使其不会与浮动元素重叠，从而实现自适应布局。</p>\n<h3>绝对定位布局</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            position: relative;\n            height: 100px;\n        }\n\n        .left {\n            position: absolute;\n            left: 0;\n            width: 200px;\n            background-color: lightblue;\n        }\n\n        .right {\n            margin-left: 200px;\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度 200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将父元素设置为相对定位，左边元素设置为绝对定位，宽度固定为 200px，右边元素通过 <code>margin-left</code> 为 200px 来给左边元素腾出空间，实现自适应。</p>\n<h3>Flexbox 布局</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            display: flex;\n        }\n\n        .left {\n            width: 200px;\n            background-color: lightblue;\n        }\n\n        .right {\n            flex: 1;\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度 200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将父元素设置为 <code>display: flex</code>，开启 Flexbox 布局。左边元素宽度固定为 200px，右边元素设置 <code>flex: 1</code>，表示它会占据剩余的所有空间，实现自适应。</p>\n<h3>Grid 布局</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            display: grid;\n            grid-template-columns: 200px 1fr;\n        }\n\n        .left {\n            background-color: lightblue;\n        }\n\n        .right {\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度 200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将父元素设置为 <code>display: grid</code>，开启 Grid 布局。使用 <code>grid-template-columns</code> 属性将网格列定义为左边宽度 200px，右边使用 <code>1fr</code> 表示占据剩余的所有空间，实现自适应。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.002617801,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：在HTML中实现左边宽度200px，右边自适应的两栏布局。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对HTML和CSS布局方式的掌握，如浮动、Flexbox、Grid等。</li>\n      <li>不同布局方式的特点和适用场景。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）浮动布局</h4>\n<p>浮动是早期实现多栏布局的常用方式，通过设置元素的<code>float</code>属性，可以让元素脱离文档流并向左或向右浮动。</p>\n<h4>（2）Flexbox布局</h4>\n<p>Flexible Box（弹性盒子）是一种一维布局模型，提供了强大的空间分配和对齐能力，能更方便地实现各种布局。</p>\n<h4>（3）Grid布局</h4>\n<p>Grid（网格布局）是一种二维布局模型，将容器划分为行和列，元素可以放置在网格的不同位置，适合复杂的布局。</p>\n<h3>3. 解析</h3>\n<h4>（1）浮动布局实现</h4>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .left {\n            float: left;\n            width: 200px;\n            background-color: lightblue;\n        }\n\n        .right {\n            overflow: hidden;\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"left\">左边宽度200px&#x3C;/div>\n    &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将左边元素设置为左浮动，宽度固定为200px。右边元素设置<code>overflow: hidden</code>，触发BFC（块级格式化上下文），使其不会与浮动元素重叠，从而实现自适应宽度。</p>\n<h4>（2）Flexbox布局实现</h4>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            display: flex;\n        }\n\n        .left {\n            width: 200px;\n            background-color: lightblue;\n        }\n\n        .right {\n            flex: 1;\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将父容器设置为<code>display: flex</code>，使其成为弹性容器。左边元素设置固定宽度200px，右边元素设置<code>flex: 1</code>，表示它会占据剩余的所有空间，实现自适应。</p>\n<h4>（3）Grid布局实现</h4>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            display: grid;\n            grid-template-columns: 200px auto;\n        }\n\n        .left {\n            background-color: lightblue;\n        }\n\n        .right {\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"left\">左边宽度200px&#x3C;/div>\n        &#x3C;div class=\"right\">右边自适应内容&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>原理：将父容器设置为<code>display: grid</code>，使其成为网格容器。使用<code>grid-template-columns</code>属性定义列的宽度，第一列宽度为200px，第二列宽度为<code>auto</code>，会自动填充剩余空间。</p>\n<h3>4. 常见误区</h3>\n<h4>（1）浮动布局未清除浮动</h4>\n<p>如果不清除浮动，可能会导致父容器高度塌陷，影响页面布局。可以通过在父容器中添加清除浮动的元素或使用BFC来解决。</p>\n<h4>（2）Flexbox和Grid兼容性问题</h4>\n<p>虽然现代浏览器对Flexbox和Grid的支持较好，但在一些旧版本浏览器中可能存在兼容性问题。在实际开发中，需要考虑目标用户的浏览器使用情况。</p>\n<h3>5. 总结回答</h3>\n<p>在HTML中实现左边宽度200px，右边自适应的两栏布局可以使用以下几种方法：</p>\n<ul>\n  <li><strong>浮动布局</strong>：将左边元素设置为左浮动，宽度固定为200px，右边元素设置<code>overflow: hidden</code>触发BFC，使其自适应宽度。</li>\n  <li><strong>Flexbox布局</strong>：将父容器设置为<code>display: flex</code>，左边元素设置固定宽度200px，右边元素设置<code>flex: 1</code>占据剩余空间。</li>\n  <li><strong>Grid布局</strong>：将父容器设置为<code>display: grid</code>，使用<code>grid-template-columns: 200px auto</code>定义列的宽度。</li>\n</ul>\n<p>在选择布局方式时，需要考虑兼容性和具体的业务需求。浮动布局是传统的布局方式，兼容性好，但代码相对复杂；Flexbox和Grid布局更简洁、灵活，但在旧版本浏览器中可能存在兼容性问题。</p>",
    "more_ask": "<h3>1. 在上述两栏布局中，如果右边栏内容过多出现滚动条，如何让左边栏固定不动？</h3>\n<p>提示：可以考虑使用 CSS 的 <code>position</code> 属性，将左边栏设置为固定定位或者粘性定位。</p>\n<h3>2. 当页面宽度小于 600px 时，如何将两栏布局转换为上下布局？</h3>\n<p>提示：使用媒体查询（<code>@media</code>）来检测页面宽度，当满足条件时修改布局的 <code>display</code> 属性。</p>\n<h3>3. 若要在两栏布局的基础上，在右边栏再实现一个上下两部分的布局，且上部分高度固定为 100px，下部分自适应，该如何实现？</h3>\n<p>提示：可以将右边栏看作一个新的容器，使用 <code>flexbox</code> 或者 <code>grid</code> 布局来实现上下两部分的划分。</p>\n<h3>4. 在实现两栏布局时，如果左边栏需要加载图片，如何确保图片不会撑破 200px 的宽度？</h3>\n<p>提示：使用 CSS 的 <code>max-width</code> 属性对图片进行约束。</p>\n<h3>5. 如何在两栏布局中实现左右栏之间有一定的间距，并且间距在不同屏幕尺寸下保持合适的比例？</h3>\n<p>提示：可以使用 <code>margin</code> 属性设置间距，结合 <code>rem</code> 或 <code>em</code> 等相对单位来实现不同屏幕尺寸下的适配。</p>",
    "mindmap": "mindmap\n  root((左边200px右边自适应两栏布局方法))\n    浮动布局\n      原理：左元素左浮动宽度200px，右元素overflow:hidden触发BFC\n    绝对定位布局\n      原理：父元素相对定位，左元素绝对定位宽度200px，右元素margin-left为200px\n    Flexbox布局\n      原理：父元素display:flex，左元素宽度200px，右元素flex:1\n    Grid布局\n      原理：父元素display:grid，grid-template-columns设为200px 1fr",
    "keynote": "浮动布局：左元素左浮动宽度200px，右元素overflow:hidden触发BFC\n绝对定位布局：父元素相对定位，左元素绝对定位宽度200px，右元素margin-left为200px\nFlexbox布局：父元素display:flex，左元素宽度200px，右元素flex:1\nGrid布局：父元素display:grid，grid-template-columns设为200px 1fr",
    "group_id": 26,
    "kps": [
      "基本结构",
      "响应式设计"
    ],
    "years": [
      2024
    ],
    "corps": [
      "饿了么"
    ]
  }
}