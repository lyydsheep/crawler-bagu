{
  "success": true,
  "data": {
    "id": 186874,
    "name": "<p>请介绍flex布局的属性</p>",
    "options": null,
    "answer": "<p>Flex布局即弹性布局，为盒状模型提供了最大的灵活性。以下是一些常用的Flex布局属性：</p>\n<h3>容器属性（应用于父元素）</h3>\n<ol>\n  <li><strong>display</strong>\n    <ul>\n      <li>作用：定义一个容器采用Flex布局。</li>\n      <li>取值：\n        <ul>\n          <li><code>flex</code>：定义块级Flex容器。</li>\n          <li><code>inline-flex</code>：定义行内Flex容器。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n}\n</code></pre>\n<ol start=\"2\">\n  <li><strong>flex-direction</strong>\n    <ul>\n      <li>作用：决定主轴的方向，即项目的排列方向。</li>\n      <li>取值：\n        <ul>\n          <li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>\n          <li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>\n          <li><code>column</code>：主轴为垂直方向，起点在上沿。</li>\n          <li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    flex-direction: column;\n}\n</code></pre>\n<ol start=\"3\">\n  <li><strong>flex-wrap</strong>\n    <ul>\n      <li>作用：定义如果一条轴线排不下，如何换行。</li>\n      <li>取值：\n        <ul>\n          <li><code>nowrap</code>（默认值）：不换行。</li>\n          <li><code>wrap</code>：换行，第一行在上方。</li>\n          <li><code>wrap-reverse</code>：换行，第一行在下方。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    flex-wrap: wrap;\n}\n</code></pre>\n<ol start=\"4\">\n  <li><strong>flex-flow</strong>\n    <ul>\n      <li>作用：<code>flex-direction</code>和<code>flex-wrap</code>的简写形式。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    flex-flow: row wrap;\n}\n</code></pre>\n<ol start=\"5\">\n  <li><strong>justify-content</strong>\n    <ul>\n      <li>作用：定义了项目在主轴上的对齐方式。</li>\n      <li>取值：\n        <ul>\n          <li><code>flex-start</code>（默认值）：左对齐。</li>\n          <li><code>flex-end</code>：右对齐。</li>\n          <li><code>center</code>：居中。</li>\n          <li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>\n          <li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    justify-content: center;\n}\n</code></pre>\n<ol start=\"6\">\n  <li><strong>align-items</strong>\n    <ul>\n      <li>作用：定义项目在交叉轴上的对齐方式。</li>\n      <li>取值：\n        <ul>\n          <li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n          <li><code>flex-start</code>：交叉轴的起点对齐。</li>\n          <li><code>flex-end</code>：交叉轴的终点对齐。</li>\n          <li><code>center</code>：交叉轴的中点对齐。</li>\n          <li><code>baseline</code>：项目的第一行文字的基线对齐。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    align-items: center;\n}\n</code></pre>\n<ol start=\"7\">\n  <li><strong>align-content</strong>\n    <ul>\n      <li>作用：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</li>\n      <li>取值：\n        <ul>\n          <li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>\n          <li><code>flex-start</code>：与交叉轴的起点对齐。</li>\n          <li><code>flex-end</code>：与交叉轴的终点对齐。</li>\n          <li><code>center</code>：与交叉轴的中点对齐。</li>\n          <li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n          <li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n        </ul>\n      </li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n    flex-wrap: wrap;\n    align-content: space-between;\n}\n</code></pre>\n<h3>项目属性（应用于子元素）</h3>\n<ol>\n  <li><strong>order</strong>\n    <ul>\n      <li>作用：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    order: -1;\n}\n</code></pre>\n<ol start=\"2\">\n  <li><strong>flex-grow</strong>\n    <ul>\n      <li>作用：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    flex-grow: 1;\n}\n</code></pre>\n<ol start=\"3\">\n  <li><strong>flex-shrink</strong>\n    <ul>\n      <li>作用：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    flex-shrink: 0;\n}\n</code></pre>\n<ol start=\"4\">\n  <li><strong>flex-basis</strong>\n    <ul>\n      <li>作用：定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    flex-basis: 200px;\n}\n</code></pre>\n<ol start=\"5\">\n  <li><strong>flex</strong>\n    <ul>\n      <li>作用：<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    flex: 1;\n}\n</code></pre>\n<ol start=\"6\">\n  <li><strong>align-self</strong>\n    <ul>\n      <li>作用：允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li>\n      <li>取值与<code>align-items</code>相同。</li>\n      <li>示例：</li>\n    </ul>\n  </li>\n</ol>\n<pre><code class=\"language-css\">.item {\n    align-self: flex-end;\n}\n</code></pre>",
    "type": 6,
    "level": 2,
    "freq": 0.007853403,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：介绍flex布局的属性。</li>\n  <li><strong>考察点</strong>：对flex布局中容器属性和项目属性的了解。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>Flex是Flexible Box的缩写，意为“弹性布局”，用于为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。当为父元素设置<code>display: flex</code>或<code>display: inline-flex</code>后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n<h3>3. 解析</h3>\n<h4>（1）容器属性</h4>\n<ul>\n  <li><strong><code>display</code></strong>：定义一个容器为flex布局。值可以是<code>flex</code>（块级元素）或<code>inline-flex</code>（行内元素）。</li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    display: flex;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-direction</code></strong>：决定主轴的方向，即项目的排列方向。\n    <ul>\n      <li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>\n      <li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>\n      <li><code>column</code>：主轴为垂直方向，起点在上沿。</li>\n      <li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>\n    </ul>\n  </li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    flex-direction: column;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-wrap</code></strong>：定义如果一条轴线排不下，如何换行。\n    <ul>\n      <li><code>nowrap</code>（默认值）：不换行。</li>\n      <li><code>wrap</code>：换行，第一行在上方。</li>\n      <li><code>wrap-reverse</code>：换行，第一行在下方。</li>\n    </ul>\n  </li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    flex-wrap: wrap;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-flow</code></strong>：是<code>flex-direction</code>和<code>flex-wrap</code>的简写形式，默认值为<code>row nowrap</code>。</li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    flex-flow: column wrap;\n}\n</code></pre>\n<ul>\n  <li><strong><code>justify-content</code></strong>：定义了项目在主轴上的对齐方式。\n    <ul>\n      <li><code>flex-start</code>（默认值）：左对齐。</li>\n      <li><code>flex-end</code>：右对齐。</li>\n      <li><code>center</code>： 居中。</li>\n      <li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>\n      <li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n    </ul>\n  </li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    justify-content: center;\n}\n</code></pre>\n<ul>\n  <li><strong><code>align-items</code></strong>：定义项目在交叉轴上如何对齐。\n    <ul>\n      <li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n      <li><code>flex-start</code>：交叉轴的起点对齐。</li>\n      <li><code>flex-end</code>：交叉轴的终点对齐。</li>\n      <li><code>center</code>：交叉轴的中点对齐。</li>\n      <li><code>baseline</code>：项目的第一行文字的基线对齐。</li>\n    </ul>\n  </li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    align-items: center;\n}\n</code></pre>\n<ul>\n  <li><strong><code>align-content</code></strong>：定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n    <ul>\n      <li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>\n      <li><code>flex-start</code>：与交叉轴的起点对齐。</li>\n      <li><code>flex-end</code>：与交叉轴的终点对齐。</li>\n      <li><code>center</code>：与交叉轴的中点对齐。</li>\n      <li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n      <li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n    </ul>\n  </li>\n</ul>\n<pre><code class=\"language-css\">.container {\n    align-content: space-between;\n}\n</code></pre>\n<h4>（2）项目属性</h4>\n<ul>\n  <li><strong><code>order</code></strong>：定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    order: -1;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-grow</code></strong>：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    flex-grow: 1;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-shrink</code></strong>：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    flex-shrink: 0;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex-basis</code></strong>：定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    flex-basis: 200px;\n}\n</code></pre>\n<ul>\n  <li><strong><code>flex</code></strong>：是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    flex: 1;\n}\n</code></pre>\n<ul>\n  <li><strong><code>align-self</code></strong>：允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li>\n</ul>\n<pre><code class=\"language-css\">.item {\n    align-self: flex-end;\n}\n</code></pre>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .container {\n            display: flex;\n            justify-content: space-around;\n            align-items: center;\n            flex-wrap: wrap;\n        }\n\n        .item {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            margin: 10px;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"container\">\n        &#x3C;div class=\"item\">1&#x3C;/div>\n        &#x3C;div class=\"item\">2&#x3C;/div>\n        &#x3C;div class=\"item\">3&#x3C;/div>\n    &#x3C;/div>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<p>在这个例子中，<code>.container</code>是一个flex容器，子元素<code>.item</code>会根据容器的属性进行排列。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆容器属性和项目属性</h4>\n<ul>\n  <li>误区：将容器属性应用到项目上，或者将项目属性应用到容器上。</li>\n  <li>纠正：明确区分容器属性和项目属性的作用对象。</li>\n</ul>\n<h4>（2）错误理解<code>flex</code>简写属性</h4>\n<ul>\n  <li>误区：对<code>flex</code>属性的默认值和取值组合理解错误。</li>\n  <li>纠正：牢记<code>flex</code>是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。</li>\n</ul>\n<h4>（3）忽略<code>align-content</code>和<code>align-items</code>的区别</h4>\n<ul>\n  <li>误区：认为<code>align-content</code>和<code>align-items</code>作用相同。</li>\n  <li>纠正：<code>align-items</code>用于单根轴线的项目对齐，<code>align-content</code>用于多根轴线的对齐。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Flex布局有容器属性和项目属性。容器属性包括：</p>\n<ul>\n  <li><code>display</code>：定义容器为flex布局，值有<code>flex</code>和<code>inline-flex</code>。</li>\n  <li><code>flex-direction</code>：决定主轴方向，值有<code>row</code>、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code>。</li>\n  <li><code>flex-wrap</code>：定义换行方式，值有<code>nowrap</code>、<code>wrap</code>、<code>wrap-reverse</code>。</li>\n  <li><code>flex-flow</code>：是<code>flex-direction</code>和<code>flex-wrap</code>的简写。</li>\n  <li><code>justify-content</code>：定义项目在主轴上的对齐方式，如<code>flex-start</code>、<code>center</code>等。</li>\n  <li><code>align-items</code>：定义项目在交叉轴上的对齐方式，如<code>stretch</code>、<code>flex-start</code>等。</li>\n  <li><code>align-content</code>：定义多根轴线在交叉轴上的对齐方式，如<code>stretch</code>、<code>flex-start</code>等。</li>\n</ul>\n<p>项目属性包括：</p>\n<ul>\n  <li><code>order</code>：定义项目排列顺序。</li>\n  <li><code>flex-grow</code>：定义项目放大比例。</li>\n  <li><code>flex-shrink</code>：定义项目缩小比例。</li>\n  <li><code>flex-basis</code>：定义项目占据的主轴空间。</li>\n  <li><code>flex</code>：是<code>flex-grow</code>、<code>flex-shrink</code>和<code>flex-basis</code>的简写。</li>\n  <li><code>align-self</code>：允许单个项目有不同的对齐方式。</li>\n</ul>\n<p>使用时要注意区分容器属性和项目属性，正确理解<code>flex</code>简写属性，以及<code>align-content</code>和<code>align-items</code>的区别。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      如何使用flex布局实现一个三栏布局，左右宽度固定，中间自适应？\n      提示：考虑使用<code>flex-basis</code>、<code>flex-grow</code>等属性控制各栏宽度。\n    </p>\n  </li>\n  <li>\n    <p>\n      在flex布局中，<code>align-self</code>属性和<code>align-items</code>属性有什么区别和联系？\n      提示：从作用范围和优先级方面思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      当flex容器的子元素宽度总和超过容器宽度时，默认会发生什么？如何改变这种默认行为？\n      提示：默认情况与<code>flex-shrink</code>属性有关，改变行为可考虑<code>flex-wrap</code>属性。\n    </p>\n  </li>\n  <li>\n    <p>\n      请说明<code>flex-flow</code>属性的作用和使用方式。\n      提示：它是<code>flex-direction</code>和<code>flex-wrap</code>的简写属性。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何使用flex布局实现子元素的垂直和水平居中？\n      提示：结合<code>justify-content</code>和<code>align-items</code>属性。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Flex布局))\n    简介\n      为盒状模型提供最大灵活性\n    容器属性（父元素）\n      display\n        定义容器采用Flex布局\n        取值：flex、inline - flex\n      flex - direction\n        决定主轴方向及项目排列方向\n        取值：row、row - reverse、column、column - reverse\n      flex - wrap\n        定义一条轴线排不下时如何换行\n        取值：nowrap、wrap、wrap - reverse\n      flex - flow\n        flex - direction和flex - wrap的简写\n      justify - content\n        定义项目在主轴上的对齐方式\n        取值：flex - start、flex - end、center、space - between、space - around\n      align - items\n        定义项目在交叉轴上的对齐方式\n        取值：stretch、flex - start、flex - end、center、baseline\n      align - content\n        定义多根轴线的对齐方式（单轴线不起作用）\n        取值：stretch、flex - start、flex - end、center、space - between、space - around\n    项目属性（子元素）\n      order\n        定义项目排列顺序，数值小靠前，默认0\n      flex - grow\n        定义项目放大比例，默认0\n      flex - shrink\n        定义项目缩小比例，默认1\n      flex - basis\n        定义分配多余空间前项目占据主轴空间，默认auto\n      flex\n        flex - grow、flex - shrink和flex - basis的简写，默认0 1 auto\n      align - self\n        允许单个项目有不同对齐方式，覆盖align - items，默认auto",
    "keynote": "Flex布局：为盒状模型提供最大灵活性\n容器属性（父元素）：\n  display：定义Flex布局，取值flex、inline - flex\n  flex - direction：决定主轴方向，取值row、row - reverse、column、column - reverse\n  flex - wrap：定义换行方式，取值nowrap、wrap、wrap - reverse\n  flex - flow：flex - direction和flex - wrap简写\n  justify - content：主轴对齐方式，取值flex - start、flex - end等\n  align - items：交叉轴对齐方式，取值stretch、flex - start等\n  align - content：多根轴线对齐方式，取值stretch、flex - start等\n项目属性（子元素）：\n  order：排列顺序，数值小靠前，默认0\n  flex - grow：放大比例，默认0\n  flex - shrink：缩小比例，默认1\n  flex - basis：分配前主轴空间，默认auto\n  flex：flex - grow、flex - shrink和flex - basis简写，默认0 1 auto\n  align - self：单个项目对齐方式，覆盖align - items，默认auto",
    "group_id": 26,
    "kps": [
      "HTML基础",
      "元素与属性"
    ],
    "years": [
      2023
    ],
    "corps": [
      "金山"
    ]
  }
}