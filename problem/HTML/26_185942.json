{
  "success": true,
  "data": {
    "id": 185942,
    "name": "<p>请说明回流和重绘的概念</p>",
    "options": null,
    "answer": "<p>回流（Reflow）也被称为重排，是指当DOM的变化影响了元素的布局信息（元素的宽高大小、边距、位置、外边距、内边距等几何信息）时，浏览器需要重新计算元素在视口内的布局信息，将其安放到界面中的正确位置，这个过程就叫做回流。</p>\n<p>例如，以下操作可能会触发回流：</p>\n<ul>\n  <li>页面首次渲染。</li>\n  <li>浏览器窗口大小发生改变。</li>\n  <li>元素的尺寸、边距、位置等布局信息发生变化，像修改元素的宽度、高度、外边距、内边距等。</li>\n  <li>添加或删除可见的DOM元素。</li>\n  <li>改变元素的字体大小。</li>\n</ul>\n<p>重绘（Repaint）是指当一个元素的外观发生改变，但没有影响到布局信息时，浏览器会将新样式应用到元素上，重新绘制该元素的外观，这个过程就叫做重绘。</p>\n<p>例如，以下操作可能会触发重绘：</p>\n<ul>\n  <li>改变元素的颜色、背景颜色、透明度等不影响布局的样式。</li>\n  <li>改变元素的可见性（visibility:hidden 除外，因为它会影响布局，会触发回流）。</li>\n</ul>\n<p>回流的成本比重绘高，因为回流需要重新计算布局信息，而重绘只需根据新样式重新绘制元素外观。在开发中，应尽量减少回流的发生，以提高页面性能。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.013089,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：说明回流和重绘的概念。</li>\n  <li><strong>考察点</strong>：对HTML页面渲染机制中回流和重绘概念的理解。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<ul>\n  <li><strong>页面渲染机制</strong>：浏览器将HTML、CSS和JavaScript解析后，构建DOM树和CSSOM树，合并成渲染树，再根据渲染树进行布局（确定元素位置和大小）和绘制（将元素绘制到屏幕上）。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）回流（Reflow）</h4>\n<ul>\n  <li><strong>定义</strong>：当DOM的变化影响了元素的布局信息（元素的宽高、边距、位置、大小尺寸、边距等），浏览器需要重新计算元素在视口内的位置和大小，将其安放到界面中的过程称为回流。</li>\n  <li><strong>触发情况</strong>：添加或删除可见的DOM元素；元素的尺寸改变（边距、填充、边框、宽度和高度）；内容改变（文本改变或图片被另一个不同尺寸的图片所替代）；浏览器窗口尺寸改变；激活CSS伪类（如:hover）等。</li>\n  <li><strong>影响</strong>：回流是一个比较昂贵的操作，因为它需要重新计算整个渲染树的布局信息，会消耗较多的性能和时间。</li>\n</ul>\n<h4>（2）重绘（Repaint）</h4>\n<ul>\n  <li><strong>定义</strong>：当一个元素的外观发生改变，但没有影响到布局信息时，浏览器会将新样式赋予元素并重新绘制它的外观，这个过程称为重绘。</li>\n  <li><strong>触发情况</strong>：元素的颜色、背景色、透明度、可见性等外观属性的改变。</li>\n  <li><strong>影响</strong>：重绘的开销相对回流较小，因为它不需要重新计算布局信息，只需要重新绘制元素的外观。</li>\n</ul>\n<h3>4. 示例说明</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        .box {\n            width: 100px;\n            height: 100px;\n            background-color: red;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"box\">&#x3C;/div>\n    &#x3C;script>\n        // 触发回流\n        const box = document.querySelector('.box');\n        box.style.width = '200px';\n\n        // 触发重绘\n        box.style.backgroundColor = 'blue';\n    &#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<ul>\n  <li>在上述代码中，修改元素的宽度会触发回流，因为这改变了元素的布局信息；修改元素的背景颜色会触发重绘，因为这只改变了元素的外观。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆回流和重绘</h4>\n<ul>\n  <li>误区：认为回流和重绘是同一个概念，或者不清楚它们之间的区别。</li>\n  <li>纠正：明确回流是影响布局信息时的重新计算和布局过程，重绘是仅改变外观时的重新绘制过程。</li>\n</ul>\n<h4>（2）忽视回流的性能影响</h4>\n<ul>\n  <li>误区：在编写代码时不考虑回流的性能开销，频繁触发回流操作。</li>\n  <li>纠正：尽量批量修改DOM元素的样式，避免频繁修改布局信息，以减少回流的次数。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“回流是指当DOM的变化影响了元素的布局信息（如宽高、边距、位置等）时，浏览器需要重新计算元素在视口内的位置和大小，并将其安放到界面中的过程。触发回流的情况包括添加或删除可见的DOM元素、元素尺寸改变、内容改变、浏览器窗口尺寸改变等。回流是一个较为昂贵的操作，会消耗较多性能和时间。</p>\n<p>重绘是指当一个元素的外观发生改变，但没有影响到布局信息时，浏览器将新样式赋予元素并重新绘制其外观的过程。触发重绘的情况有元素的颜色、背景色、透明度、可见性等外观属性的改变。重绘的开销相对回流较小。</p>\n<p>在开发中，应尽量减少回流的发生，以提高页面的性能。例如，批量修改DOM元素的样式，避免频繁修改布局信息。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      回流和重绘分别会在哪些具体的DOM操作下触发？\n      提示：思考对元素尺寸、布局、位置等有影响的操作会触发回流，而仅影响外观的操作会触发重绘。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何优化代码以减少回流和重绘的发生？\n      提示：从批量修改DOM、使用文档片段、避免频繁读取布局信息等方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      回流和重绘对页面性能的具体影响有哪些？\n      提示：可以从页面响应速度、帧率等方面分析性能受影响的表现。\n    </p>\n  </li>\n  <li>\n    <p>\n      举例说明哪些CSS属性的修改会触发回流，哪些会触发重绘？\n      提示：像width、height等影响布局的属性修改可能触发回流，而color、background-color等仅影响外观的属性修改可能触发重绘。\n    </p>\n  </li>\n  <li>\n    <p>\n      当页面中存在大量元素时，回流和重绘的处理有什么特殊注意点？\n      提示：考虑批量处理元素、使用虚拟列表等优化策略。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((回流与重绘))\n    回流（重排）\n      定义\n        DOM变化影响布局信息\n        重新计算布局并安放位置\n      触发操作\n        页面首次渲染\n        窗口大小改变\n        元素布局信息变化\n        添加或删除可见DOM元素\n        改变字体大小\n    重绘\n      定义\n        元素外观改变但不影响布局\n        应用新样式重绘外观\n      触发操作\n        改变不影响布局的样式\n        改变元素可见性（visibility:hidden除外）\n    对比与优化\n      回流成本比重绘高\n      开发中减少回流提高性能",
    "keynote": "回流（重排）：DOM变化影响布局信息，重新计算布局并安放位置；触发操作有页面首次渲染、窗口大小改变、元素布局信息变化、添加或删除可见DOM元素、改变字体大小\n重绘：元素外观改变但不影响布局，应用新样式重绘外观；触发操作有改变不影响布局的样式、改变元素可见性（visibility:hidden除外）\n对比与优化：回流成本比重绘高，开发中减少回流提高性能",
    "group_id": 26,
    "kps": [
      "HTML5新特性",
      "HTML基础",
      "安全性与最佳实践"
    ],
    "years": [
      2024,
      2023
    ],
    "corps": [
      "同程旅行",
      "金山",
      "美团"
    ]
  }
}