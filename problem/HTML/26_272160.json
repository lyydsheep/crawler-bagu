{
  "success": true,
  "data": {
    "id": 272160,
    "name": "<p>页面渲染时，资源加载的顺序是什么</p>",
    "options": null,
    "answer": "<p>在页面渲染时，资源加载顺序大致如下：</p>\n<h3>1. HTML 文档解析</h3>\n<p>浏览器首先会接收到 HTML 文件并开始解析。在解析过程中，当遇到不同类型的资源引用时，会按照特定规则进行加载。</p>\n<h3>2. CSS 资源加载</h3>\n<ul>\n  <li>当解析到 <code>&#x3C;link></code> 标签引用的外部 CSS 文件时，浏览器会立即发起请求去加载这些 CSS 文件。CSS 资源的加载是并行的，即多个 CSS 文件可以同时进行下载。</li>\n  <li>由于 CSS 会影响页面的渲染样式，所以 CSS 资源的加载是阻塞渲染的。也就是说，在 CSS 文件没有加载和解析完成之前，浏览器不会进行页面的渲染，以避免出现样式闪烁的问题。</li>\n</ul>\n<h3>3. JavaScript 资源加载</h3>\n<ul>\n  <li><strong><code>&#x3C;script></code> 标签无 <code>async</code> 和 <code>defer</code> 属性</strong>：当解析到没有 <code>async</code> 和 <code>defer</code> 属性的 <code>&#x3C;script></code> 标签时，浏览器会暂停 HTML 解析，立即下载并执行该 JavaScript 文件。因为 JavaScript 可能会修改 DOM 结构和样式，所以这种情况下会阻塞 HTML 解析和页面渲染。</li>\n  <li><strong><code>&#x3C;script></code> 标签有 <code>async</code> 属性</strong>：带有 <code>async</code> 属性的 <code>&#x3C;script></code> 标签会异步加载 JavaScript 文件。浏览器会继续解析 HTML 文档，同时并行下载 JavaScript 文件。当文件下载完成后，会立即执行，执行时可能会中断 HTML 解析。多个带有 <code>async</code> 属性的脚本文件的执行顺序是不确定的，取决于它们的下载完成时间。</li>\n  <li><strong><code>&#x3C;script></code> 标签有 <code>defer</code> 属性</strong>：带有 <code>defer</code> 属性的 <code>&#x3C;script></code> 标签也会异步加载 JavaScript 文件。浏览器会继续解析 HTML 文档，同时并行下载 JavaScript 文件。不同的是，这些脚本会在 HTML 解析完成后，<code>DOMContentLoaded</code> 事件触发之前按照它们在 HTML 中出现的顺序依次执行，不会阻塞 HTML 解析。</li>\n</ul>\n<h3>4. 图片等媒体资源加载</h3>\n<p>当解析到 <code>&#x3C;img></code>、<code>&#x3C;video></code>、<code>&#x3C;audio></code> 等标签时，浏览器会发起请求去加载相应的媒体资源。这些资源的加载是异步的，不会阻塞 HTML 解析和页面渲染。浏览器会在资源下载完成后将其显示在页面上。</p>\n<h3>总结</h3>\n<p>总体而言，HTML 解析是基础，CSS 加载会阻塞渲染，JavaScript 根据不同属性有不同的加载和执行方式，而图片等媒体资源的加载是异步的，不影响页面的解析和渲染流程。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.002617801,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：页面渲染时，资源加载的顺序是什么。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对HTML页面渲染流程的理解。</li>\n      <li>不同资源（如HTML、CSS、JavaScript等）加载顺序的规则。</li>\n      <li>资源加载顺序对页面渲染的影响。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）页面渲染基本流程</h4>\n<p>浏览器从服务器获取HTML文件后，开始解析HTML文档。在解析过程中，遇到不同类型的资源标签（如<code>&#x3C;link></code>、<code>&#x3C;script></code>等）会触发相应资源的加载。</p>\n<h4>（2）常见资源类型</h4>\n<ul>\n  <li><strong>HTML</strong>：页面的基础结构，定义了页面的元素和布局。</li>\n  <li><strong>CSS</strong>：用于控制页面的样式，如字体、颜色、布局等。</li>\n  <li><strong>JavaScript</strong>：为页面添加交互性和动态功能。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）总体加载顺序</h4>\n<ul>\n  <li>浏览器首先加载HTML文件，然后按照HTML文档中标签的顺序依次解析和加载资源。</li>\n  <li>当遇到<code>&#x3C;link></code>标签引入CSS文件时，会立即发起请求加载CSS资源。CSS文件的加载是并行的，不会阻塞HTML的解析，但会阻塞页面的渲染，直到CSS文件加载并解析完成。</li>\n  <li>当遇到<code>&#x3C;script></code>标签引入JavaScript文件时，默认情况下，会阻塞HTML的解析，直到JavaScript文件加载并执行完成。这是因为JavaScript可能会修改DOM结构或样式，所以浏览器需要等待其执行完毕再继续解析。</li>\n</ul>\n<h4>（2）不同<code>&#x3C;script></code>标签属性对加载顺序的影响</h4>\n<ul>\n  <li><strong><code>&#x3C;script></code>（无属性）</strong>：同步加载，会阻塞HTML解析，按照文档顺序依次执行。</li>\n  <li><strong><code>&#x3C;script async></code></strong>：异步加载，不会阻塞HTML解析。资源下载完成后立即执行，执行顺序可能与文档顺序不一致。</li>\n  <li><strong><code>&#x3C;script defer></code></strong>：异步加载，不会阻塞HTML解析。资源下载完成后，会在HTML解析完成、DOMContentLoaded事件触发前按照文档顺序依次执行。</li>\n</ul>\n<h4>（3）资源加载顺序对页面渲染的影响</h4>\n<ul>\n  <li>CSS阻塞渲染：如果CSS文件加载缓慢，页面会一直处于白屏状态，直到CSS加载并解析完成。</li>\n  <li>JavaScript阻塞解析：默认的<code>&#x3C;script></code>标签会阻塞HTML解析，可能导致页面渲染延迟。合理使用<code>async</code>和<code>defer</code>属性可以优化页面加载性能。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;!-- 加载CSS文件，会阻塞渲染 -->\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n    &#x3C;!-- 异步加载JavaScript文件，不阻塞HTML解析 -->\n    &#x3C;script async src=\"script1.js\">&#x3C;/script>\n    &#x3C;!-- 异步加载JavaScript文件，在HTML解析完成后按顺序执行 -->\n    &#x3C;script defer src=\"script2.js\">&#x3C;/script>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;h1>Hello, World!&#x3C;/h1>\n    &#x3C;!-- 同步加载JavaScript文件，会阻塞HTML解析 -->\n    &#x3C;script src=\"script3.js\">&#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<ul>\n  <li>在这个例子中，浏览器首先加载HTML文件，然后并行加载<code>styles.css</code>。<code>script1.js</code>异步加载，下载完成后立即执行。<code>script2.js</code>异步加载，在HTML解析完成后按顺序执行。<code>script3.js</code>同步加载，会阻塞HTML解析。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）认为所有资源都是同步加载</h4>\n<ul>\n  <li>误区：认为所有资源（包括CSS和JavaScript）都是按照顺序依次同步加载的。</li>\n  <li>纠正：CSS是并行加载的，JavaScript可以通过<code>async</code>和<code>defer</code>属性实现异步加载。</li>\n</ul>\n<h4>（2）混淆<code>async</code>和<code>defer</code>的作用</h4>\n<ul>\n  <li>误区：认为<code>async</code>和<code>defer</code>的作用相同，都能保证脚本按顺序执行。</li>\n  <li>纠正：<code>async</code>下载完成后立即执行，执行顺序可能与文档顺序不一致；<code>defer</code>在HTML解析完成后按文档顺序执行。</li>\n</ul>\n<h4>（3）忽视资源加载顺序对性能的影响</h4>\n<ul>\n  <li>误区：不考虑资源加载顺序，随意放置<code>&#x3C;script></code>和<code>&#x3C;link></code>标签。</li>\n  <li>纠正：合理安排资源加载顺序可以优化页面加载性能，减少白屏时间。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>页面渲染时，资源加载顺序大致如下：浏览器先加载HTML文件，然后按照HTML文档中标签的顺序依次解析和加载资源。遇到<code>&#x3C;link></code>标签引入的CSS文件会并行加载，CSS文件加载会阻塞页面渲染，直到加载并解析完成。</p>\n<p>对于<code>&#x3C;script></code>标签，默认情况下是同步加载，会阻塞HTML解析，按文档顺序依次执行。使用<code>async</code>属性时，脚本异步加载，下载完成后立即执行，执行顺序可能与文档顺序不一致；使用<code>defer</code>属性时，脚本异步加载，在HTML解析完成、DOMContentLoaded事件触发前按文档顺序依次执行。</p>\n<p>需要注意的是，合理安排资源加载顺序对页面性能至关重要。CSS阻塞渲染，JavaScript阻塞解析，应根据实际需求选择合适的加载方式，以减少页面白屏时间，提高用户体验。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      如何优化 HTML 页面资源加载顺序以提升性能？\n      提示：从代码层面、服务器配置等方面思考，如内联关键 CSS、异步加载脚本等。\n    </p>\n  </li>\n  <li>\n    <p>\n      当页面中有多个 CSS 文件和 JavaScript 文件时，怎样合理安排它们的加载顺序避免阻塞渲染？\n      提示：考虑 CSS 和 JavaScript 对渲染的影响，如 CSS 阻塞渲染、JavaScript 可能阻塞解析等。\n    </p>\n  </li>\n  <li>\n    <p>\n      资源加载顺序在不同浏览器中的表现有差异吗？请举例说明。\n      提示：不同浏览器的渲染引擎不同，可从主流浏览器如 Chrome、Firefox、IE 等方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于图片资源，加载顺序如何影响页面的视觉体验？怎样优化图片加载顺序？\n      提示：思考图片在页面中的重要性和位置，如首屏图片优先加载等。\n    </p>\n  </li>\n  <li>\n    <p>\n      当使用 CDN 加载资源时，资源加载顺序会有什么变化？需要注意什么？\n      提示：CDN 的特点是分布在不同地理位置，考虑其对资源加载速度和顺序的影响。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((页面渲染时资源加载顺序))\n    HTML 文档解析\n      接收 HTML 文件开始解析\n      遇资源引用按规则加载\n    CSS 资源加载\n      解析到 <link> 标签立即请求加载\n      加载并行\n      阻塞渲染避免样式闪烁\n    JavaScript 资源加载\n      <script> 无 async 和 defer 属性\n        暂停 HTML 解析\n        下载并执行，阻塞解析和渲染\n      <script> 有 async 属性\n        异步加载\n        继续解析 HTML，并行下载\n        下载完成立即执行，可能中断解析\n        执行顺序不确定\n      <script> 有 defer 属性\n        异步加载\n        继续解析 HTML，并行下载\n        HTML 解析完成后按顺序执行\n        不阻塞 HTML 解析\n    图片等媒体资源加载\n      解析到标签发起请求\n      异步加载\n      不阻塞解析和渲染\n      下载完成后显示\n    总结\n      HTML 解析是基础\n      CSS 加载阻塞渲染\n      JavaScript 加载执行方式因属性而异\n      图片等媒体资源异步加载不影响流程",
    "keynote": "HTML 文档解析：接收并解析，遇资源按规则加载\nCSS 资源加载：<link> 标签立即请求，并行加载，阻塞渲染\nJavaScript 资源加载：\n  无 async 和 defer：暂停解析，下载执行，阻塞解析和渲染\n  有 async：异步加载，继续解析，下载完立即执行，顺序不定\n  有 defer：异步加载，继续解析，解析完按顺序执行，不阻塞解析\n图片等媒体资源加载：解析到标签请求，异步加载，不阻塞，下载完显示\n总结：HTML 是基础，CSS 阻塞，JS 因属性而异，媒体资源异步不影响流程",
    "group_id": 26,
    "kps": [
      "基本结构",
      "HTML基础"
    ],
    "years": [
      2023
    ],
    "corps": [
      "百度"
    ]
  }
}