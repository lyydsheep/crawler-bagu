{"success":true,"data":{"id":9525,"name":"<p><code>&#x3C;script></code>标签的<code>defer</code>和<code>async</code>属性有什么区别？</p>","options":null,"answer":"<p>在HTML中，<code>&#x3C;script></code>标签的<code>defer</code>和<code>async</code>属性用于控制脚本的加载和执行方式。它们的主要区别如下：</p>\n<h3>1. <code>defer</code>属性</h3>\n<ul>\n  <li><strong>加载方式</strong>：当使用<code>defer</code>属性时，脚本会在文档被解析时异步加载，但会延迟执行，直到整个 HTML 文档被完全解析完毕。</li>\n  <li><strong>执行顺序</strong>：多个带有<code>defer</code>属性的脚本会按照它们在文档中的出现顺序执行。</li>\n  <li><strong>适用场景</strong>：适合需要依赖于 DOM 完全加载的脚本，比如处理 DOM 元素的操作。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"script1.js\" defer>&#x3C;/script>\n&#x3C;script src=\"script2.js\" defer>&#x3C;/script>\n</code></pre>\n<h3>2. <code>async</code>属性</h3>\n<ul>\n  <li><strong>加载方式</strong>：当使用<code>async</code>属性时，脚本会异步加载，并立即执行脚本，一旦加载完成。</li>\n  <li><strong>执行顺序</strong>：多个带有<code>async</code>属性的脚本的执行顺序不确定，它们会在各自加载完成后立即执行，可能不是按照它们在文档中的顺序。</li>\n  <li><strong>适用场景</strong>：适合于不依赖 DOM 的独立脚本，比如分析代码或无人参与的外部脚本。</li>\n</ul>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-html\">&#x3C;script src=\"script1.js\" async>&#x3C;/script>\n&#x3C;script src=\"script2.js\" async>&#x3C;/script>\n</code></pre>\n<h3>总结</h3>\n<ul>\n  <li><code>defer</code>：异步加载，DOM 完全加载后按顺序执行。</li>\n  <li><code>async</code>：异步加载，立即执行，执行顺序不确定。</li>\n</ul>\n<p>在选择使用 <code>defer</code> 或 <code>async</code> 时，可以根据脚本的依赖性和执行顺序需求来决定。</p>","type":6,"level":2,"freq":0.1308901,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：<code>&#x3C;script></code>标签的<code>defer</code>和<code>async</code>属性有什么区别？</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对<code>&#x3C;script></code>标签中<code>defer</code>和<code>async</code>属性功能的理解。</li>\n      <li>了解这两个属性对HTML文档解析和脚本执行顺序的影响。</li>\n      <li>明白它们在不同场景下的使用场景和优势。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）<code>&#x3C;script></code>标签常规行为</h4>\n<p>在不使用<code>defer</code>和<code>async</code>属性时，当HTML解析器遇到<code>&#x3C;script></code>标签，会暂停文档解析，下载脚本文件，然后执行脚本，执行完毕后才继续解析文档。</p>\n<h4>（2）HTML文档解析流程</h4>\n<p>HTML解析器按顺序逐行解析HTML文档，构建DOM树。脚本的下载和执行会影响这个过程。</p>\n<h3>3. 解析</h3>\n<h4>（1）<code>defer</code>属性</h4>\n<ul>\n  <li><strong>下载时机</strong>：浏览器在解析HTML文档时遇到带有<code>defer</code>属性的<code>&#x3C;script></code>标签，会异步下载脚本文件，不会阻塞文档解析。</li>\n  <li><strong>执行时机</strong>：脚本会在文档解析完成后、<code>DOMContentLoaded</code>事件触发前按脚本在文档中出现的顺序执行。</li>\n  <li><strong>适用场景</strong>：适用于需要在文档解析完成后执行，且脚本之间有依赖关系的情况，比如一些需要操作DOM元素的脚本。</li>\n</ul>\n<h4>（2）<code>async</code>属性</h4>\n<ul>\n  <li><strong>下载时机</strong>：浏览器遇到带有<code>async</code>属性的<code>&#x3C;script></code>标签，会异步下载脚本文件，不阻塞文档解析。</li>\n  <li><strong>执行时机</strong>：脚本下载完成后立即执行，执行时会阻塞文档解析。脚本的执行顺序不一定按照它们在文档中出现的顺序。</li>\n  <li><strong>适用场景</strong>：适用于那些与文档其他部分没有依赖关系的脚本，比如第三方统计脚本。</li>\n</ul>\n<h4>（3）两者区别总结</h4>\n<table>\n  <thead>\n    <tr>\n      <th>属性</th>\n      <th>下载时机</th>\n      <th>执行时机</th>\n      <th>执行顺序</th>\n      <th>是否阻塞文档解析</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>defer</code></td>\n      <td>异步下载</td>\n      <td>文档解析完成后，<code>DOMContentLoaded</code>事件触发前</td>\n      <td>按文档中顺序</td>\n      <td>否</td>\n    </tr>\n    <tr>\n      <td><code>async</code></td>\n      <td>异步下载</td>\n      <td>下载完成后立即执行</td>\n      <td>不按文档中顺序</td>\n      <td>执行时阻塞</td>\n    </tr>\n  </tbody>\n</table>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;title>defer vs async&#x3C;/title>\n    &#x3C;!-- defer示例 -->\n    &#x3C;script defer src=\"defer-script.js\">&#x3C;/script>\n    &#x3C;!-- async示例 -->\n    &#x3C;script async src=\"async-script.js\">&#x3C;/script>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;p>这是一个测试页面&#x3C;/p>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>在这个例子中，<code>defer-script.js</code>会在文档解析完成后按顺序执行，而<code>async-script.js</code>下载完成后立即执行，执行顺序不一定。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆两者执行顺序</h4>\n<ul>\n  <li>误区：认为<code>defer</code>和<code>async</code>脚本都会按文档中顺序执行。</li>\n  <li>纠正：<code>defer</code>脚本按顺序执行，<code>async</code>脚本执行顺序不确定。</li>\n</ul>\n<h4>（2）忽视对文档解析的影响</h4>\n<ul>\n  <li>误区：认为<code>async</code>脚本不会阻塞文档解析。</li>\n  <li>纠正：<code>async</code>脚本下载完成后执行时会阻塞文档解析。</li>\n</ul>\n<h4>（3）错误选择使用场景</h4>\n<ul>\n  <li>误区：在有依赖关系的脚本中使用<code>async</code>属性。</li>\n  <li>纠正：有依赖关系的脚本应使用<code>defer</code>属性，确保按顺序执行。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“<code>&#x3C;script></code>标签的<code>defer</code>和<code>async</code>属性都用于异步下载脚本文件，不阻塞HTML文档解析，但它们在执行时机和顺序上有明显区别。</p>\n<p><code>defer</code>属性的脚本会在文档解析完成后、<code>DOMContentLoaded</code>事件触发前按脚本在文档中出现的顺序执行，不会阻塞文档解析，适用于有依赖关系且需要在文档解析完成后执行的脚本。</p>\n<p><code>async</code>属性的脚本在下载完成后立即执行，执行时会阻塞文档解析，且执行顺序不一定按文档中顺序，适用于与文档其他部分无依赖关系的脚本。</p>\n<p>在实际使用中，应根据脚本的依赖关系和执行时机需求来选择合适的属性。”</p>","more_ask":"<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>问：在什么情况下你会选择使用<code>defer</code>而不是<code>async</code>？</strong></p>\n    <ul>\n      <li>提示：考虑脚本执行顺序和DOM解析的关系。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：<code>defer</code>和<code>async</code>对页面性能的影响是什么？</strong></p>\n    <ul>\n      <li>提示：讨论加载时间、渲染和脚本执行的先后顺序。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：如果同时使用多个带有<code>defer</code>和<code>async</code>属性的<code>&#x3C;script></code>标签，会有什么情况发生？</strong></p>\n    <ul>\n      <li>提示：考虑脚本执行的顺序以及可能的网络请求。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：如果不使用<code>defer</code>和<code>async</code>，脚本会在哪个阶段被执行，可能会导致什么问题？</strong></p>\n    <ul>\n      <li>提示：想想页面的加载和用户体验。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：在现代框架（如React或Vue）中，如何处理JavaScript的加载和执行？</strong></p>\n    <ul>\n      <li>提示：讨论组件生命周期和异步加载。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：有没有其他方法可以优化JavaScript的加载和执行？</strong></p>\n    <ul>\n      <li>提示：考虑代码分割、懒加载等概念。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：HTTP/2相较于HTTP/1.1对资源加载有什么优化？如何与<code>defer</code>和<code>async</code>结合使用？</strong></p>\n    <ul>\n      <li>提示：讨论多路复用和资源请求的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>问：你能简要说明一下服务端渲染（SSR）与客户端渲染（CSR）的区别吗？它们对JavaScript加载有何影响？</strong></p>\n    <ul>\n      <li>提示：考虑SEO、性能和用户体验。</li>\n    </ul>\n  </li>\n</ol>","mindmap":"mindmap\n  root((script标签属性))\n    defer\n      加载方式(异步加载, DOM解析完成前)\n      执行时机(DOM完全解析后)\n      执行顺序(按文档中出现顺序)\n      适用场景(DOM操作)\n    async\n      加载方式(异步加载)\n      执行时机(加载完成后立即执行)\n      执行顺序(不确定)\n      适用场景(独立脚本, 不依赖DOM)","keynote":"- `defer`：异步加载，DOM 完全加载后执行；按文档顺序执行；适合需要DOM的脚本。\n- `async`：异步加载，加载完即执行；执行顺序不定；适合不依赖DOM的脚本。","group_id":26,"kps":["HTML基础","元素与属性"],"years":[2024,2023,2022],"corps":["懂车帝","百度","网易","字节跳动","B站","阿里瓴羊","淘天集团","Shopee虾皮","滴滴","拼多多","顺丰","CVTE视源股份","360","猿辅导","奇安信","腾讯音乐","同程旅行","金山","杭州生机勃勃智能科技","美团","阿里巴巴","钉钉","快手","联想集团","腾讯"]}}