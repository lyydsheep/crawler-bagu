{"success":true,"data":{"id":186525,"name":"<p>重绘和回流的区别是什么？</p>","options":null,"answer":"<p>重绘和回流都是浏览器渲染机制中的重要概念，二者存在明显区别：</p>\n<h3>定义</h3>\n<ul>\n  <li><strong>重绘</strong>：当一个元素的外观发生改变，但没有影响到布局信息（元素在文档流中的位置、大小尺寸、边距等）时，浏览器会将新样式赋予元素并重新绘制它的外观，这个过程称为重绘。例如，改变元素的颜色、背景色、透明度等。</li>\n  <li><strong>回流</strong>：也被称为重排，当DOM的变化影响了元素的布局信息（元素的宽度、高度、边距、位置等），浏览器需要重新计算元素在视口内的位置和大小，将其安放到界面中的正确位置，这个过程称为回流。比如，改变元素的宽度、高度、边距，添加或删除可见的DOM元素等。</li>\n</ul>\n<h3>触发条件</h3>\n<ul>\n  <li><strong>重绘</strong>：触发重绘的操作通常是那些只改变元素视觉外观，而不影响布局的属性。常见的属性包括：<code>color</code>、<code>background-color</code>、<code>visibility</code>、<code>outline</code>、<code>border-style</code>等。</li>\n  <li><strong>回流</strong>：触发回流的操作涉及到元素布局信息的改变。常见的操作有：\n    <ul>\n      <li>DOM元素的添加、删除、修改。</li>\n      <li>元素尺寸的改变，如<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>等。</li>\n      <li>页面初始渲染。</li>\n      <li>浏览器窗口大小改变。</li>\n      <li>字体大小的改变。</li>\n    </ul>\n  </li>\n</ul>\n<h3>性能影响</h3>\n<ul>\n  <li><strong>重绘</strong>：重绘的开销相对较小，因为它只需要重新绘制元素的外观，不需要重新计算布局。浏览器可以直接使用之前计算好的布局信息，只更新元素的视觉表现。</li>\n  <li><strong>回流</strong>：回流的开销较大，因为它需要重新计算文档中所有受影响元素的布局信息，包括元素的大小、位置等。回流完成后，还需要触发重绘来更新元素的外观。因此，回流通常会导致性能问题，尤其是在频繁触发回流的情况下。</li>\n</ul>\n<h3>关系</h3>\n<p>回流一定会触发重绘，因为重新计算布局后，元素的外观需要重新绘制；但重绘不一定会触发回流，因为重绘只涉及元素外观的改变，不影响布局信息。</p>","type":6,"level":2,"freq":0.002617801,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：HTML中重绘和回流的区别是什么。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对重绘和回流概念的理解。</li>\n      <li>重绘和回流触发的条件。</li>\n      <li>重绘和回流对性能的影响。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）渲染树</h4>\n<p>浏览器将HTML、CSS解析后构建渲染树，渲染树包含了每个元素的大小、位置等信息，用于在屏幕上绘制元素。</p>\n<h4>（2）重绘和回流的基本概念</h4>\n<ul>\n  <li><strong>重绘</strong>：当一个元素的外观发生改变，但没有影响到布局信息（元素的大小、位置、边距等）时，浏览器会将新样式赋予元素并重新绘制，这个过程称为重绘。</li>\n  <li><strong>回流</strong>：当DOM的变化影响了元素的布局信息（元素的大小尺寸、边距、位置、甚至元素的数量、有无等），浏览器需要重新计算元素在视口内的位置和大小，将其安放到界面中的正确位置，这个过程叫做回流。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）触发条件不同</h4>\n<ul>\n  <li><strong>重绘</strong>：触发重绘的常见情况有改变元素的颜色、透明度、背景色等不影响布局的样式。例如，将一个按钮的颜色从红色改为蓝色。</li>\n  <li><strong>回流</strong>：触发回流的情况较多，如添加或删除可见的DOM元素；元素的尺寸发生变化（边距、宽度、高度等）；页面的初始渲染；浏览器窗口大小改变等。</li>\n</ul>\n<h4>（2）性能影响不同</h4>\n<ul>\n  <li><strong>重绘</strong>：重绘的代价相对较小，因为它只需要重新绘制元素的外观，不需要重新计算布局信息。</li>\n  <li><strong>回流</strong>：回流的代价较高，因为它需要重新计算整个渲染树中受影响元素的布局信息，可能会导致大量的重绘操作。</li>\n</ul>\n<h4>（3）执行顺序</h4>\n<p>回流必定会触发重绘，因为重新计算布局后元素的外观可能需要更新；但重绘不一定会触发回流，因为只是外观改变不涉及布局信息的变化。</p>\n<h3>4. 示例代码及说明</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &#x3C;style>\n        .box {\n            width: 100px;\n            height: 100px;\n            background-color: red;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div class=\"box\" id=\"myBox\">&#x3C;/div>\n    &#x3C;script>\n        // 触发重绘\n        const box = document.getElementById('myBox');\n        box.style.color = 'blue';\n\n        // 触发回流\n        box.style.width = '200px';\n    &#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<ul>\n  <li>在上述代码中，<code>box.style.color = 'blue'</code> 只改变了元素的颜色，会触发重绘；而 <code>box.style.width = '200px'</code> 改变了元素的宽度，会触发回流，并且回流后会接着触发重绘。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）认为重绘和回流没有区别</h4>\n<ul>\n  <li>误区：将重绘和回流的概念混淆，认为它们是相同的操作。</li>\n  <li>纠正：明确重绘只涉及外观改变，回流涉及布局信息的重新计算，回流代价更高且回流必定触发重绘。</li>\n</ul>\n<h4>（2）忽视回流的性能影响</h4>\n<ul>\n  <li>误区：在编写代码时不考虑回流的触发条件，频繁进行会触发回流的操作。</li>\n  <li>纠正：尽量批量修改样式，避免频繁读写布局信息，以减少回流的次数。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“重绘和回流是HTML渲染过程中的两个不同概念。重绘是指当元素的外观发生改变，但不影响布局信息时，浏览器重新绘制元素的过程，常见的触发情况如改变元素的颜色、透明度等。回流则是当DOM的变化影响了元素的布局信息时，浏览器重新计算元素在视口内的位置和大小的过程，像添加或删除可见DOM元素、改变元素尺寸等都会触发回流。</p>\n<p>回流的代价比重绘高，因为回流需要重新计算布局信息，可能会导致大量的重绘操作，并且回流必定会触发重绘，但重绘不一定会触发回流。在编写代码时，应尽量减少回流的次数，例如批量修改样式，避免频繁读写布局信息，以提高页面的性能。”</p>","more_ask":"<ol>\n  <li>\n    <p>\n      哪些操作会触发回流和重绘？\n      提示：从页面元素的尺寸、位置、内容等方面去思考常见的操作。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何优化代码以减少回流和重绘的发生？\n      提示：考虑批量修改元素样式、使用文档片段等方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      回流和重绘对页面性能的具体影响有哪些？\n      提示：从页面响应速度、资源消耗等角度分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      当页面中有动画效果时，怎样避免频繁的回流和重绘？\n      提示：可以从动画的实现方式、使用的 CSS 属性等方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      回流和重绘在不同浏览器中的表现有差异吗？\n      提示：不同浏览器的渲染引擎不同，可从这个角度思考。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((重绘和回流))\n    定义\n      重绘\n      回流\n    触发条件\n      重绘\n      回流\n    性能影响\n      重绘\n      回流\n    关系","keynote":"重绘和回流：浏览器渲染机制重要概念\n定义：\n  重绘：元素外观变但不影响布局，重新绘制外观\n  回流：DOM变化影响布局，重新计算位置大小\n触发条件：\n  重绘：改变视觉外观不影响布局的属性\n  回流：DOM操作、元素尺寸改变、初始渲染、窗口大小改变、字体大小改变\n性能影响：\n  重绘：开销小，只重绘外观\n  回流：开销大，重算布局且触发重绘\n关系：回流必触发重绘，重绘不一定触发回流","group_id":26,"kps":["HTML基础"],"years":[2024],"corps":["Shopee虾皮"]}}