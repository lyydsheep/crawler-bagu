{
  "success": true,
  "data": {
    "id": 186093,
    "name": "<p>哪些情况会触发回流和重绘</p>",
    "options": null,
    "answer": "<h3>回流</h3>\n<p>回流（重排）是指当DOM的变化影响了元素的布局信息（元素的的宽高大小、边距、位置、外边距、内边距、边框等几何信息），浏览器需要重新计算元素在视口内的位置和大小，将其安放到界面中的过程。以下情况会触发回流：</p>\n<ol>\n  <li><strong>添加或删除可见的DOM元素</strong>：当在文档中添加一个新的可见元素，或者移除一个已有的可见元素时，会影响其他元素的布局，从而触发回流。例如：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"container\">&#x3C;/div>\n    &#x3C;script>\n        const container = document.getElementById('container');\n        const newDiv = document.createElement('div');\n        newDiv.textContent = 'New Element';\n        container.appendChild(newDiv); // 添加元素，可能触发回流\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ol start=\"2\">\n  <li><strong>元素的尺寸发生变化</strong>：修改元素的宽度、高度、内边距、外边距、边框等盒模型属性时，会触发回流。比如：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #box {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"box\">&#x3C;/div>\n    &#x3C;script>\n        const box = document.getElementById('box');\n        box.style.width = '200px'; // 修改宽度，触发回流\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ol start=\"3\">\n  <li><strong>元素的位置发生变化</strong>：改变元素的定位属性（如<code>position</code>）、<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>等，或者修改元素在文档流中的位置，都会触发回流。例如：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #element {\n            position: relative;\n            left: 0;\n            background-color: lightgreen;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"element\">Element&#x3C;/div>\n    &#x3C;script>\n        const element = document.getElementById('element');\n        element.style.left = '50px'; // 修改位置，触发回流\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ol start=\"4\">\n  <li><strong>字体大小改变</strong>：修改元素的字体大小会影响文本的布局，进而触发回流。示例如下：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #text {\n            font-size: 16px;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;p id=\"text\">Some text here.&#x3C;/p>\n    &#x3C;script>\n        const text = document.getElementById('text');\n        text.style.fontSize = '24px'; // 修改字体大小，触发回流\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ol start=\"5\">\n  <li><strong>浏览器窗口大小改变</strong>：当用户调整浏览器窗口的大小，或者在移动端设备上改变屏幕方向时，页面布局需要重新计算，会触发回流。</li>\n  <li><strong>获取某些布局信息</strong>：当使用<code>offsetWidth</code>、<code>offsetHeight</code>、<code>clientWidth</code>、<code>clientHeight</code>、<code>scrollWidth</code>、<code>scrollHeight</code>、<code>getComputedStyle()</code>等方法获取元素的布局信息时，浏览器为了返回最新的准确值，会强制触发回流。例如：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #target {\n            width: 100px;\n            height: 100px;\n            background-color: lightcoral;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"target\">&#x3C;/div>\n    &#x3C;script>\n        const target = document.getElementById('target');\n        const width = target.offsetWidth; // 获取布局信息，可能触发回流\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<h3>重绘</h3>\n<p>重绘是指当一个元素的外观发生改变，但没有影响到布局信息时，浏览器将元素的外观重新绘制的过程。以下情况会触发重绘：</p>\n<ol>\n  <li><strong>修改元素的外观属性</strong>：如修改元素的颜色、背景颜色、透明度、边框颜色、可见性等不影响布局的属性时，会触发重绘。例如：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #box {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"box\">&#x3C;/div>\n    &#x3C;script>\n        const box = document.getElementById('box');\n        box.style.backgroundColor = 'lightgreen'; // 修改背景颜色，触发重绘\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<ol start=\"2\">\n  <li><strong>修改元素的轮廓</strong>：修改元素的<code>outline</code>属性时，只会触发重绘，因为轮廓不影响元素的布局。示例如下：</li>\n</ol>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;style>\n        #element {\n            width: 100px;\n            height: 100px;\n            background-color: lightyellow;\n        }\n    &#x3C;/style>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;div id=\"element\">&#x3C;/div>\n    &#x3C;script>\n        const element = document.getElementById('element');\n        element.style.outline = '2px solid red'; // 修改轮廓，触发重绘\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>一般来说，回流的成本比重绘高，因为回流需要重新计算布局，而重绘只需要重新绘制外观。在开发中，应尽量减少回流和重绘的次数，以提高页面性能。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.007853403,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：哪些情况会触发回流和重绘。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对回流和重绘概念的理解。</li>\n      <li>掌握能引发回流和重绘的具体场景。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）回流（重排）</h4>\n<ul>\n  <li>当DOM的变化影响了元素的布局信息（元素的宽高大小、边距、位置等），浏览器需要重新计算元素在视口内的布局信息，将其安放到界面中的正确位置，这个过程叫做回流。</li>\n  <li>回流是一个比较昂贵的操作，因为它需要重新计算整个文档的布局。</li>\n</ul>\n<h4>（2）重绘</h4>\n<ul>\n  <li>当一个元素的外观发生改变，但没有影响到布局信息时，浏览器会将新样式应用到元素上，这个过程叫做重绘。</li>\n  <li>重绘的开销相对回流较小，因为不需要重新计算布局。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）触发回流的情况</h4>\n<ul>\n  <li><strong>添加或删除可见的DOM元素</strong>：当在文档中添加或移除元素时，会影响其他元素的布局，从而触发回流。例如，使用<code>document.createElement()</code>创建新元素并插入到文档中，或者使用<code>removeChild()</code>移除元素。</li>\n  <li><strong>元素的尺寸发生变化</strong>：修改元素的宽度、高度、内边距、外边距、边框等属性会导致元素的布局信息改变，触发回流。如<code>element.style.width = '200px'</code>。</li>\n  <li><strong>内容的改变</strong>：文本内容的变化也可能影响元素的布局。例如，一个<code>p</code>标签内的文本增多，可能会导致元素高度增加，触发回流。</li>\n  <li><strong>浏览器窗口尺寸改变</strong>：当浏览器窗口的大小发生变化时，页面上的元素布局需要重新计算，会触发回流。</li>\n  <li><strong>改变元素的位置</strong>：修改元素的<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>、<code>margin</code>等属性，会影响元素的布局，触发回流。</li>\n  <li><strong>改变元素的字体大小</strong>：字体大小的改变会影响文本的占用空间，进而影响元素的布局，触发回流。</li>\n</ul>\n<h4>（2）触发重绘的情况</h4>\n<ul>\n  <li><strong>改变元素的外观属性</strong>：修改元素的颜色、背景颜色、透明度、边框颜色等不影响布局的属性，会触发重绘。例如，<code>element.style.color = 'red'</code>。</li>\n  <li><strong>改变元素的可见性</strong>：将元素的<code>visibility</code>属性从<code>visible</code>改为<code>hidden</code>或反之，会触发重绘，但不会触发回流。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n&#x3C;/head>\n\n&#x3C;body>\n    &#x3C;div id=\"myDiv\" style=\"width: 100px; height: 100px; background-color: blue;\">&#x3C;/div>\n    &#x3C;button onclick=\"changeSize()\">Change Size&#x3C;/button>\n    &#x3C;button onclick=\"changeColor()\">Change Color&#x3C;/button>\n\n    &#x3C;script>\n        function changeSize() {\n            const div = document.getElementById('myDiv');\n            div.style.width = '200px'; // 触发回流\n        }\n\n        function changeColor() {\n            const div = document.getElementById('myDiv');\n            div.style.backgroundColor = 'red'; // 触发重绘\n        }\n    &#x3C;/script>\n&#x3C;/body>\n\n&#x3C;/html>\n</code></pre>\n<ul>\n  <li>在这个例子中，点击<code>Change Size</code>按钮会修改元素的宽度，触发回流；点击<code>Change Color</code>按钮会修改元素的背景颜色，触发重绘。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）认为所有DOM操作都会触发回流</h4>\n<ul>\n  <li>误区：认为只要对DOM进行操作就会触发回流。</li>\n  <li>纠正：只有影响元素布局信息的DOM操作才会触发回流，如修改元素的尺寸、位置等；而只改变外观属性的操作只会触发重绘。</li>\n</ul>\n<h4>（2）混淆回流和重绘的概念</h4>\n<ul>\n  <li>误区：不能准确区分回流和重绘，将两者的触发条件混淆。</li>\n  <li>纠正：明确回流是由于布局信息改变引起的，重绘是由于外观属性改变引起的。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“回流是指当DOM的变化影响了元素的布局信息时，浏览器需要重新计算元素在视口内的布局信息的过程；重绘是指当一个元素的外观发生改变，但没有影响到布局信息时，浏览器将新样式应用到元素上的过程。</p>\n<p>触发回流的情况有：添加或删除可见的DOM元素、元素的尺寸发生变化、内容的改变、浏览器窗口尺寸改变、改变元素的位置、改变元素的字体大小等。触发重绘的情况有：改变元素的外观属性（如颜色、背景颜色、透明度、边框颜色等）、改变元素的可见性。</p>\n<p>需要注意的是，回流的开销相对较大，在进行DOM操作时，应尽量减少回流的发生，例如可以批量修改元素的样式，避免频繁修改元素的布局信息。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      回流和重绘对性能的具体影响有哪些，如何量化这种影响？\n      提示：可以从页面响应时间、CPU 占用率等方面思考量化方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何在代码中检测页面发生了回流和重绘？\n      提示：考虑使用浏览器开发者工具或者一些 JavaScript 库。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于频繁触发回流和重绘的场景，有哪些优化策略？\n      提示：从 CSS 布局、JavaScript 操作等角度去想优化方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      回流和重绘在不同浏览器中的表现有差异吗，举例说明？\n      提示：不同浏览器的渲染引擎不同，可从这个角度分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      当页面中有动画效果时，怎样避免不必要的回流和重绘？\n      提示：结合 CSS 动画和 JavaScript 动画的特点来思考。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((回流与重绘))\n    回流\n      定义\n      触发情况\n        添加或删除可见的DOM元素\n        元素的尺寸发生变化\n        元素的位置发生变化\n        字体大小改变\n        浏览器窗口大小改变\n        获取某些布局信息\n    重绘\n      定义\n      触发情况\n        修改元素的外观属性\n        修改元素的轮廓\n    性能影响\n      回流成本比重绘高\n      开发中减少回流和重绘次数",
    "keynote": "回流：DOM变化影响布局信息，浏览器重新计算元素位置和大小\n  - 触发情况：添加或删除可见DOM元素、元素尺寸变化、元素位置变化、字体大小改变、浏览器窗口大小改变、获取布局信息\n重绘：元素外观改变但不影响布局信息，浏览器重新绘制外观\n  - 触发情况：修改元素外观属性、修改元素轮廓\n性能：回流成本高，开发减少回流和重绘次数",
    "group_id": 26,
    "kps": [
      "HTML5新特性",
      "HTML基础",
      "元素与属性"
    ],
    "years": [
      2023,
      2022
    ],
    "corps": [
      "同程旅行",
      "金山"
    ]
  }
}