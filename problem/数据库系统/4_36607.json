{
  "success": true,
  "data": {
    "id": 36607,
    "name": "<p>简述主键索引和非主键索引的区别</p>",
    "options": null,
    "answer": "<p>在数据库系统中，主键索引和非主键索引（也称为辅助索引、二级索引）是两种重要的索引类型，它们存在多方面的区别，以下为你详细介绍：</p>\n<h3>定义与特性</h3>\n<ul>\n  <li><strong>主键索引</strong>\n    <ul>\n      <li>主键是表中用于唯一标识每一行记录的字段或字段组合，主键索引就是基于主键字段创建的索引。</li>\n      <li>一个表只能有一个主键索引，且主键索引的键值不能为 NULL，必须保证唯一性。</li>\n    </ul>\n  </li>\n  <li><strong>非主键索引</strong>\n    <ul>\n      <li>非主键索引是基于非主键字段创建的索引，用于提高对这些字段的查询效率。</li>\n      <li>一个表可以有多个非主键索引，索引字段的值可以重复，也可以为 NULL。</li>\n    </ul>\n  </li>\n</ul>\n<h3>数据结构与存储方式</h3>\n<ul>\n  <li><strong>主键索引</strong>\n    <ul>\n      <li>通常采用 B+ 树作为数据结构。在聚簇索引（大多数数据库中主键索引是聚簇索引）的情况下，B+ 树的叶子节点存储的是完整的行数据，即索引和数据是存储在一起的。</li>\n      <li>由于数据按照主键顺序存储，所以主键索引可以加快范围查询的速度，例如按主键进行的 <code>WHERE id BETWEEN 1 AND 100</code> 查询。</li>\n    </ul>\n  </li>\n  <li><strong>非主键索引</strong>\n    <ul>\n      <li>同样多使用 B+ 树结构，但非主键索引的叶子节点存储的是索引字段的值以及对应的主键值，而不是完整的行数据。</li>\n      <li>这种存储方式使得非主键索引相对主键索引占用的存储空间较小。</li>\n    </ul>\n  </li>\n</ul>\n<h3>查询过程</h3>\n<ul>\n  <li><strong>主键索引</strong>\n    <ul>\n      <li>当通过主键进行查询时，数据库可以直接使用主键索引定位到对应的行数据。因为主键索引的叶子节点包含了完整的行数据，所以一次查询操作就可以获取到所需的全部信息。</li>\n      <li>例如，执行 <code>SELECT * FROM users WHERE id = 1</code>，数据库可以直接通过主键索引找到 id 为 1 的行数据。</li>\n    </ul>\n  </li>\n  <li><strong>非主键索引</strong>\n    <ul>\n      <li>当使用非主键索引进行查询时，数据库首先在非主键索引的 B+ 树中查找对应的索引项，获取到对应的主键值。</li>\n      <li>然后再根据主键值到主键索引中查找完整的行数据，这个过程被称为“回表”。</li>\n      <li>例如，执行 <code>SELECT * FROM users WHERE name = 'John'</code>，数据库先在 <code>name</code> 字段的非主键索引中找到 <code>name</code> 为 'John' 的记录对应的主键值，再通过主键值到主键索引中获取完整的行数据。</li>\n    </ul>\n  </li>\n</ul>\n<h3>性能影响</h3>\n<ul>\n  <li><strong>主键索引</strong>\n    <ul>\n      <li>对于主键的等值查询和范围查询，主键索引的性能非常高，因为可以直接定位到数据行。</li>\n      <li>但在插入、更新和删除操作时，由于需要维护数据的有序性，可能会导致性能下降，尤其是在高并发环境下。</li>\n    </ul>\n  </li>\n  <li><strong>非主键索引</strong>\n    <ul>\n      <li>对于非主键字段的查询，非主键索引可以显著提高查询效率，减少全表扫描的开销。</li>\n      <li>然而，由于存在回表操作，当查询的数据量较大时，会增加额外的 I/O 开销，影响查询性能。</li>\n    </ul>\n  </li>\n</ul>\n<h3>应用场景</h3>\n<ul>\n  <li><strong>主键索引</strong>\n    <ul>\n      <li>适用于经常根据主键进行查询、排序和范围查找的场景，如根据用户 ID 查询用户信息。</li>\n      <li>用于保证数据的唯一性和完整性，确保表中每行记录都有唯一的标识。</li>\n    </ul>\n  </li>\n  <li><strong>非主键索引</strong>\n    <ul>\n      <li>适用于经常在查询条件中使用的非主键字段，如根据用户姓名、邮箱等字段进行查询。</li>\n      <li>可以提高连接操作的性能，当两个表通过非主键字段进行连接时，使用非主键索引可以加快连接的速度。</li>\n    </ul>\n  </li>\n</ul>",
    "type": 6,
    "level": 1,
    "freq": 0.001744766,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：简述主键索引和非主键索引的区别。</li>\n  <li><strong>考察点</strong>：对数据库中主键索引和非主键索引概念、结构、使用场景等方面差异的理解。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<ul>\n  <li><strong>索引的作用</strong>：数据库索引是一种数据结构，用于提高数据库查询的效率。它可以帮助数据库系统快速定位到包含特定值的记录，减少数据的扫描量。</li>\n  <li><strong>主键的定义</strong>：主键是表中的一个或多个字段，用于唯一标识表中的每一行记录。一个表只能有一个主键，且主键的值不能为 NULL。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）定义和唯一性</h4>\n<ul>\n  <li><strong>主键索引</strong>：基于主键字段创建的索引，主键具有唯一性和非空性，所以主键索引中的键值也是唯一且非空的。它能确保表中每一行记录都有唯一标识，保证数据的完整性和一致性。</li>\n  <li><strong>非主键索引</strong>：基于非主键字段创建的索引，其键值可以重复，也可以为 NULL。它主要用于提高对非主键字段的查询效率。</li>\n</ul>\n<h4>（2）存储结构</h4>\n<ul>\n  <li><strong>主键索引</strong>：在 InnoDB 存储引擎中，主键索引采用聚簇索引的方式存储。聚簇索引的叶子节点存储了表的完整数据记录，即数据和索引是存储在一起的。这使得通过主键索引查找数据时，可以直接在叶子节点获取到完整的数据。</li>\n  <li><strong>非主键索引</strong>：通常采用非聚簇索引（二级索引）的方式存储。非聚簇索引的叶子节点存储的是索引键值和对应的主键值，而不是完整的数据记录。当通过非主键索引查询数据时，需要先在非主键索引中找到对应的主键值，再通过主键值到主键索引中查找完整的数据，这个过程称为“回表”。</li>\n</ul>\n<h4>（3）查询效率</h4>\n<ul>\n  <li><strong>主键索引</strong>：由于主键索引直接指向数据记录，对于根据主键进行的查询操作，效率非常高，因为可以直接定位到数据所在的位置。</li>\n  <li><strong>非主键索引</strong>：对于根据非主键索引进行的查询，如果查询的字段只包含索引字段和主键字段，那么可以直接在非主键索引的叶子节点获取到所需数据，无需回表，查询效率较高；但如果查询的字段包含其他非索引字段，就需要进行回表操作，会增加查询的时间开销。</li>\n</ul>\n<h4>（4）创建和维护成本</h4>\n<ul>\n  <li><strong>主键索引</strong>：创建主键索引时，数据库会自动对主键字段进行唯一性和非空性检查，确保数据的完整性。同时，由于聚簇索引的特性，插入、更新和删除操作可能会导致数据的物理存储位置发生变化，维护成本相对较高。</li>\n  <li><strong>非主键索引</strong>：创建非主键索引时，不需要进行唯一性和非空性检查。非主键索引的维护成本相对较低，但过多的非主键索引会占用更多的磁盘空间，并且在进行数据插入、更新和删除操作时，也需要更新相应的索引，会增加一定的系统开销。</li>\n</ul>\n<h3>4. 示例说明</h3>\n<p>假设有一个用户表 <code>users</code>，包含字段 <code>id</code>（主键）、<code>name</code>、<code>age</code>。</p>\n<pre><code class=\"language-sql\">-- 创建用户表\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT\n);\n\n-- 创建非主键索引\nCREATE INDEX idx_name ON users (name);\n</code></pre>\n<ul>\n  <li>当执行 <code>SELECT * FROM users WHERE id = 1;</code> 时，数据库会直接通过主键索引定位到 <code>id</code> 为 1 的记录，效率很高。</li>\n  <li>当执行 <code>SELECT * FROM users WHERE name = 'John';</code> 时，数据库会先在 <code>idx_name</code> 非主键索引中查找 <code>name</code> 为 'John' 的记录对应的 <code>id</code>，然后再通过 <code>id</code> 到主键索引中查找完整的数据记录，可能会涉及回表操作。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）认为索引越多越好</h4>\n<ul>\n  <li>误区：为了提高查询效率，在表的所有字段上都创建索引。</li>\n  <li>纠正：过多的索引会占用大量的磁盘空间，并且在进行数据插入、更新和删除操作时，需要更新相应的索引，会增加系统开销，降低数据库的性能。</li>\n</ul>\n<h4>（2）混淆主键索引和非主键索引的存储结构</h4>\n<ul>\n  <li>误区：认为非主键索引和主键索引一样，叶子节点存储的是完整的数据记录。</li>\n  <li>纠正：非主键索引的叶子节点存储的是索引键值和对应的主键值，需要通过回表操作才能获取到完整的数据记录。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>主键索引和非主键索引存在多方面区别。定义上，主键索引基于主键字段创建，键值唯一且非空；非主键索引基于非主键字段创建，键值可重复、可为 NULL。存储结构方面，InnoDB 中主键索引是聚簇索引，叶子节点存完整数据；非主键索引多为非聚簇索引，叶子节点存索引键值和主键值。查询效率上，主键索引直接定位数据，效率高；非主键索引若查询字段含非索引字段需回表，增加开销。创建和维护成本上，主键索引创建时要检查唯一性和非空性，维护成本高；非主键索引创建无需此类检查，维护成本相对低，但过多索引会占磁盘空间、增系统开销。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      主键索引和非主键索引在数据更新操作（如插入、删除、修改）时的性能差异是怎样的，为什么会有这样的差异？\n      提示：从索引结构和数据存储方式思考对不同操作的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      当数据库表中同时存在主键索引和多个非主键索引时，数据库是如何选择使用哪个索引来执行查询的？\n      提示：考虑数据库的查询优化器和索引的统计信息。\n    </p>\n  </li>\n  <li>\n    <p>\n      非主键索引的覆盖索引是什么，使用覆盖索引有什么好处，在什么场景下可以使用？\n      提示：结合索引包含的字段和查询需求来理解。\n    </p>\n  </li>\n  <li>\n    <p>\n      主键索引和非主键索引在存储引擎（如InnoDB、MyISAM）中的实现有什么不同？\n      提示：对比不同存储引擎的特点和索引组织方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何评估一个非主键索引是否有必要存在，有哪些判断标准和方法？\n      提示：从索引对查询性能的提升和维护成本方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于大表，创建过多的非主键索引会带来哪些问题，如何解决这些问题？\n      提示：思考索引对磁盘空间、写入性能等方面的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      主键索引和非主键索引在分布式数据库中的应用和单机数据库有什么区别？\n      提示：考虑分布式环境下的数据分布和一致性问题。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((数据库主键索引与非主键索引区别))\n    定义与特性\n      主键索引\n        基于主键字段创建\n        一个表仅一个，键值非 NULL 且唯一\n      非主键索引\n        基于非主键字段创建\n        一个表可多个，值可重复或为 NULL\n    数据结构与存储方式\n      主键索引\n        多采用 B+ 树\n        聚簇索引叶子节点存完整行数据\n        加快范围查询\n      非主键索引\n        多采用 B+ 树\n        叶子节点存索引字段值和主键值\n        占用空间小\n    查询过程\n      主键索引\n        直接定位行数据\n        一次查询获全部信息\n      非主键索引\n        先查非主键索引得主键值\n        再通过主键值查完整行数据（回表）\n    性能影响\n      主键索引\n        等值和范围查询性能高\n        插入、更新、删除可能降性能\n      非主键索引\n        提高非主键字段查询效率\n        数据量大时回表增加 I/O 开销\n    应用场景\n      主键索引\n        用于主键查询、排序和范围查找\n        保证数据唯一性和完整性\n      非主键索引\n        用于非主键字段查询\n        提高连接操作性能",
    "keynote": "定义与特性：主键索引基于主键字段，一个表仅一个，键值非 NULL 且唯一；非主键索引基于非主键字段，一个表可多个，值可重复或为 NULL\n数据结构与存储方式：主键索引多为 B+ 树，聚簇索引叶子存完整行数据，加快范围查询；非主键索引多为 B+ 树，叶子存索引值和主键值，占空间小\n查询过程：主键索引直接定位行数据；非主键索引先查索引得主键值，再回表查完整数据\n性能影响：主键索引等值和范围查询性能高，增删改可能降性能；非主键索引提高非主键查询效率，数据量大回表增 I/O 开销\n应用场景：主键索引用于主键查询等，保证数据唯一性；非主键索引用于非主键字段查询，提高连接性能",
    "group_id": 4,
    "kps": [
      "索引与查询优化"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "借贷宝",
      "腾讯",
      "美团",
      "百度",
      "快手"
    ]
  }
}