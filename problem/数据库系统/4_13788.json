{
  "success": true,
  "data": {
    "id": 13788,
    "name": "<p>如何查询 SQL 执行的性能？</p>",
    "options": null,
    "answer": "<p>在数据库系统中，查询 SQL 执行性能是优化数据库性能的重要步骤。不同的数据库系统提供了不同的方法来查询 SQL 执行性能，以下是一些常见数据库系统的性能查询方法：</p>\n<h3>MySQL</h3>\n<h4>1. 使用 <code>EXPLAIN</code> 关键字</h4>\n<p><code>EXPLAIN</code> 可以帮助你分析 SQL 查询的执行计划，了解查询是如何执行的，包括表的读取顺序、使用的索引等信息。</p>\n<pre><code class=\"language-sql\">EXPLAIN SELECT * FROM users WHERE age > 20;\n</code></pre>\n<p>执行上述语句后，会返回一个结果集，包含以下重要列：</p>\n<ul>\n  <li><code>id</code>：查询的序列号。</li>\n  <li><code>select_type</code>：查询的类型，如 <code>SIMPLE</code>（简单查询）、<code>PRIMARY</code>（主查询）等。</li>\n  <li><code>table</code>：涉及的表名。</li>\n  <li><code>type</code>：连接类型，常见的有 <code>ALL</code>（全表扫描）、<code>index</code>（索引扫描）、<code>range</code>（范围扫描）等，<code>ALL</code> 性能最差，尽量优化为其他类型。</li>\n  <li><code>possible_keys</code>：可能使用的索引。</li>\n  <li><code>key</code>：实际使用的索引。</li>\n  <li><code>rows</code>：MySQL 估计要扫描的行数。</li>\n</ul>\n<h4>2. 启用慢查询日志</h4>\n<p>慢查询日志可以记录执行时间超过指定阈值的 SQL 语句，通过分析慢查询日志可以找出性能瓶颈。</p>\n<ul>\n  <li>编辑 MySQL 配置文件 <code>my.cnf</code> 或 <code>my.ini</code>，添加或修改以下配置：</li>\n</ul>\n<pre><code class=\"language-plaintext\">slow_query_log = 1\nslow_query_log_file = /var/log/mysql/mysql-slow.log\nlong_query_time = 2  # 单位为秒，执行时间超过 2 秒的查询会被记录\n</code></pre>\n<ul>\n  <li>重启 MySQL 服务使配置生效。之后，慢查询会被记录到指定的日志文件中，可以使用工具（如 <code>mysqldumpslow</code>）来分析日志。</li>\n</ul>\n<h3>PostgreSQL</h3>\n<h4>1. 使用 <code>EXPLAIN</code> 和 <code>EXPLAIN ANALYZE</code></h4>\n<ul>\n  <li><code>EXPLAIN</code> 用于显示查询的执行计划，但不实际执行查询。</li>\n</ul>\n<pre><code class=\"language-sql\">EXPLAIN SELECT * FROM users WHERE age > 20;\n</code></pre>\n<ul>\n  <li><code>EXPLAIN ANALYZE</code> 不仅显示执行计划，还会实际执行查询并显示执行时间、扫描的行数等详细信息。</li>\n</ul>\n<pre><code class=\"language-sql\">EXPLAIN ANALYZE SELECT * FROM users WHERE age > 20;\n</code></pre>\n<p>执行结果会包含查询计划的详细信息，如节点类型、成本估算、实际执行时间等。</p>\n<h4>2. 使用 <code>pg_stat_statements</code> 扩展</h4>\n<p><code>pg_stat_statements</code> 是一个 PostgreSQL 扩展，用于记录和统计 SQL 语句的执行信息。</p>\n<ul>\n  <li>首先，需要在 <code>postgresql.conf</code> 中添加以下配置：</li>\n</ul>\n<pre><code class=\"language-plaintext\">shared_preload_libraries = 'pg_stat_statements'\n</code></pre>\n<ul>\n  <li>重启 PostgreSQL 服务。</li>\n  <li>然后，在数据库中创建扩展：</li>\n</ul>\n<pre><code class=\"language-sql\">CREATE EXTENSION pg_stat_statements;\n</code></pre>\n<ul>\n  <li>可以使用以下查询查看 SQL 执行统计信息：</li>\n</ul>\n<pre><code class=\"language-sql\">SELECT query, calls, total_time, rows \nFROM pg_stat_statements \nORDER BY total_time DESC;\n</code></pre>\n<h3>Oracle</h3>\n<h4>1. 使用 <code>EXPLAIN PLAN</code></h4>\n<p><code>EXPLAIN PLAN</code> 用于生成 SQL 查询的执行计划，并将结果存储在 <code>PLAN_TABLE</code> 中。</p>\n<pre><code class=\"language-sql\">EXPLAIN PLAN FOR SELECT * FROM users WHERE age > 20;\nSELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);\n</code></pre>\n<p>执行结果会显示查询的执行步骤、使用的索引、成本估算等信息。</p>\n<h4>2. 使用 <code>SQL Trace</code> 和 <code>TKPROF</code></h4>\n<ul>\n  <li><code>SQL Trace</code> 可以记录 SQL 语句的执行细节，包括 CPU 时间、等待事件等。可以使用以下语句开启 SQL Trace：</li>\n</ul>\n<pre><code class=\"language-sql\">ALTER SESSION SET SQL_TRACE = TRUE;\n-- 执行要分析的 SQL 语句\nALTER SESSION SET SQL_TRACE = FALSE;\n</code></pre>\n<ul>\n  <li>执行完 SQL 语句后，会生成一个跟踪文件。使用 <code>TKPROF</code> 工具可以将跟踪文件转换为易读的格式：</li>\n</ul>\n<pre><code class=\"language-plaintext\">tkprof &#x3C;trace_file_name> output=&#x3C;output_file_name>\n</code></pre>\n<h3>SQL Server</h3>\n<h4>1. 使用 <code>SET SHOWPLAN_ALL ON</code></h4>\n<p><code>SET SHOWPLAN_ALL ON</code> 可以显示 SQL 查询的执行计划，但不实际执行查询。</p>\n<pre><code class=\"language-sql\">SET SHOWPLAN_ALL ON;\nSELECT * FROM users WHERE age > 20;\nSET SHOWPLAN_ALL OFF;\n</code></pre>\n<p>执行结果会包含查询计划的详细信息，如操作符、估计的行数、成本等。</p>\n<h4>2. 使用 SQL Server Management Studio（SSMS）的查询性能分析工具</h4>\n<p>在 SSMS 中，可以使用“包括实际执行计划”和“包括估计执行计划”功能来分析 SQL 查询的性能。在查询窗口中，点击相应的按钮，然后执行 SQL 语句，SSMS 会显示查询的执行计划和性能统计信息。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.002492522,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：如何查询 SQL 执行的性能。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对不同数据库系统中性能查询工具和方法的了解。</li>\n      <li>对 SQL 执行性能指标（如执行时间、资源使用等）的认识。</li>\n      <li>对分析 SQL 执行计划的掌握。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）SQL 执行性能的重要性</h4>\n<p>高效的 SQL 执行能提升数据库系统的响应速度和整体性能，减少资源消耗。性能不佳的 SQL 可能导致系统变慢、资源浪费甚至影响业务正常运行。</p>\n<h4>（2）性能指标</h4>\n<p>常见的性能指标包括执行时间、CPU 使用率、内存使用、磁盘 I/O 等。执行时间反映了 SQL 从开始到结束所花费的时长；CPU 使用率体现了 SQL 执行时对 CPU 资源的占用情况；内存使用和磁盘 I/O 则分别涉及到内存和磁盘的读写操作。</p>\n<h3>3. 解析</h3>\n<h4>（1）使用数据库自带的工具</h4>\n<ul>\n  <li><strong>EXPLAIN 语句</strong>：许多关系型数据库（如 MySQL、PostgreSQL 等）支持 EXPLAIN 语句。它可以展示 SQL 查询的执行计划，包括表的访问顺序、使用的索引、连接类型等信息。通过分析执行计划，能发现是否存在全表扫描、索引未使用等性能问题。例如在 MySQL 中：</li>\n</ul>\n<pre><code class=\"language-sql\">EXPLAIN SELECT * FROM users WHERE age > 20;\n</code></pre>\n<ul>\n  <li><strong>SHOW PROFILE 语句（MySQL）</strong>：可以查看 SQL 执行过程中各个阶段的详细性能信息，如 CPU 时间、等待时间等。使用前需要先开启 profiling：</li>\n</ul>\n<pre><code class=\"language-sql\">SET profiling = 1;\nSELECT * FROM users;\nSHOW PROFILES;\nSHOW PROFILE ALL FOR QUERY 1; -- 1 为查询编号\n</code></pre>\n<ul>\n  <li><strong>EXPLAIN ANALYZE（PostgreSQL）</strong>：不仅能展示执行计划，还会实际执行查询并统计执行过程中的性能数据，如实际的行数、执行时间等。</li>\n</ul>\n<pre><code class=\"language-sql\">EXPLAIN ANALYZE SELECT * FROM users WHERE age > 20;\n</code></pre>\n<h4>（2）数据库管理工具</h4>\n<ul>\n  <li><strong>Navicat</strong>：支持多种数据库，提供了直观的界面来查看 SQL 执行时间等性能信息。可以在查询编辑器中执行 SQL 后，查看执行结果面板中的执行时间统计。</li>\n  <li><strong>SQL Server Management Studio（SSMS）</strong>：用于管理 SQL Server 数据库。在查询窗口中执行 SQL 后，可以通过“显示估计的执行计划”和“包括实际的执行计划”功能来分析性能。</li>\n</ul>\n<h4>（3）日志分析</h4>\n<ul>\n  <li>数据库的日志文件记录了 SQL 执行的相关信息，如执行时间、错误信息等。通过分析日志文件，可以找出执行时间过长的 SQL 语句。例如 MySQL 的慢查询日志，需要在配置文件中开启：</li>\n</ul>\n<pre><code class=\"language-ini\">slow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2 -- 执行时间超过 2 秒的查询会被记录\n</code></pre>\n<h4>（4）第三方监控工具</h4>\n<ul>\n  <li><strong>New Relic</strong>：可以监控数据库的性能，包括 SQL 执行时间、吞吐量等指标。它能提供可视化的报表和警报功能，帮助及时发现性能问题。</li>\n  <li><strong>Datadog</strong>：支持对多种数据库的监控，能收集 SQL 执行的性能数据，并与其他系统指标关联分析。</li>\n</ul>\n<h3>4. 常见误区</h3>\n<h4>（1）只关注执行时间</h4>\n<ul>\n  <li>误区：仅以 SQL 的执行时间来判断性能好坏，忽略了其他重要指标，如 CPU 使用率、磁盘 I/O 等。</li>\n  <li>纠正：综合考虑多个性能指标，全面评估 SQL 的执行性能。</li>\n</ul>\n<h4>（2）过度依赖工具</h4>\n<ul>\n  <li>误区：完全依赖数据库管理工具或第三方监控工具提供的结果，而不深入理解执行计划和性能指标的含义。</li>\n  <li>纠正：学习和掌握 SQL 执行计划的分析方法，结合工具提供的数据进行深入分析。</li>\n</ul>\n<h4>（3）忽视日志分析</h4>\n<ul>\n  <li>误区：不重视数据库日志文件的作用，未能从中发现潜在的性能问题。</li>\n  <li>纠正：定期分析日志文件，特别是慢查询日志，找出执行时间过长的 SQL 并进行优化。</li>\n</ul>\n<h3>5. 总结回答</h3>\n<p>查询 SQL 执行的性能可以通过以下几种方式：</p>\n<ul>\n  <li>使用数据库自带的工具，如 EXPLAIN 语句查看执行计划，SHOW PROFILE（MySQL）或 EXPLAIN ANALYZE（PostgreSQL）获取更详细的性能信息。</li>\n  <li>借助数据库管理工具，如 Navicat、SQL Server Management Studio 等，它们提供了直观的界面来查看执行时间等性能数据。</li>\n  <li>分析数据库的日志文件，如 MySQL 的慢查询日志，找出执行时间过长的 SQL。</li>\n  <li>利用第三方监控工具，如 New Relic、Datadog 等，监控数据库的性能指标并提供可视化报表。</li>\n</ul>\n<p>在评估 SQL 性能时，要综合考虑多个性能指标，避免只关注执行时间；同时，不能过度依赖工具，要深入理解执行计划和性能指标的含义；还要重视日志分析，及时发现潜在的性能问题。</p>",
    "more_ask": "<h3>1. 不同数据库系统在查看 SQL 执行性能方面有哪些差异？</h3>\n<p>提示：可从常见数据库如 MySQL、Oracle、SQL Server 等的性能查看工具、命令语法、信息展示内容等方面思考。</p>\n<h3>2. 对于复杂的嵌套查询，如何更精准地分析其性能瓶颈？</h3>\n<p>提示：考虑嵌套查询的结构特点，如子查询的执行顺序、数据传递方式，以及如何利用数据库的执行计划来定位具体问题。</p>\n<h3>3. 当 SQL 执行性能受限于网络时，有哪些具体的排查和优化方法？</h3>\n<p>提示：从网络层面的指标（如带宽、延迟）、数据库的网络配置（如连接方式、端口设置）以及 SQL 本身的数据传输量等方面考虑。</p>\n<h3>4. 如何通过 SQL 执行性能分析来优化数据库的索引？</h3>\n<p>提示：结合执行计划中索引的使用情况，如索引扫描、全表扫描等，思考如何根据查询需求创建、修改或删除索引。</p>\n<h3>5. 在高并发场景下，SQL 执行性能分析会面临哪些特殊挑战，如何应对？</h3>\n<p>提示：考虑高并发时资源竞争、锁机制等对 SQL 执行的影响，以及如何在这种环境下准确分析性能。</p>\n<h3>6. 对于使用了存储过程的 SQL 执行，性能分析有什么特殊之处？</h3>\n<p>提示：存储过程有其自身的编译、执行特点，要考虑存储过程的参数传递、内部逻辑复杂度等对性能分析的影响。</p>\n<h3>7. 如何利用 SQL 执行性能分析来评估数据库架构的合理性？</h3>\n<p>提示：从表结构设计、数据分布、关联关系等方面，结合 SQL 执行的性能指标，判断数据库架构是否需要调整。</p>\n<h3>8. 当 SQL 执行性能突然下降时，如何快速定位问题？</h3>\n<p>提示：可以从系统资源（CPU、内存、磁盘 I/O）、数据库配置、近期的 SQL 变更等方面入手进行快速排查。</p>",
    "mindmap": "mindmap\n  root((数据库系统SQL执行性能查询方法))\n    MySQL\n      使用EXPLAIN关键字\n        分析执行计划\n        结果集重要列\n          id\n          select_type\n          table\n          type\n          possible_keys\n          key\n          rows\n      启用慢查询日志\n        编辑配置文件\n        重启服务\n        分析日志\n    PostgreSQL\n      使用EXPLAIN和EXPLAIN ANALYZE\n        EXPLAIN显示执行计划\n        EXPLAIN ANALYZE显示详细信息\n      使用pg_stat_statements扩展\n        配置文件添加配置\n        重启服务\n        创建扩展\n        查询统计信息\n    Oracle\n      使用EXPLAIN PLAN\n        生成执行计划\n        查看结果\n      使用SQL Trace和TKPROF\n        开启SQL Trace\n        生成跟踪文件\n        使用TKPROF转换\n    SQL Server\n      使用SET SHOWPLAN_ALL ON\n        显示执行计划\n      使用SSMS查询性能分析工具\n        包括实际执行计划\n        包括估计执行计划",
    "keynote": "MySQL：\n- 使用EXPLAIN关键字分析执行计划，关注结果集重要列\n- 启用慢查询日志，编辑配置文件、重启服务后分析日志\n\nPostgreSQL：\n- 使用EXPLAIN和EXPLAIN ANALYZE显示执行计划和详细信息\n- 使用pg_stat_statements扩展，配置、重启、创建扩展后查询统计信息\n\nOracle：\n- 使用EXPLAIN PLAN生成并查看执行计划\n- 使用SQL Trace记录执行细节，用TKPROF转换跟踪文件\n\nSQL Server：\n- 使用SET SHOWPLAN_ALL ON显示执行计划\n- 使用SSMS查询性能分析工具，包括实际和估计执行计划",
    "group_id": 4,
    "kps": [
      "索引与查询优化",
      "关系数据库管理系统"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "其域创新",
      "合思",
      "沐瞳科技",
      "美团",
      "字节生活服务",
      "百度",
      "Shopee虾皮",
      "Momenta",
      "字节跳动"
    ]
  }
}