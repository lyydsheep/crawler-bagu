{
  "success": true,
  "data": {
    "id": 16130,
    "name": "<p>请列举索引失效的场景，对于联合索引（a,b,c），使用（a,c）是否会走索引，为什么</p>",
    "options": null,
    "answer": "<h3>索引失效的场景</h3>\n<h4>1. 违背最左前缀原则</h4>\n<ul>\n  <li>在使用联合索引时，如果查询条件没有从联合索引的最左侧列开始，索引将失效。例如，对于联合索引 <code>(a, b, c)</code>，如果查询条件只使用了 <code>b</code> 或 <code>c</code>，而没有使用 <code>a</code>，则无法使用该联合索引。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 联合索引 (a, b, c)\n-- 此查询无法使用联合索引\nSELECT * FROM table_name WHERE b = 1 AND c = 2;\n</code></pre>\n<h4>2. 对索引列进行函数操作</h4>\n<ul>\n  <li>当对索引列使用函数时，数据库无法直接使用索引进行查找，会导致索引失效。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 假设 column_name 有索引\nSELECT * FROM table_name WHERE YEAR(column_name) = 2023;\n</code></pre>\n<h4>3. 隐式类型转换</h4>\n<ul>\n  <li>当查询条件中的数据类型与索引列的数据类型不一致，且发生隐式类型转换时，会导致索引失效。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 假设 id 是整数类型的索引列\nSELECT * FROM table_name WHERE id = '123';\n</code></pre>\n<h4>4. 使用 <code>OR</code> 连接条件</h4>\n<ul>\n  <li>如果 <code>OR</code> 连接的条件中有一个不使用索引，那么整个查询可能会导致索引失效。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 假设 column_a 有索引，column_b 无索引\nSELECT * FROM table_name WHERE column_a = 1 OR column_b = 2;\n</code></pre>\n<h4>5. 范围查询右侧的索引列失效</h4>\n<ul>\n  <li>在联合索引中，范围查询（如 <code>></code>、<code>&#x3C;</code>、<code>BETWEEN</code> 等）右侧的索引列将无法使用索引。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 联合索引 (a, b, c)\nSELECT * FROM table_name WHERE a > 1 AND b = 2 AND c = 3;\n-- 这里 a 是范围查询，b 和 c 无法使用索引\n</code></pre>\n<h4>6. <code>LIKE</code> 以通配符开头</h4>\n<ul>\n  <li>当 <code>LIKE</code> 语句以通配符 <code>%</code> 开头时，索引将失效。</li>\n  <li>示例 SQL：</li>\n</ul>\n<pre><code class=\"language-sql\">-- 假设 column_name 有索引\nSELECT * FROM table_name WHERE column_name LIKE '%abc';\n</code></pre>\n<h3>使用 <code>(a, c)</code> 是否会走索引及原因</h3>\n<p>对于联合索引 <code>(a, b, c)</code>，使用 <code>(a, c)</code> 会部分使用索引，即会使用到索引中的 <code>a</code> 列，但不会使用 <code>c</code> 列。</p>\n<h4>原因</h4>\n<p>联合索引遵循最左前缀原则，它会按照索引列的顺序依次使用。在查询条件中，如果使用了联合索引的最左侧列 <code>a</code>，数据库可以使用索引来快速定位满足 <code>a</code> 条件的记录。但是，由于 <code>b</code> 列被跳过，<code>c</code> 列在 <code>b</code> 列之后，根据最左前缀原则，<code>c</code> 列无法使用该联合索引。</p>\n<p>示例 SQL：</p>\n<pre><code class=\"language-sql\">-- 联合索引 (a, b, c)\nSELECT * FROM table_name WHERE a = 1 AND c = 2;\n-- 数据库会使用索引定位 a = 1 的记录，然后在这些记录中筛选 c = 2 的记录\n</code></pre>\n<p>在这种情况下，虽然可以利用索引快速定位 <code>a</code> 列满足条件的记录，但对于 <code>c</code> 列，数据库需要在已经定位的记录中进行扫描，而不是直接使用索引。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0002492522,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：一是列举索引失效的场景；二是判断对于联合索引（a,b,c），使用（a,c）是否会走索引并说明原因。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对数据库索引失效原理和常见场景的掌握。</li>\n      <li>对联合索引使用规则和原理的理解。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）索引的作用</h4>\n<p>索引是数据库中用于提高查询效率的数据结构，它可以快速定位到符合条件的数据行，减少全表扫描的开销。</p>\n<h4>（2）联合索引</h4>\n<p>联合索引是指在多个列上创建的索引，它遵循最左前缀原则，即查询时从联合索引的最左边列开始使用，依次向右匹配。</p>\n<h3>3. 解析</h3>\n<h4>（1）索引失效的场景</h4>\n<ul>\n  <li><strong>使用函数或表达式</strong>：当对索引列使用函数或表达式时，数据库无法直接使用索引进行查找。例如，<code>SELECT * FROM table WHERE YEAR(date_column) = 2024;</code>，这里对<code>date_column</code>使用了<code>YEAR</code>函数，会导致索引失效。</li>\n  <li><strong>类型不匹配</strong>：如果查询条件中的数据类型与索引列的数据类型不一致，可能会导致索引失效。比如索引列是<code>INT</code>类型，而查询时使用了字符串类型的值，数据库可能需要进行隐式类型转换，从而无法使用索引。</li>\n  <li><strong>使用<code>OR</code>连接条件</strong>：当使用<code>OR</code>连接多个条件时，如果其中一个条件不使用索引，可能会导致整个查询不走索引。例如，<code>SELECT * FROM table WHERE column1 = 'value1' OR column2 = 'value2';</code>，若<code>column2</code>没有索引，可能会使整个查询进行全表扫描。</li>\n  <li><strong>模糊查询以通配符开头</strong>：在使用<code>LIKE</code>进行模糊查询时，如果通配符<code>%</code>在开头，如<code>SELECT * FROM table WHERE column LIKE '%value';</code>，数据库无法利用索引快速定位，会导致索引失效。</li>\n  <li><strong>索引列参与计算</strong>：如果索引列参与了计算，如<code>SELECT * FROM table WHERE column + 1 = 10;</code>，数据库无法直接使用索引，会进行全表扫描。</li>\n</ul>\n<h4>（2）对于联合索引（a,b,c），使用（a,c）是否会走索引及原因</h4>\n<ul>\n  <li><strong>是否走索引</strong>：部分走索引，即会使用到联合索引中关于列<code>a</code>的部分，而列<code>c</code>的索引不会被使用。</li>\n  <li><strong>原因</strong>：联合索引遵循最左前缀原则，查询时必须从最左边的列开始依次使用。在使用（a,c）进行查询时，数据库可以利用联合索引中关于列<code>a</code>的部分进行快速查找，但由于列<code>b</code>被跳过，列<code>c</code>无法直接使用联合索引。数据库会先根据列<code>a</code>的条件筛选出一部分数据，然后在这些数据中再根据列<code>c</code>的条件进行筛选，而不是直接使用联合索引定位到符合列<code>c</code>条件的数据。</li>\n</ul>\n<h3>4. 示例代码（以MySQL为例）</h3>\n<pre><code class=\"language-sql\">-- 创建表并添加联合索引\nCREATE TABLE test_table (\n    a INT,\n    b INT,\n    c INT\n);\nCREATE INDEX idx_abc ON test_table (a, b, c);\n\n-- 查看执行计划，使用（a,c）查询\nEXPLAIN SELECT * FROM test_table WHERE a = 1 AND c = 2;\n</code></pre>\n<p>通过<code>EXPLAIN</code>语句可以查看查询的执行计划，从结果中可以看到是否使用了索引以及使用了哪些索引。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为联合索引可以随意使用列</h4>\n<ul>\n  <li>误区：认为联合索引中的列可以随意组合使用，而不考虑最左前缀原则。</li>\n  <li>纠正：联合索引必须从最左边的列开始依次使用，跳过中间列会导致部分索引失效。</li>\n</ul>\n<h4>（2）忽视索引失效的细节</h4>\n<ul>\n  <li>误区：只知道一些常见的索引失效场景，但不理解具体原因。</li>\n  <li>纠正：要深入理解每种索引失效场景的原理，如函数、表达式、类型不匹配等对索引使用的影响。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>索引失效的场景包括：对索引列使用函数或表达式、数据类型不匹配、使用<code>OR</code>连接条件、模糊查询以通配符开头、索引列参与计算等。</p>\n<p>对于联合索引（a,b,c），使用（a,c）部分走索引，即会使用到联合索引中关于列<code>a</code>的部分，列<code>c</code>的索引不会被使用。这是因为联合索引遵循最左前缀原则，查询时必须从最左边的列开始依次使用，跳过列<code>b</code>后，列<code>c</code>无法直接使用联合索引。</p>",
    "more_ask": "<h3>1. 对于联合索引（a,b,c），使用（b,c）是否会走索引，为什么？</h3>\n<p>提示：思考联合索引的最左前缀原则，分析（b,c）是否符合该原则以及数据库在执行查询时如何利用索引。</p>\n<h3>2. 若有联合索引（a,b,c），在查询语句中使用 <code>WHERE a > 1 AND c = 2</code>，索引的使用情况是怎样的，为什么？</h3>\n<p>提示：考虑范围查询对联合索引使用的影响，以及数据库在处理这种混合条件时索引的匹配规则。</p>\n<h3>3. 对于联合索引（a,b,c），在什么情况下使用（a,c）虽然走索引但效率不高？</h3>\n<p>提示：从数据分布、索引存储结构等方面思考，例如数据倾斜、索引页的碎片化等因素对索引效率的影响。</p>\n<h3>4. 假设表中有联合索引（a,b,c），当执行 <code>SELECT * FROM table WHERE a = 1 ORDER BY c</code> 时，索引会如何被使用，是否会有额外的排序操作？</h3>\n<p>提示：分析查询语句中的过滤条件和排序条件，结合联合索引的特性，判断数据库是否能利用索引完成排序。</p>\n<h3>5. 若数据库对联合索引（a,b,c）进行了统计信息更新，这会对使用（a,c）查询时的索引选择产生什么影响？</h3>\n<p>提示：了解数据库统计信息的作用，以及它如何影响查询优化器对索引的选择。</p>",
    "mindmap": "mindmap\n  root((索引失效场景及联合索引使用情况))\n    索引失效场景\n      违背最左前缀原则\n      对索引列进行函数操作\n      隐式类型转换\n      使用 OR 连接条件\n      范围查询右侧的索引列失效\n      LIKE 以通配符开头\n    使用 (a, c) 是否走索引及原因\n      部分使用索引（使用 a 列，不使用 c 列）\n      原因（遵循最左前缀原则，跳过 b 列，c 列无法用索引）",
    "keynote": "索引失效场景：\n- 违背最左前缀原则：联合索引查询条件未从最左侧列开始\n- 对索引列进行函数操作：使用函数使数据库无法直接用索引查找\n- 隐式类型转换：查询条件与索引列数据类型不一致且转换\n- 使用 OR 连接条件：OR 连接条件有一个不使用索引\n- 范围查询右侧的索引列失效：联合索引中范围查询右侧列无法用索引\n- LIKE 以通配符开头：LIKE 语句以 % 开头\n\n使用 (a, c) 情况：\n- 部分使用索引：使用 a 列，不使用 c 列\n- 原因：遵循最左前缀原则，跳过 b 列，c 列无法用索引",
    "group_id": 4,
    "kps": [
      "索引与查询优化"
    ],
    "years": [
      2024
    ],
    "corps": [
      "卓望"
    ]
  }
}