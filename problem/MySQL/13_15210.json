{
  "success": true,
  "data": {
    "id": 15210,
    "name": "<p>MySQL的聚簇索引和非聚簇索引有什么区别</p>",
    "options": null,
    "answer": "<h3>数据存储方式</h3>\n<ul>\n  <li><strong>聚簇索引</strong>：聚簇索引的叶子节点存储的是完整的行数据。也就是说，通过聚簇索引可以直接定位到包含所有列数据的行记录。在InnoDB存储引擎中，表数据是按照主键的顺序进行物理存储的，主键索引就是聚簇索引。例如，有一个用户表，主键是用户ID，那么该表的数据会按照用户ID的顺序在磁盘上存储，通过用户ID这个聚簇索引能直接获取到该用户的所有信息。</li>\n  <li><strong>非聚簇索引</strong>：非聚簇索引的叶子节点存储的是索引键值和对应的主键值。当使用非聚簇索引查询数据时，首先会在非聚簇索引中找到对应的主键值，然后再通过主键值到聚簇索引中查找完整的行数据，这个过程也被称为“回表”。比如，在用户表中对用户姓名建立非聚簇索引，通过姓名查询时，先在该索引中找到对应的主键值，再根据主键值去聚簇索引中获取完整的用户信息。</li>\n</ul>\n<h3>物理排序</h3>\n<ul>\n  <li><strong>聚簇索引</strong>：数据会按照聚簇索引的键值进行物理排序存储。这使得范围查询（如大于、小于、区间查询等）在聚簇索引上非常高效，因为数据在物理上是连续存储的，数据库可以快速定位到符合条件的数据范围。例如，对用户表按主键ID进行范围查询，数据库可以沿着物理存储顺序快速找到符合条件的记录。</li>\n  <li><strong>非聚簇索引</strong>：非聚簇索引不会影响数据的物理存储顺序，它只是单独维护了一个索引结构。非聚簇索引的键值在逻辑上是有序的，但数据行在物理上可能是分散存储的。所以，对于范围查询，非聚簇索引可能需要多次随机I/O操作来获取数据，效率相对较低。</li>\n</ul>\n<h3>索引数量</h3>\n<ul>\n  <li><strong>聚簇索引</strong>：一个表只能有一个聚簇索引。因为数据的物理存储顺序只能有一种，所以只能按照一个索引键来进行物理排序和存储。通常情况下，会选择主键作为聚簇索引。</li>\n  <li><strong>非聚簇索引</strong>：一个表可以有多个非聚簇索引。可以根据业务需求，在不同的列或列组合上创建多个非聚簇索引，以提高不同查询条件下的查询效率。例如，在用户表中可以同时对用户姓名、用户年龄等列创建非聚簇索引。</li>\n</ul>\n<h3>插入、更新和删除操作的性能</h3>\n<ul>\n  <li><strong>聚簇索引</strong>：由于数据的物理存储顺序与聚簇索引相关，插入、更新和删除操作可能会导致大量的数据移动和页分裂，从而影响性能。例如，当插入一条新记录时，如果该记录的主键值需要插入到已有数据的中间位置，可能需要移动后续的数据来为新记录腾出空间。</li>\n  <li><strong>非聚簇索引</strong>：非聚簇索引的插入、更新和删除操作相对简单，主要是对索引结构本身进行修改，不会直接影响数据的物理存储顺序。但如果涉及到的索引列被更新，也需要更新对应的非聚簇索引。</li>\n</ul>",
    "type": 6,
    "level": 1,
    "freq": 0.02040816,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：MySQL的聚簇索引和非聚簇索引有什么区别。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对聚簇索引和非聚簇索引概念的理解。</li>\n      <li>两者在数据存储结构上的差异。</li>\n      <li>两者在查询性能、插入性能等方面的不同。</li>\n      <li>两者在使用场景上的区别。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）索引的基本概念</h4>\n<p>索引是数据库中用于提高查询效率的数据结构，它可以帮助数据库快速定位到符合查询条件的数据。</p>\n<h4>（2）数据存储结构</h4>\n<p>在MySQL中，数据通常以页为单位存储在磁盘上，索引也是基于这种存储结构构建的。</p>\n<h3>3. 解析</h3>\n<h4>（1）聚簇索引</h4>\n<ul>\n  <li><strong>定义</strong>：聚簇索引是一种将数据行和索引键存储在一起的索引结构。在InnoDB存储引擎中，聚簇索引就是表的数据本身，表的数据按照主键的顺序存储。</li>\n  <li><strong>存储结构</strong>：聚簇索引的叶子节点包含了完整的数据行，即除了索引键之外，还包含了表中的其他列数据。</li>\n  <li><strong>查询性能</strong>：对于基于主键的查询，聚簇索引非常高效，因为可以直接通过索引定位到数据行。</li>\n  <li><strong>插入性能</strong>：插入操作可能会因为要维护数据的有序性而导致性能下降，特别是在插入新数据时可能会引起页分裂。</li>\n  <li><strong>使用场景</strong>：适用于经常根据主键进行查询的场景。</li>\n</ul>\n<h4>（2）非聚簇索引</h4>\n<ul>\n  <li><strong>定义</strong>：非聚簇索引也称为二级索引，它的索引键和数据行是分开存储的。</li>\n  <li><strong>存储结构</strong>：非聚簇索引的叶子节点存储的是索引键和对应的主键值，而不是完整的数据行。</li>\n  <li><strong>查询性能</strong>：当使用非聚簇索引进行查询时，需要先通过非聚簇索引找到对应的主键值，然后再通过主键在聚簇索引中查找完整的数据行，这个过程称为回表。因此，非聚簇索引的查询效率相对较低。</li>\n  <li><strong>插入性能</strong>：插入操作对非聚簇索引的影响较小，因为非聚簇索引只需要维护索引键和主键值的对应关系。</li>\n  <li><strong>使用场景</strong>：适用于经常根据非主键列进行查询的场景。</li>\n</ul>\n<h4>（3）两者区别总结</h4>\n<ul>\n  <li><strong>数据存储</strong>：聚簇索引将数据行和索引键存储在一起，非聚簇索引的索引键和数据行分开存储。</li>\n  <li><strong>查询效率</strong>：基于主键的查询，聚簇索引效率高；基于非主键列的查询，非聚簇索引可能更合适，但可能需要回表操作。</li>\n  <li><strong>插入效率</strong>：聚簇索引插入时可能因维护数据有序性导致性能下降，非聚簇索引插入影响较小。</li>\n  <li><strong>叶子节点内容</strong>：聚簇索引叶子节点包含完整数据行，非聚簇索引叶子节点包含索引键和主键值。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-sql\">-- 创建一个表，使用自增主键，InnoDB默认会为该主键创建聚簇索引\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50),\n    age INT\n);\n\n-- 为name列创建非聚簇索引\nCREATE INDEX idx_name ON users (name);\n</code></pre>\n<p>在这个例子中，<code>id</code>列的索引是聚簇索引，<code>name</code>列的索引是非聚簇索引。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为所有索引都是聚簇索引</h4>\n<ul>\n  <li>误区：没有区分聚簇索引和非聚簇索引的概念，认为所有索引都和数据存储在一起。</li>\n  <li>纠正：明确聚簇索引和非聚簇索引的定义和区别，了解非聚簇索引需要回表操作。</li>\n</ul>\n<h4>（2）忽视回表操作的性能影响</h4>\n<ul>\n  <li>误区：在使用非聚簇索引查询时，没有考虑回表操作带来的性能开销。</li>\n  <li>纠正：在设计索引时，要根据查询需求合理选择聚簇索引和非聚簇索引，尽量减少回表操作。</li>\n</ul>\n<h4>（3）不考虑插入性能</h4>\n<ul>\n  <li>误区：只关注查询性能，忽略了聚簇索引插入时可能导致的性能问题。</li>\n  <li>纠正：在设计表结构和索引时，要综合考虑查询和插入的性能需求。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“MySQL的聚簇索引和非聚簇索引有以下区别：</p>\n<ul>\n  <li><strong>数据存储</strong>：聚簇索引将数据行和索引键存储在一起，表的数据按照主键顺序存储；非聚簇索引的索引键和数据行分开存储，叶子节点存储索引键和对应的主键值。</li>\n  <li><strong>查询性能</strong>：基于主键的查询，聚簇索引效率高，可直接定位数据行；基于非主键列的查询，非聚簇索引可能更合适，但可能需要回表操作，效率相对较低。</li>\n  <li><strong>插入性能</strong>：聚簇索引插入时可能因维护数据有序性导致性能下降，特别是可能引起页分裂；非聚簇索引插入影响较小，只需维护索引键和主键值的对应关系。</li>\n  <li><strong>使用场景</strong>：聚簇索引适用于经常根据主键查询的场景；非聚簇索引适用于经常根据非主键列查询的场景。</li>\n</ul>\n<p>在设计表结构和索引时，需要综合考虑查询和插入的性能需求，合理选择聚簇索引和非聚簇索引。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      聚簇索引和非聚簇索引在数据插入、更新和删除操作上的性能差异是怎样的？\n      提示：从索引结构和数据存储方式考虑对不同操作的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      当表中同时存在聚簇索引和非聚簇索引时，查询语句执行过程中是如何利用这两种索引的？\n      提示：思考查询优化器的工作机制和索引的使用顺序。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何选择合适的列作为聚簇索引？如果选择不当会有什么后果？\n      提示：结合聚簇索引的特点和数据访问模式来分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      非聚簇索引的覆盖索引是什么，它有什么优势和使用场景？\n      提示：从索引包含的数据和查询效率方面思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于大表来说，聚簇索引和非聚簇索引的维护成本分别体现在哪些方面？\n      提示：考虑索引重建、空间占用和数据更新时的操作。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((数据存储与索引对比))\n    数据存储方式\n      聚簇索引\n        叶子节点存完整行数据\n        InnoDB中主键索引是聚簇索引\n      非聚簇索引\n        叶子节点存索引键值和主键值\n        查询需回表\n    物理排序\n      聚簇索引\n        数据按键值物理排序\n        范围查询高效\n      非聚簇索引\n        不影响数据物理存储顺序\n        范围查询效率低\n    索引数量\n      聚簇索引\n        一个表只能有一个\n        常选主键\n      非聚簇索引\n        一个表可多个\n        按业务需求创建\n    插入、更新和删除操作性能\n      聚簇索引\n        操作可能致数据移动和页分裂\n      非聚簇索引\n        操作主要改索引结构\n        索引列更新需更新索引",
    "keynote": "数据存储方式：\n- 聚簇索引：叶子存完整行数据，InnoDB主键索引是聚簇索引\n- 非聚簇索引：叶子存索引键值和主键值，查询需回表\n\n物理排序：\n- 聚簇索引：数据按键值物理排序，范围查询高效\n- 非聚簇索引：不影响数据物理顺序，范围查询效率低\n\n索引数量：\n- 聚簇索引：一个表一个，常选主键\n- 非聚簇索引：一个表可多个，按业务需求创建\n\n插入、更新和删除操作性能：\n- 聚簇索引：操作可能致数据移动和页分裂\n- 非聚簇索引：操作主要改索引结构，索引列更新需更新索引",
    "group_id": 13,
    "kps": [
      "基础概念"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "字节飞书",
      "快手",
      "腾讯",
      "百度",
      "字节跳动",
      "途虎养车",
      "鸣捷科技",
      "作业帮",
      "美团",
      "数字马力",
      "滴滴",
      "网易",
      "小黑盒",
      "4399",
      "连连支付",
      "杭州数梦工场",
      "58同城",
      "字节抖音",
      "钉钉",
      "阿里菜鸟",
      "阿里巴巴",
      "OPPO",
      "科大讯飞",
      "成都好未来",
      "小米",
      "Shopee虾皮",
      "拼多多",
      "携程",
      "CVTE视源股份",
      "蚂蚁集团",
      "B站",
      "小红书",
      "欢聚集团",
      "知乎",
      "七牛云",
      "饿了么",
      "掌阅",
      "顺丰"
    ]
  }
}