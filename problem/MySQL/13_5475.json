{
  "success": true,
  "data": {
    "id": 5475,
    "name": "<p>什么情况下索引会失效？即查询不走索引？</p>",
    "options": null,
    "answer": "<p>在 MySQL 中，索引可能会失效的情况有很多，以下是一些常见的情况：</p>\n<ol>\n  <li>\n    <p><strong>使用不等于操作符</strong>：</p>\n    <ul>\n      <li>使用 <code>!=</code> 或 <code>&#x3C;></code> 操作符时，索引可能不会被使用，因为数据库无法有效利用索引来跳过不等于的值。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>使用函数或计算</strong>：</p>\n    <ul>\n      <li>在 WHERE 子句中对索引列使用函数或计算（如 <code>WHERE YEAR(date_column) = 2023</code>），会导致索引失效。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>类型不匹配</strong>：</p>\n    <ul>\n      <li>查询条件的列类型与表中定义的列类型不一致（如将字符串与整型进行比较），可能会使索引失效。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>模糊查询</strong>：</p>\n    <ul>\n      <li>使用 <code>%</code> 开头的 LIKE 查询（如 <code>LIKE '%value'</code>）会导致索引失效，因为这需要全表扫描。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>OR 操作符</strong>：</p>\n    <ul>\n      <li>使用 <code>OR</code> 连接多个条件时，如果其中有一个条件不能使用索引，可能会导致整个查询不走索引。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>小表JOIN大表</strong>：</p>\n    <ul>\n      <li>在连接操作中，如果小表被放到右边，它可能会导致索引失效，因为优化器可能决定使用全表扫描。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>LIMIT 和 OFFSET</strong>：</p>\n    <ul>\n      <li>在某些情况下，使用 <code>LIMIT</code> 和 <code>OFFSET</code> 时，如果查询条件没有有效利用索引，可能会导致索引失效。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>NULL 值</strong>：</p>\n    <ul>\n      <li>WHERE 子句中对 NULL 值的直接比较（例如 <code>WHERE column IS NULL</code>）如果有不当使用，也可能影响索引的使用。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>大表的复杂查询</strong>：</p>\n    <ul>\n      <li>对于复杂的查询，包括多表连接、子查询等，如果条件不足以过滤结果集，可能会导致索引失效。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>ORDER BY 和 GROUP BY</strong>：</p>\n    <ul>\n      <li>如果使用的列与索引不一致，例如在 ORDER BY 中使用了没有索引的列，也可能导致索引失效。</li>\n    </ul>\n  </li>\n</ol>\n<p>为确保索引的有效使用，建议在查询中尽量避免以上情况，并定期通过 <code>EXPLAIN</code> 语句分析 SQL 查询的执行计划，查看是否有效利用了索引。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.05778215,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：MySQL中在哪些情况下索引会失效，导致查询不走索引。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对MySQL索引原理的理解。</li>\n      <li>各种索引失效场景的掌握。</li>\n      <li>SQL查询语句对索引使用的影响。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）索引的作用</h4>\n<p>索引是一种数据结构，它可以帮助数据库快速定位到符合查询条件的数据行，减少全表扫描的开销，提高查询效率。</p>\n<h4>（2）MySQL索引类型</h4>\n<p>常见的有B-Tree索引、哈希索引等，其中B-Tree索引是最常用的，它适用于范围查询和排序等操作。</p>\n<h3>3. 解析</h3>\n<h4>（1）对索引列进行函数操作</h4>\n<p>当对索引列使用函数时，MySQL无法直接使用索引进行快速查找。例如：</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE YEAR(created_at) = 2023;\n</code></pre>\n<p>这里对<code>created_at</code>列使用了<code>YEAR</code>函数，索引会失效，因为函数改变了索引列的原始值，无法直接利用索引结构。</p>\n<h4>（2）使用隐式类型转换</h4>\n<p>如果查询条件中的数据类型与索引列的数据类型不一致，MySQL会进行隐式类型转换，这可能导致索引失效。例如：</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE id = '123';\n</code></pre>\n<p>假设<code>id</code>列是整数类型，而这里使用了字符串类型的值，MySQL会进行隐式类型转换，从而无法使用索引。</p>\n<h4>（3）使用<code>OR</code>连接条件</h4>\n<p>当使用<code>OR</code>连接多个条件，且其中部分条件没有索引时，整个查询可能不走索引。例如：</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE id = 1 OR name = 'John';\n</code></pre>\n<p>如果<code>name</code>列没有索引，即使<code>id</code>列有索引，也可能导致索引失效，MySQL可能会选择全表扫描。</p>\n<h4>（4）范围查询后使用索引失效</h4>\n<p>在复合索引中，如果前面的列使用了范围查询，后面的列索引会失效。例如，有复合索引<code>(col1, col2)</code>：</p>\n<pre><code class=\"language-sql\">SELECT * FROM table_name WHERE col1 > 10 AND col2 = 20;\n</code></pre>\n<p>这里<code>col1</code>使用了范围查询，<code>col2</code>的索引会失效。</p>\n<h4>（5）模糊查询以通配符开头</h4>\n<p>当使用<code>LIKE</code>进行模糊查询，且通配符<code>%</code>在开头时，索引会失效。例如：</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE name LIKE '%John';\n</code></pre>\n<p>因为无法从索引的开头定位到匹配的数据，所以只能进行全表扫描。</p>\n<h4>（6）索引列使用<code>!=</code>或<code>&#x3C;></code></h4>\n<p>当使用<code>!=</code>或<code>&#x3C;></code>作为查询条件时，MySQL可能无法使用索引进行高效查找，而选择全表扫描。例如：</p>\n<pre><code class=\"language-sql\">SELECT * FROM users WHERE id!= 1;\n</code></pre>\n<h4>（7）统计数据不准确</h4>\n<p>如果MySQL的统计数据不准确，优化器可能会做出错误的决策，导致不使用索引。可以通过<code>ANALYZE TABLE</code>语句来更新统计数据。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-sql\">-- 创建示例表\nCREATE TABLE users (\n    id INT PRIMARY KEY,\n    name VARCHAR(50),\n    created_at DATETIME,\n    INDEX idx_name (name),\n    INDEX idx_created_at (created_at)\n);\n\n-- 插入示例数据\nINSERT INTO users (id, name, created_at) VALUES (1, 'John', '2023-01-01');\nINSERT INTO users (id, name, created_at) VALUES (2, 'Jane', '2023-02-01');\n\n-- 索引失效示例：对索引列使用函数\nEXPLAIN SELECT * FROM users WHERE YEAR(created_at) = 2023;\n\n-- 索引失效示例：模糊查询以通配符开头\nEXPLAIN SELECT * FROM users WHERE name LIKE '%John';\n</code></pre>\n<p>可以使用<code>EXPLAIN</code>关键字来分析查询语句的执行计划，查看是否使用了索引。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为所有查询都能使用索引</h4>\n<p>\n  误区：觉得只要有索引，查询就一定会使用索引。\n  纠正：实际上有多种情况会导致索引失效，需要根据具体的查询语句和数据情况来判断。\n</p>\n<h4>（2）忽视复合索引的使用规则</h4>\n<p>\n  误区：不清楚复合索引中各列的使用顺序和范围查询对索引的影响。\n  纠正：要了解复合索引的原理，遵循最左前缀原则，避免范围查询后导致后面列的索引失效。\n</p>\n<h4>（3）不关注统计数据的准确性</h4>\n<p>\n  误区：以为统计数据不会影响索引的使用。\n  纠正：统计数据不准确会影响优化器的决策，导致不使用索引，需要定期更新统计数据。\n</p>\n<h3>6. 总结回答</h3>\n<p>在MySQL中，以下情况索引会失效，导致查询不走索引：</p>\n<ol>\n  <li>对索引列进行函数操作，因为函数改变了索引列的原始值，无法直接利用索引结构。</li>\n  <li>使用隐式类型转换，查询条件的数据类型与索引列不一致，会使MySQL进行隐式转换，从而无法使用索引。</li>\n  <li>使用<code>OR</code>连接条件，且部分条件无索引，可能导致全表扫描。</li>\n  <li>复合索引中，前面列使用范围查询，后面列索引失效。</li>\n  <li>模糊查询以通配符<code>%</code>开头，无法从索引开头定位匹配数据。</li>\n  <li>索引列使用<code>!=</code>或<code>&#x3C;></code>，MySQL可能选择全表扫描。</li>\n  <li>统计数据不准确，优化器可能做出错误决策不使用索引。</li>\n</ol>\n<p>在编写SQL查询语句时，要避免上述情况，以确保索引能正常发挥作用，提高查询效率。同时，可使用<code>EXPLAIN</code>分析查询执行计划，查看索引使用情况。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>请列举几种能够导致索引失效的具体查询场景。</strong></p>\n    <ul>\n      <li>提示：考虑不同的数据操作、函数应用和查询结构。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在MySQL中，如何优化一个查询以确保使用索引？</strong></p>\n    <ul>\n      <li>提示：讨论筛选条件、JOIN顺序、SELECT字段等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>什么是复合索引？在什么情况下使用复合索引比较好？</strong></p>\n    <ul>\n      <li>提示：考虑多个字段的组合查询，索引顺序的重要性。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在使用LIKE语句时，哪些情况下会使用索引，哪些情况下会失效？</strong></p>\n    <ul>\n      <li>提示：分析通配符的位置对索引使用的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何使用EXPLAIN命令查看查询的执行计划，如何解读结果？</strong></p>\n    <ul>\n      <li>提示：关心行数估计、额外信息、是否使用索引等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在删除或更新数据时，索引的维护会带来什么样的性能影响？</strong></p>\n    <ul>\n      <li>提示：考虑写操作对索引结构的影响和性能开销。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果一个表上有一个索引，但查询依然没有使用，可能是什么原因？</strong></p>\n    <ul>\n      <li>提示：讨论数据分布、查询的选择性和索引耗用的开销。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在什么情况下可以考虑不使用索引？</strong></p>\n    <ul>\n      <li>提示：考虑数据小、查询单一性等因素。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>对比单列索引和多列索引，它们的应用场景有什么不同？</strong></p>\n    <ul>\n      <li>提示：关注查询的类型、效率以及编码复杂性。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何在MySQL中监控和分析索引的使用情况？</strong></p>\n    <ul>\n      <li>提示：引入性能_schema、慢查询日志等工具。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((索引失效情况))\n    使用不等于操作符\n    使用函数或计算\n    类型不匹配\n    模糊查询\n    OR 操作符\n    小表JOIN大表\n    LIMIT 和 OFFSET\n    NULL 值\n    大表的复杂查询\n    ORDER BY 和 GROUP BY",
    "keynote": "- 使用 `!=` 或 `<>` 操作符时索引可能不会被使用。\n- 在 WHERE 子句中对索引列使用函数或计算会导致索引失效。\n- 查询条件与表定义类型不一致会使索引失效。\n- `%` 开头的 LIKE 查询会导致全表扫描。\n- 使用 `OR` 连接多个条件时，如果其中一个条件不能用索引，则整个查询可能不走索引。\n- 小表在 JOIN 中位于右边可能导致索引失效。\n- 使用 `LIMIT` 和 `OFFSET` 时，若查询条件未有效利用索引，索引可能失效。\n- 对 NULL 值直接比较可能影响索引使用。\n- 复杂查询如多表连接、子查询等条件下不足过滤结果集会导致索引失效。\n- ORDER BY 或 GROUP BY 中使用的列无索引会致索引失效。",
    "group_id": 13,
    "kps": [
      "索引与查询优化"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "德勤",
      "字节跳动",
      "小米",
      "美团",
      "唯品会",
      "京东",
      "度小满",
      "卓望",
      "慧策",
      "中航信",
      "华为",
      "得物",
      "歌尔股份",
      "睿联技术",
      "瑞幸",
      "和赛",
      "牧原集团",
      "百度",
      "数字马力",
      "青岛小厂",
      "合思",
      "东软",
      "58同城",
      "明智慧远",
      "中科全安",
      "腾讯云智",
      "OPPO",
      "Moka",
      "京天威",
      "美团优选",
      "猫眼娱乐",
      "网易",
      "天润融通",
      "武汉某小厂",
      "4399",
      "平安产险科技中心",
      "虎牙",
      "B站",
      "软通动力",
      "水滴",
      "拼多多",
      "快手",
      "杭州小厂",
      "汇川技术",
      "科大讯飞",
      "蚂蚁集团",
      "曹操出行",
      "字节飞书",
      "字节抖音",
      "腾讯",
      "钉钉",
      "高德地图",
      "阿里巴巴",
      "百度文库",
      "好未来",
      "腾讯音乐",
      "满帮集团",
      "联影集团",
      "Shopee虾皮",
      "虾皮ESP",
      "滴滴",
      "深信服",
      "携程",
      "顺丰",
      "CVTE视源股份",
      "贝壳",
      "浙江大华",
      "中国工商银行",
      "用友",
      "小红书",
      "去哪儿旅行",
      "网易有道",
      "微众银行",
      "浩鲸科技",
      "金山",
      "货拉拉",
      "Momenta",
      "游卡",
      "美图",
      "交行西安软件研发中心",
      "腾讯PCG",
      "字节懂车帝",
      "来未来科技（浙江）熙牛医疗",
      "杭州公交云"
    ]
  }
}