{
  "success": true,
  "data": {
    "id": 13667,
    "name": "<p>请介绍 MySQL 的脏读、不可重复读、幻读概念，以及如何解决这些并发安全问题和 MVCC 的原理</p>",
    "options": null,
    "answer": "<h3>一、脏读、不可重复读、幻读概念解析</h3>\n<h4>1. 脏读（Dirty Read）</h4>\n<p><strong>定义</strong>：一个事务读取到另一个未提交事务修改的数据。<br><strong>核心问题</strong>：若未提交事务回滚，读取方会获取到无效的“脏数据”。<br><strong>示例</strong>：</p>\n<pre><code class=\"language-sql\">-- 事务A（未提交）\nSTART TRANSACTION;\nUPDATE users SET balance = balance - 100 WHERE id = 1; -- 修改未提交\n\n-- 事务B（读取脏数据）\nSTART TRANSACTION;\nSELECT balance FROM users WHERE id = 1; -- 读取到未提交的修改\n\n-- 事务A（回滚）\nROLLBACK; -- 事务B读取的数据失效\n</code></pre>\n<h4>2. 不可重复读（Non-Repeatable Read）</h4>\n<p><strong>定义</strong>：同一事务内，多次读取同一数据时结果不一致（因其他事务修改并提交了数据）。<br><strong>与脏读的区别</strong>：脏读是读取未提交数据，不可重复读是读取已提交的变更。<br><strong>示例</strong>：</p>\n<pre><code class=\"language-sql\">-- 事务A（首次查询）\nSTART TRANSACTION;\nSELECT balance FROM users WHERE id = 1; -- 结果为1000\n\n-- 事务B（修改并提交）\nUPDATE users SET balance = balance + 100 WHERE id = 1;\nCOMMIT; -- 数据变为1100\n\n-- 事务A（再次查询）\nSELECT balance FROM users WHERE id = 1; -- 结果变为1100（两次结果不一致）\nCOMMIT;\n</code></pre>\n<h4>3. 幻读（Phantom Read）</h4>\n<p><strong>定义</strong>：同一事务内，两次相同的范围查询返回不同的结果集（因其他事务插入/删除符合条件的记录）。<br><strong>核心场景</strong>：涉及数据行的新增或删除（如 <code>INSERT</code>/<code>DELETE</code>）。<br><strong>示例</strong>：</p>\n<pre><code class=\"language-sql\">-- 事务A（首次查询）\nSTART TRANSACTION;\nSELECT * FROM orders WHERE order_date = '2024-01-01'; -- 返回2条记录\n\n-- 事务B（插入新记录）\nINSERT INTO orders (order_date, amount) VALUES ('2024-01-01', 100);\nCOMMIT; -- 新增1条符合条件的记录\n\n-- 事务A（再次查询）\nSELECT * FROM orders WHERE order_date = '2024-01-01'; -- 返回3条记录（出现“幻觉”）\nCOMMIT;\n</code></pre>\n<h3>二、并发安全问题的解决方案</h3>\n<h4>1. 事务隔离级别概述</h4>\n<table>\n  <thead>\n    <tr>\n      <th>隔离级别</th>\n      <th>脏读</th>\n      <th>不可重复读</th>\n      <th>幻读</th>\n      <th>并发性能</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>读未提交（Read Uncommitted）</td>\n      <td>允许</td>\n      <td>允许</td>\n      <td>允许</td>\n      <td>最高</td>\n    </tr>\n    <tr>\n      <td>读已提交（Read Committed）</td>\n      <td>禁止</td>\n      <td>允许</td>\n      <td>允许</td>\n      <td>较高</td>\n    </tr>\n    <tr>\n      <td>可重复读（Repeatable Read）</td>\n      <td>禁止</td>\n      <td>禁止</td>\n      <td>部分禁止</td>\n      <td>中等</td>\n    </tr>\n    <tr>\n      <td>串行化（Serializable）</td>\n      <td>禁止</td>\n      <td>禁止</td>\n      <td>禁止</td>\n      <td>最低</td>\n    </tr>\n  </tbody>\n</table>\n<h4>2. 具体问题解决方案</h4>\n<ul>\n  <li>\n    <p><strong>脏读</strong>：<br><strong>方案</strong>：设置隔离级别为 <strong>读已提交（Read Committed）</strong>。<br><strong>原理</strong>：事务只能读取其他事务已提交的数据，避免未提交数据被访问。</p>\n    <pre><code class=\"language-sql\">SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\n</code></pre>\n  </li>\n  <li>\n    <p><strong>不可重复读</strong>：<br><strong>方案</strong>：设置隔离级别为 <strong>可重复读（Repeatable Read）</strong>（InnoDB 默认级别）。<br><strong>原理</strong>：通过 <strong>MVCC（多版本并发控制）</strong> 保证同一事务内读取的版本一致，不受其他事务提交影响。</p>\n  </li>\n  <li>\n    <p><strong>幻读</strong>：<br><strong>方案1</strong>：设置隔离级别为 <strong>串行化（Serializable）</strong>。<br><strong>原理</strong>：强制事务串行执行，完全避免并发，但性能最低。</p>\n    <pre><code class=\"language-sql\">SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n</code></pre>\n    <p><strong>方案2</strong>：利用 <strong>间隙锁（Gap Lock）</strong>（InnoDB 可重复读级别下默认启用）。<br><strong>原理</strong>：对查询范围的“间隙”加锁，阻止其他事务插入符合条件的记录。例如：</p>\n    <pre><code class=\"language-sql\">SELECT * FROM orders WHERE order_date = '2024-01-01' FOR UPDATE; -- 加锁范围查询\n</code></pre>\n  </li>\n</ul>\n<h3>三、MVCC（多版本并发控制）原理</h3>\n<h4>1. 核心目标</h4>\n<p>在保证事务隔离性的同时，通过多版本数据提高并发性能，避免锁竞争。</p>\n<h4>2. 实现要素</h4>\n<ul>\n  <li>\n    <p><strong>隐藏列（每行数据自带）</strong>：</p>\n    <ul>\n      <li><code>DB_TRX_ID</code>：最后修改数据的事务 ID。</li>\n      <li><code>DB_ROLL_PTR</code>：指向 undo 日志中旧版本数据的指针。</li>\n      <li><code>DB_ROW_ID</code>：可选，自动生成的行 ID（无主键时）。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>undo 日志</strong>：<br>记录数据修改前的版本，用于回滚和 MVCC 读。例如：</p>\n    <ul>\n      <li>插入数据时，undo 日志记录“删除”操作（反向操作）。</li>\n      <li>更新数据时，undo 日志记录旧版本数据。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Read View（读视图）</strong>：<br>每个事务启动时生成，包含以下信息：</p>\n    <ul>\n      <li><code>m_ids</code>：当前活跃（未提交）事务 ID 列表。</li>\n      <li><code>min_trx_id</code>：活跃事务中的最小 ID。</li>\n      <li><code>max_trx_id</code>：当前全局最大事务 ID + 1。</li>\n    </ul>\n    <p><strong>数据可见性规则</strong>：<br>当事务读取数据时，根据记录的 <code>DB_TRX_ID</code> 和 Read View 判断：</p>\n    <ol>\n      <li>若 <code>DB_TRX_ID &#x3C; min_trx_id</code>：数据在事务启动前已提交，可见。</li>\n      <li>若 <code>DB_TRX_ID >= max_trx_id</code>：数据在事务启动后修改，不可见。</li>\n      <li>若 <code>min_trx_id &#x3C;= DB_TRX_ID &#x3C; max_trx_id</code>：\n        <ul>\n          <li>若 <code>DB_TRX_ID</code> 在 <code>m_ids</code> 中（未提交）：不可见。</li>\n          <li>否则（已提交）：可见。</li>\n        </ul>\n      </li>\n    </ol>\n  </li>\n</ul>\n<h4>3. 示例流程</h4>\n<pre><code class=\"language-sql\">-- 事务A（ID=100，隔离级别可重复读）\nSTART TRANSACTION;\n-- 生成 Read View：min_trx_id=101, max_trx_id=200, m_ids=[101, 102]（假设其他活跃事务）\n\n-- 读取数据行X（DB_TRX_ID=99）：99 &#x3C; 101 → 可见。\n-- 读取数据行Y（DB_TRX_ID=101）：在m_ids中 → 不可见，从undo日志获取旧版本。\n</code></pre>\n<h3>四、总结对比</h3>\n<table>\n  <thead>\n    <tr>\n      <th>问题</th>\n      <th>本质描述</th>\n      <th>隔离级别解决方案</th>\n      <th>MVCC 作用</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>脏读</td>\n      <td>读取未提交数据</td>\n      <td>读已提交</td>\n      <td>通过 Read View 过滤未提交版本</td>\n    </tr>\n    <tr>\n      <td>不可重复读</td>\n      <td>读取已提交的变更</td>\n      <td>可重复读</td>\n      <td>固定事务内的可见版本</td>\n    </tr>\n    <tr>\n      <td>幻读</td>\n      <td>范围查询结果集变更</td>\n      <td>串行化/间隙锁</td>\n      <td>配合锁机制防止插入/删除</td>\n    </tr>\n  </tbody>\n</table>\n<p>通过合理设置隔离级别并理解 MVCC 原理，可在事务一致性和系统性能之间找到平衡。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.04179985,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：介绍 MySQL 的脏读、不可重复读、幻读概念，说明解决这些并发安全问题的方法以及 MVCC 的原理。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对 MySQL 并发问题（脏读、不可重复读、幻读）的理解。</li>\n      <li>解决并发安全问题的手段。</li>\n      <li>MVCC（多版本并发控制）的原理。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）并发问题产生原因</h4>\n<p>在多事务并发执行时，由于事务之间的操作相互影响，可能会出现数据不一致的情况，从而产生脏读、不可重复读和幻读问题。</p>\n<h4>（2）事务隔离级别</h4>\n<p>MySQL 提供了不同的事务隔离级别，用于控制事务之间的可见性和并发程度，不同的隔离级别对并发问题的处理能力不同。</p>\n<h3>3. 解析</h3>\n<h4>（1）脏读、不可重复读、幻读概念</h4>\n<ul>\n  <li><strong>脏读</strong>：一个事务读取到了另一个未提交事务修改的数据。例如，事务 A 修改了某条记录但未提交，事务 B 读取了这条被修改但未提交的数据，若事务 A 回滚，事务 B 读取的数据就是无效的脏数据。</li>\n  <li><strong>不可重复读</strong>：在一个事务内，多次读取同一数据却得到不同的结果。比如，事务 A 第一次读取某条记录，之后事务 B 修改了该记录并提交，事务 A 再次读取该记录时，结果与第一次不同。</li>\n  <li><strong>幻读</strong>：一个事务在执行过程中，由于其他事务插入或删除了某些记录，导致该事务在后续查询时发现结果集发生了变化，就像出现了“幻觉”一样。例如，事务 A 按照一定条件查询记录，事务 B 插入了符合该条件的新记录并提交，事务 A 再次按照相同条件查询时，会发现多了一些记录。</li>\n</ul>\n<h4>（2）解决并发安全问题的方法</h4>\n<ul>\n  <li><strong>事务隔离级别</strong>：\n    <ul>\n      <li><strong>读未提交（READ UNCOMMITTED）</strong>：允许一个事务读取另一个未提交事务的数据，会出现脏读、不可重复读和幻读问题，并发程度最高，但数据一致性最差。</li>\n      <li><strong>读已提交（READ COMMITTED）</strong>：一个事务只能读取另一个已提交事务的数据，避免了脏读，但仍可能出现不可重复读和幻读问题。</li>\n      <li><strong>可重复读（REPEATABLE READ）</strong>：MySQL 默认的隔离级别，保证在一个事务内多次读取同一数据的结果是一致的，避免了脏读和不可重复读，但仍可能存在幻读问题（MySQL InnoDB 引擎通过间隙锁解决了部分幻读问题）。</li>\n      <li><strong>串行化（SERIALIZABLE）</strong>：最高的隔离级别，事务串行执行，避免了所有并发问题，但并发性能最差。</li>\n    </ul>\n  </li>\n  <li><strong>锁机制</strong>：\n    <ul>\n      <li><strong>共享锁（S 锁）</strong>：多个事务可以同时对同一资源加共享锁，用于读操作，防止其他事务对该资源加排他锁。</li>\n      <li><strong>排他锁（X 锁）</strong>：一个事务对资源加排他锁后，其他事务不能再对该资源加任何锁，用于写操作。</li>\n    </ul>\n  </li>\n</ul>\n<h4>（3）MVCC 原理</h4>\n<p>MVCC（多版本并发控制）是一种并发控制的方法，主要用于提高数据库的并发性能。在 InnoDB 引擎中，MVCC 基于以下几个关键概念实现：</p>\n<ul>\n  <li><strong>版本号</strong>：每个事务有一个唯一的事务 ID，用于标识事务的先后顺序。</li>\n  <li><strong>隐藏列</strong>：InnoDB 为每行记录添加了几个隐藏列，包括 <code>DB_TRX_ID</code>（最近修改该行记录的事务 ID）、<code>DB_ROLL_PTR</code>（指向回滚段中该行记录旧版本的指针）和 <code>DB_ROW_ID</code>（行 ID）。</li>\n  <li><strong>回滚段</strong>：用于存储记录的旧版本，当事务修改记录时，会将旧版本记录存储在回滚段中。</li>\n  <li><strong>一致性视图</strong>：每个事务在启动时会生成一个一致性视图，该视图包含了当前所有活跃事务的 ID 列表。在事务执行查询时，会根据一致性视图和记录的 <code>DB_TRX_ID</code> 来判断记录的可见性。具体规则如下：\n    <ul>\n      <li>如果记录的 <code>DB_TRX_ID</code> 小于视图中最小的事务 ID，说明该记录在事务启动前就已经提交，对当前事务可见。</li>\n      <li>如果记录的 <code>DB_TRX_ID</code> 大于视图中最大的事务 ID，说明该记录是在事务启动后才开始的事务修改的，对当前事务不可见。</li>\n      <li>如果记录的 <code>DB_TRX_ID</code> 在视图的最小和最大事务 ID 之间，需要进一步判断该事务 ID 是否在视图的活跃事务列表中。如果不在，说明该事务已经提交，记录对当前事务可见；如果在，说明该事务还未提交，记录对当前事务不可见。</li>\n    </ul>\n  </li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-sql\">-- 设置事务隔离级别为读已提交\nSET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;\n\n-- 开启事务\nSTART TRANSACTION;\n\n-- 执行查询操作\nSELECT * FROM your_table;\n\n-- 提交事务\nCOMMIT;\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆并发问题概念</h4>\n<ul>\n  <li>误区：不能准确区分脏读、不可重复读和幻读的区别。</li>\n  <li>纠正：明确脏读是读取未提交数据，不可重复读是同一事务内多次读取结果不同，幻读是结果集行数发生变化。</li>\n</ul>\n<h4>（2）对事务隔离级别理解错误</h4>\n<ul>\n  <li>误区：认为隔离级别越高越好，忽略了并发性能的影响。</li>\n  <li>纠正：应根据实际业务需求选择合适的隔离级别，在保证数据一致性的前提下，尽量提高并发性能。</li>\n</ul>\n<h4>（3）误解 MVCC 原理</h4>\n<ul>\n  <li>误区：不清楚 MVCC 如何实现多版本控制和记录可见性判断。</li>\n  <li>纠正：理解 MVCC 基于版本号、隐藏列、回滚段和一致性视图的工作原理。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“在 MySQL 中，脏读是指一个事务读取到了另一个未提交事务修改的数据；不可重复读是指在一个事务内多次读取同一数据得到不同结果；幻读是指一个事务在执行过程中，由于其他事务插入或删除记录，导致该事务后续查询结果集发生变化。</p>\n<p>为了解决这些并发安全问题，MySQL 提供了不同的事务隔离级别，包括读未提交、读已提交、可重复读和串行化，隔离级别越高，数据一致性越好，但并发性能越低。此外，还可以使用锁机制，如共享锁和排他锁来控制并发访问。</p>\n<p>MVCC（多版本并发控制）是 InnoDB 引擎提高并发性能的一种方法。它基于版本号、隐藏列、回滚段和一致性视图实现。每个事务有唯一的事务 ID，InnoDB 为每行记录添加隐藏列存储事务 ID 和回滚指针。当事务修改记录时，旧版本记录存储在回滚段中。每个事务启动时生成一致性视图，根据视图和记录的事务 ID 判断记录的可见性，从而实现多版本控制，避免了部分并发问题。”</p>",
    "more_ask": "<h3>关于脏读、不可重复读、幻读</h3>\n<ol>\n  <li><strong>不同隔离级别下幻读的具体表现</strong>\n    <ul>\n      <li>提示：分别阐述在读未提交、读已提交、可重复读、串行化隔离级别下，幻读是如何体现的，结合具体的 SQL 操作场景。</li>\n    </ul>\n  </li>\n  <li><strong>脏读在实际业务中的危害举例</strong>\n    <ul>\n      <li>提示：思考一些对数据准确性要求较高的业务场景，如金融交易、库存管理等，说明脏读可能带来的严重后果。</li>\n    </ul>\n  </li>\n  <li><strong>不可重复读和幻读在数据库操作层面的本质区别</strong>\n    <ul>\n      <li>提示：从数据的修改和插入角度分析，结合数据库的锁机制和事务执行过程来解释。</li>\n    </ul>\n  </li>\n</ol>\n<h3>关于并发安全问题的解决</h3>\n<ol>\n  <li><strong>除了隔离级别，还有哪些方法可以解决并发安全问题</strong>\n    <ul>\n      <li>提示：考虑数据库的锁机制，如行级锁、表级锁，以及应用层面的并发控制手段。</li>\n    </ul>\n  </li>\n  <li><strong>使用高隔离级别解决并发问题的优缺点</strong>\n    <ul>\n      <li>提示：优点可以从数据一致性方面考虑，缺点则关注性能开销，如事务阻塞、并发度降低等。</li>\n    </ul>\n  </li>\n  <li><strong>在分布式系统中如何解决 MySQL 的并发安全问题</strong>\n    <ul>\n      <li>提示：涉及分布式事务的处理，如两阶段提交、三阶段提交，以及分布式锁的应用。</li>\n    </ul>\n  </li>\n</ol>\n<h3>关于 MVCC 原理</h3>\n<ol>\n  <li><strong>MVCC 如何与数据库的锁机制协同工作</strong>\n    <ul>\n      <li>提示：分析 MVCC 在不同锁粒度（行级锁、表级锁）下的作用，以及如何减少锁的使用以提高并发性能。</li>\n    </ul>\n  </li>\n  <li><strong>MVCC 在高并发写入场景下的性能瓶颈及优化策略</strong>\n    <ul>\n      <li>提示：考虑版本链的维护、垃圾回收等方面的性能开销，以及如何通过调整参数或优化架构来解决。</li>\n    </ul>\n  </li>\n  <li><strong>MVCC 对数据库存储空间的影响</strong>\n    <ul>\n      <li>提示：思考版本链的存储、事务 ID 的记录等对数据库磁盘空间的占用情况。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((数据库并发问题及解决方案))\n    脏读、不可重复读、幻读概念解析\n      脏读（Dirty Read）\n        定义\n        核心问题\n      不可重复读（Non-Repeatable Read）\n        定义\n        与脏读的区别\n      幻读（Phantom Read）\n        定义\n        核心场景\n    并发安全问题的解决方案\n      事务隔离级别概述\n        读未提交（Read Uncommitted）\n        读已提交（Read Committed）\n        可重复读（Repeatable Read）\n        串行化（Serializable）\n      具体问题解决方案\n        脏读\n          方案\n          原理\n        不可重复读\n          方案\n          原理\n        幻读\n          方案1\n          原理1\n          方案2\n          原理2\n    MVCC（多版本并发控制）原理\n      核心目标\n      实现要素\n        隐藏列\n        undo日志\n        Read View\n          信息\n          数据可见性规则\n      示例流程\n    总结对比\n      问题\n      本质描述\n      隔离级别解决方案\n      MVCC作用",
    "keynote": "脏读、不可重复读、幻读概念：\n- 脏读：读取未提交事务修改的数据，未提交事务回滚会获脏数据\n- 不可重复读：同一事务内多次读同一数据结果不同，读取已提交变更\n- 幻读：同一事务内范围查询结果集不同，涉及数据行增删\n\n并发安全问题解决方案：\n- 事务隔离级别：读未提交、读已提交、可重复读、串行化\n- 脏读：设读已提交，读已提交数据\n- 不可重复读：设可重复读，用MVCC保证版本一致\n- 幻读：设串行化或用间隙锁\n\nMVCC原理：\n- 核心目标：保证隔离性，提高并发性能\n- 实现要素：隐藏列、undo日志、Read View\n- 示例流程：按Read View规则判断数据可见性\n\n总结对比：\n- 脏读：读未提交数据，读已提交解决，Read View过滤\n- 不可重复读：读已提交变更，可重复读解决，固定可见版本\n- 幻读：范围查询结果集变更，串行化/间隙锁解决，配合锁机制",
    "group_id": 13,
    "kps": [
      "基础概念",
      "事务与并发控制"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "小米",
      "字节跳动",
      "快手",
      "杭州智晟未来信息科技",
      "安全狗",
      "度小满",
      "竹云科技",
      "阿里云",
      "拼多多",
      "Shopee虾皮",
      "蔚来",
      "作业帮",
      "杭州互联网小公司",
      "招银网络科技",
      "小红书",
      "腾讯云智",
      "美团",
      "TP-LINK",
      "百度",
      "亚信安全",
      "滴滴",
      "腾讯",
      "阿里国际",
      "绿盟科技",
      "字节抖音",
      "淘天集团",
      "杭州创业公司",
      "MiniMax",
      "京东",
      "完美世界",
      "腾讯音乐",
      "阿里巴巴",
      "深信服",
      "顺丰",
      "CVTE视源股份",
      "蚂蚁集团",
      "360",
      "猿辅导",
      "B站",
      "去哪儿旅行",
      "招商银行",
      "帆软软件",
      "帆软",
      "金山",
      "饿了么",
      "Momenta",
      "美图",
      "字节懂车帝",
      "懂车帝",
      "腾讯云",
      "好未来"
    ]
  }
}