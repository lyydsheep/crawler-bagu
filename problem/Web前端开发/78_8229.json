{
  "success": true,
  "data": {
    "id": 8229,
    "name": "<p>什么是同源策略</p>",
    "options": null,
    "answer": "<p>同源策略（Same-Origin Policy）是web安全的一项基本原则，旨在保护用户数据和防止恶意攻击。根据同源策略，只有具有相同源（origin）的文档或脚本才能彼此交互。这里的“源”由三个部分组成：</p>\n<ol>\n  <li><strong>协议</strong>（如http、https）</li>\n  <li><strong>主机</strong>（如www.example.com）</li>\n  <li><strong>端口</strong>（如80、443等）</li>\n</ol>\n<h3>示例</h3>\n<ul>\n  <li>如果页面在 <code>https://www.example.com:443</code> 上加载，那么它只能访问 <code>https://www.example.com:443</code> 上的资源。</li>\n  <li>但是，如果一个页面在 <code>http://www.example.com</code> 上加载，它不能访问 <code>https://www.example.com</code> 或 <code>http://otherdomain.com</code> 的资源。</li>\n</ul>\n<h3>限制和影响</h3>\n<p>同源策略的主要目的是防止跨站请求伪造（CSRF）和跨站脚本（XSS）等攻击。约束 AJAX 请求、Cookies、LocalStorage 等的跨域访问，以确保用户的敏感数据不被不良网站访问。</p>\n<h3>例外情况</h3>\n<p>为了实现更复杂的功能，开发者可以使用以下一些技术来绕过同源策略的限制：</p>\n<ol>\n  <li><strong>CORS（跨域资源共享）</strong>：允许服务器声明哪些源可以访问其资源。</li>\n  <li><strong>JSONP</strong>：一种老旧的技术，利用 <code>&#x3C;script></code> 标签的特性来请求数据，不受同源策略的限制。</li>\n  <li><strong>代理服务器</strong>：通过后端进行跨域请求。</li>\n</ol>\n<h3>总结</h3>\n<p>同源策略在web安全中起着至关重要的作用，虽然它可能会带来一定的不便，但确保用户数据安全是其根本目的。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.0004784689,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：什么是同源策略。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对同源策略概念的理解。</li>\n      <li>同源的判定规则。</li>\n      <li>同源策略的作用和意义。</li>\n      <li>同源策略的应用场景和限制。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Web浏览器的安全需求</h4>\n<p>在Web环境中，网页可能会包含来自不同源的资源，如脚本、样式表、图片等。为了防止恶意网站通过脚本访问其他网站的敏感信息，需要一种安全机制来限制不同源之间的交互。</p>\n<h4>（2）源的概念</h4>\n<p>源是由协议、域名和端口号三者共同组成的一个标识。例如，<code>https://example.com:8080</code> 中，协议是 <code>https</code>，域名是 <code>example.com</code>，端口号是 <code>8080</code>。</p>\n<h3>3. 解析</h3>\n<h4>（1）同源策略的定义</h4>\n<p>同源策略是Web浏览器中最核心的安全机制之一，它规定了浏览器只允许访问同源的资源。也就是说，只有当两个URL的协议、域名和端口号都相同时，它们才被认为是同源的，浏览器才允许一个页面中的脚本访问另一个页面的资源。</p>\n<h4>（2）同源的判定规则</h4>\n<p>以下是一些同源判定的示例：</p>\n<table>\n  <thead>\n    <tr>\n      <th>URL 1</th>\n      <th>URL 2</th>\n      <th>是否同源</th>\n      <th>原因</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>https://example.com</code></td>\n      <td><code>https://example.com</code></td>\n      <td>是</td>\n      <td>协议、域名、端口（默认端口省略时相同）都相同</td>\n    </tr>\n    <tr>\n      <td><code>http://example.com</code></td>\n      <td><code>https://example.com</code></td>\n      <td>否</td>\n      <td>协议不同</td>\n    </tr>\n    <tr>\n      <td><code>https://example.com</code></td>\n      <td><code>https://sub.example.com</code></td>\n      <td>否</td>\n      <td>域名不同</td>\n    </tr>\n    <tr>\n      <td><code>https://example.com:8080</code></td>\n      <td><code>https://example.com:80</code></td>\n      <td>否</td>\n      <td>端口不同</td>\n    </tr>\n  </tbody>\n</table>\n<h4>（3）同源策略的作用</h4>\n<ul>\n  <li><strong>保护用户信息安全</strong>：防止恶意网站通过脚本访问用户在其他网站上的敏感信息，如登录凭证、cookie等。</li>\n  <li><strong>防止跨站脚本攻击（XSS）</strong>：限制不同源之间的脚本交互，减少XSS攻击的风险。</li>\n  <li><strong>维护数据的完整性</strong>：确保每个网站的数据只能被该网站的脚本访问和修改，避免数据被非法篡改。</li>\n</ul>\n<h4>（4）同源策略的应用场景和限制</h4>\n<ul>\n  <li><strong>应用场景</strong>：在浏览器中，当一个页面通过AJAX请求另一个页面的数据时，同源策略会限制请求只能发送到同源的服务器。</li>\n  <li><strong>限制</strong>：同源策略也会带来一些不便，例如在开发中，可能需要跨域访问数据。为了解决这个问题，出现了一些跨域解决方案，如JSONP、CORS等。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;title>同源策略示例&#x3C;/title>\n&#x3C;/head>\n&#x3C;body>\n    &#x3C;script>\n        // 尝试访问不同源的资源，会受到同源策略的限制\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://anotherdomain.com/data', true);\n            xhr.send();\n        } catch (error) {\n            console.error('由于同源策略，无法访问不同源的资源:', error);\n        }\n    &#x3C;/script>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>在这个示例中，由于请求的URL <code>https://anotherdomain.com/data</code> 与当前页面不同源，浏览器会阻止该请求。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为只要域名相同就是同源</h4>\n<p>\n  误区：只关注域名，忽略了协议和端口号的影响。\n  纠正：同源的判定需要同时考虑协议、域名和端口号。\n</p>\n<h4>（2）误解同源策略的作用</h4>\n<p>\n  误区：认为同源策略可以完全防止所有的安全攻击。\n  纠正：同源策略只是一种基本的安全机制，不能完全防止所有的安全攻击，还需要结合其他安全措施。\n</p>\n<h4>（3）不清楚跨域解决方案</h4>\n<p>\n  误区：在遇到跨域问题时，不知道如何解决。\n  纠正：了解常见的跨域解决方案，如JSONP、CORS等，并根据具体情况选择合适的方案。\n</p>\n<h3>6. 总结回答</h3>\n<p>同源策略是Web浏览器中重要的安全机制，它规定浏览器仅允许访问同源的资源。所谓同源，指的是两个URL的协议、域名和端口号都相同。其作用主要是保护用户信息安全、防止跨站脚本攻击和维护数据完整性。例如在浏览器中，一个页面通过AJAX请求数据时，若目标URL与当前页面不同源，请求会被阻止。</p>\n<p>不过，同源策略也存在一些限制，在开发中可能会遇到跨域访问数据的需求。为此，出现了JSONP、CORS等跨域解决方案。需要注意的是，判定同源时要同时考虑协议、域名和端口号，并且同源策略不能完全杜绝所有安全攻击，还需结合其他安全措施。</p>",
    "more_ask": "<ol>\n  <li>\n    <p><strong>同源策略的实际应用</strong><br>提示：请举例说说同源策略在日常开发中如何影响你的工作。</p>\n  </li>\n  <li>\n    <p><strong>跨域请求的解决方案</strong><br>提示：你能介绍一下常见的跨域请求解决方案吗？例如CORS。</p>\n  </li>\n  <li>\n    <p><strong>JSONP的工作原理</strong><br>提示：你能简单解释一下JSONP是如何绕过同源策略的？</p>\n  </li>\n  <li>\n    <p><strong>不同浏览器的同源策略实现差异</strong><br>提示：你了解不同浏览器在同源策略方面有什么差异吗？</p>\n  </li>\n  <li>\n    <p><strong>同源策略与安全性</strong><br>提示：同源策略保障了哪些安全性，是否有漏洞或弊端？</p>\n  </li>\n  <li>\n    <p><strong>iframe的跨域限制</strong><br>提示：在使用iframe时，如何应对同源策略带来的跨域问题？</p>\n  </li>\n  <li>\n    <p><strong>Cookies与同源策略的关联</strong><br>提示：同源策略是如何影响Cookies的使用和共享的？</p>\n  </li>\n  <li>\n    <p><strong>如何检测跨域问题</strong><br>提示：在开发过程中，你是如何检测和调试跨域问题的？</p>\n  </li>\n  <li>\n    <p><strong>浏览器中开发者工具的使用</strong><br>提示：你能描述一下如何利用浏览器开发者工具监测同源策略相关的问题吗？</p>\n  </li>\n  <li>\n    <p><strong>同源策略与Web API的关系</strong><br>提示：Web API（如Fetch API）在同源策略下有怎样的限制？</p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  同源策略((Same-Origin Policy))\n    定义和目的\n      保护用户数据\n      防止恶意攻击\n    源的组成部分\n      协议\n      主机\n      端口\n    示例\n    限制和影响\n      防止CSRF\n      防止XSS\n      约束AJAX请求\n      约束Cookies\n      约束LocalStorage\n    例外情况\n      CORS\n      JSONP\n      代理服务器\n    总结\n      确保用户数据安全",
    "keynote": "- 同源策略是web安全的基本原则，旨在保护用户数据和防止恶意攻击。\n- 源由协议、主机和端口三部分组成。\n- 同源策略防止跨站请求伪造（CSRF）和跨站脚本（XSS）等攻击。\n- 例外技术包括CORS、JSONP和代理服务器。\n- 同源策略确保用户数据安全，尽管可能带来不便。",
    "group_id": 78,
    "kps": [
      "浏览器安全",
      "Web标准与协议"
    ],
    "years": [
      2024
    ],
    "corps": [
      "小米"
    ]
  }
}