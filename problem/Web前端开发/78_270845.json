{
  "success": true,
  "data": {
    "id": 270845,
    "name": "<p>判断以下四种情况是否跨域：<a href=\"https://a.tencent.com/foo/bar%EF%BC%9Bhttp://a.tencent.com/foo/bar%EF%BC%9Bhttps://a.tencent.com/foo/aaa%EF%BC%9Bhttps://b.tencent.com/foo/bar\">https://a.tencent.com/foo/bar；http://a.tencent.com/foo/bar；https://a.tencent.com/foo/aaa；https://b.tencent.com/foo/bar</a></p>",
    "options": null,
    "answer": "<p>在计算机网络中，跨域是指浏览器从一个域名的网页去请求另一个域名的资源时，由于浏览器的同源策略，会受到限制。同源策略要求两个URL的协议、域名和端口都相同才属于同源，否则就会被认为是跨域。下面对这四种情况进行分析：</p>\n<h3>1. <code>https://a.tencent.com/foo/bar</code> 与 <code>http://a.tencent.com/foo/bar</code></h3>\n<ul>\n  <li><strong>协议</strong>：前者使用的是 <code>https</code> 协议，后者使用的是 <code>http</code> 协议，协议不同。</li>\n  <li><strong>域名</strong>：两者的域名都是 <code>a.tencent.com</code>，域名相同。</li>\n  <li>\n    <strong>端口</strong>：虽然这里没有明确给出端口，但 <code>https</code> 默认端口是 443，<code>http</code> 默认端口是 80，端口不同。\n    由于协议和端口不同，所以这两个URL是跨域的。\n  </li>\n</ul>\n<h3>2. <code>https://a.tencent.com/foo/bar</code> 与 <code>https://a.tencent.com/foo/aaa</code></h3>\n<ul>\n  <li><strong>协议</strong>：两者都使用 <code>https</code> 协议，协议相同。</li>\n  <li><strong>域名</strong>：域名都是 <code>a.tencent.com</code>，域名相同。</li>\n  <li>\n    <strong>端口</strong>：都使用 <code>https</code> 协议，默认端口都是 443，端口相同。\n    虽然路径不同（一个是 <code>/foo/bar</code>，另一个是 <code>/foo/aaa</code>），但根据同源策略，协议、域名和端口都相同，所以这两个URL是同源的，不跨域。\n  </li>\n</ul>\n<h3>3. <code>https://a.tencent.com/foo/bar</code> 与 <code>https://b.tencent.com/foo/bar</code></h3>\n<ul>\n  <li><strong>协议</strong>：两者都使用 <code>https</code> 协议，协议相同。</li>\n  <li><strong>域名</strong>：一个是 <code>a.tencent.com</code>，另一个是 <code>b.tencent.com</code>，域名不同。</li>\n  <li>\n    <strong>端口</strong>：都使用 <code>https</code> 协议，默认端口都是 443，端口相同。\n    由于域名不同，所以这两个URL是跨域的。\n  </li>\n</ul>\n<p>综上所述，<code>https://a.tencent.com/foo/bar</code> 与 <code>http://a.tencent.com/foo/bar</code> 跨域；<code>https://a.tencent.com/foo/bar</code> 与 <code>https://a.tencent.com/foo/aaa</code> 不跨域；<code>https://a.tencent.com/foo/bar</code> 与 <code>https://b.tencent.com/foo/bar</code> 跨域。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.0722488,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：判断给定的四个URL（<a href=\"https://a.tencent.com/foo/bar%EF%BC%9Bhttp://a.tencent.com/foo/bar%EF%BC%9Bhttps://a.tencent.com/foo/aaa%EF%BC%9Bhttps://b.tencent.com/foo/bar%EF%BC%89%E4%B8%A4%E4%B8%A4%E4%B9%8B%E9%97%B4%E6%98%AF%E5%90%A6%E8%B7%A8%E5%9F%9F%E3%80%82\">https://a.tencent.com/foo/bar；http://a.tencent.com/foo/bar；https://a.tencent.com/foo/aaa；https://b.tencent.com/foo/bar）两两之间是否跨域。</a></li>\n  <li><strong>考察点</strong>：对浏览器同源策略及跨域概念的理解，重点在于明确判断跨域的三个关键因素（协议、域名、端口）。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）同源策略</h4>\n<p>同源策略是浏览器的一种安全机制，它限制了不同源的页面之间的资源共享和交互。只有当两个URL的协议、域名和端口都相同时，才认为它们是同源的，否则就是跨域。</p>\n<h4>（2）跨域判断规则</h4>\n<ul>\n  <li><strong>协议</strong>：如<code>http</code>和<code>https</code>是不同的协议。</li>\n  <li><strong>域名</strong>：完全一致才认为相同，子域名不同也属于不同域名。</li>\n  <li><strong>端口</strong>：若URL中明确指定端口，端口不同则不同源，若未指定，<code>http</code>默认端口是80，<code>https</code>默认端口是443。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）<a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a></h4>\n<ul>\n  <li>协议不同，一个是<code>https</code>，一个是<code>http</code>，虽然域名和路径相同，但根据跨域判断规则，这两个URL跨域。</li>\n</ul>\n<h4>（2）<a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a></h4>\n<ul>\n  <li>协议都是<code>https</code>，域名都是<code>a.tencent.com</code>，端口默认都是443，虽然路径不同，但协议、域名和端口都相同，所以这两个URL是同源的，不跨域。</li>\n</ul>\n<h4>（3）<a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a></h4>\n<ul>\n  <li>协议都是<code>https</code>，但域名不同，一个是<code>a.tencent.com</code>，一个是<code>b.tencent.com</code>，端口默认都是443，根据跨域判断规则，这两个URL跨域。</li>\n</ul>\n<h4>（4）<a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a> 与 <a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a></h4>\n<ul>\n  <li>协议不同，一个是<code>http</code>，一个是<code>https</code>，虽然域名相同，但根据跨域判断规则，这两个URL跨域。</li>\n</ul>\n<h4>（5）<a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a></h4>\n<ul>\n  <li>协议不同，一个是<code>http</code>，一个是<code>https</code>，且域名不同，一个是<code>a.tencent.com</code>，一个是<code>b.tencent.com</code>，所以这两个URL跨域。</li>\n</ul>\n<h4>（6）<a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a></h4>\n<ul>\n  <li>协议都是<code>https</code>，但域名不同，一个是<code>a.tencent.com</code>，一个是<code>b.tencent.com</code>，端口默认都是443，所以这两个URL跨域。</li>\n</ul>\n<h3>4. 总结回答</h3>\n<ul>\n  <li><a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a> 跨域。</li>\n  <li><a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a> 不跨域。</li>\n  <li><a href=\"https://a.tencent.com/foo/bar\">https://a.tencent.com/foo/bar</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a> 跨域。</li>\n  <li><a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a> 与 <a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a> 跨域。</li>\n  <li><a href=\"http://a.tencent.com/foo/bar\">http://a.tencent.com/foo/bar</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a> 跨域。</li>\n  <li><a href=\"https://a.tencent.com/foo/aaa\">https://a.tencent.com/foo/aaa</a> 与 <a href=\"https://b.tencent.com/foo/bar\">https://b.tencent.com/foo/bar</a> 跨域。</li>\n</ul>\n<p>判断依据是浏览器的同源策略，即只有协议、域名和端口都相同的URL才是同源的，否则就是跨域。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      <strong>HTTPS 跨域请求时如何解决安全认证问题</strong>\n      提示：思考在跨域请求时，HTTPS 协议的证书验证机制以及如何在跨域场景下保证数据传输的安全性。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>当跨域请求失败，可能有哪些原因，如何排查</strong>\n      提示：从浏览器的同源策略限制、服务器端配置、网络环境等多个方面去分析可能的问题和排查方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>简述 JSONP 跨域的原理及优缺点</strong>\n      提示：关注 JSONP 是如何利用 script 标签的 src 属性不受同源策略限制这一特性实现跨域的，以及它在实际应用中的利弊。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在 Node.js 服务器端如何处理跨域请求</strong>\n      提示：了解 Node.js 中常用的中间件或方法来设置响应头以允许跨域请求。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>跨域请求时，Cookie 是如何处理的</strong>\n      提示：思考在跨域场景下，浏览器对 Cookie 的发送和接收规则，以及如何在代码中控制 Cookie 的跨域使用。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((计算机网络跨域问题))\n    跨域定义\n      浏览器请求受同源策略限制\n      同源需协议、域名、端口相同\n    案例分析\n      https://a.tencent.com/foo/bar与http://a.tencent.com/foo/bar\n        协议不同（https与http）\n        端口不同（443与80）\n        结论：跨域\n      https://a.tencent.com/foo/bar与https://a.tencent.com/foo/aaa\n        协议相同（https）\n        域名相同（a.tencent.com）\n        端口相同（443）\n        结论：同源，不跨域\n      https://a.tencent.com/foo/bar与https://b.tencent.com/foo/bar\n        协议相同（https）\n        域名不同（a.tencent.com与b.tencent.com）\n        端口相同（443）\n        结论：跨域",
    "keynote": "跨域定义：浏览器请求受同源策略限制，同源需协议、域名、端口相同\n案例1：https://a.tencent.com/foo/bar与http://a.tencent.com/foo/bar，协议、端口不同，跨域\n案例2：https://a.tencent.com/foo/bar与https://a.tencent.com/foo/aaa，协议、域名、端口相同，不跨域\n案例3：https://a.tencent.com/foo/bar与https://b.tencent.com/foo/bar，域名不同，跨域",
    "group_id": 78,
    "kps": [
      "Web标准与协议"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "蔚来",
      "中科智能计算研究所",
      "得物",
      "字节跳动",
      "贝壳",
      "数字马力",
      "腾讯",
      "唯品会",
      "百度",
      "小红书",
      "杭州0 - 20人小厂",
      "影石",
      "虎牙",
      "科大讯飞",
      "快手",
      "Shopee虾皮",
      "小鹅通",
      "淘天集团",
      "完美世界",
      "比心",
      "小米",
      "滴滴",
      "深信服",
      "携程",
      "顺丰",
      "CVTE视源股份",
      "蚂蚁集团",
      "猿辅导",
      "浙江大华",
      "B站",
      "广联达",
      "去哪儿旅行",
      "亚信安全",
      "格力",
      "旷视科技",
      "神策数据",
      "同程旅行",
      "金山",
      "爱数科技",
      "七牛云",
      "美团",
      "美团优选",
      "阿里大文娱",
      "阿里巴巴",
      "京东",
      "网易",
      "好未来",
      "联想集团",
      "腾讯音乐",
      "满帮集团"
    ]
  }
}