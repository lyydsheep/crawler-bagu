{
  "success": true,
  "data": {
    "id": 6807,
    "name": "<p>讲讲Mybatis 的一级、二级缓存</p>",
    "options": null,
    "answer": "<p>MyBatis 是一个流行的 Java 持久层框架，用于简化数据库操作。MyBatis 提供了一级缓存和二级缓存机制，以提高查询性能和减少对数据库的访问。下面是对这两种缓存的详细讲解：</p>\n<h3>1. 一级缓存</h3>\n<h4>定义</h4>\n<ul>\n  <li><strong>一级缓存</strong>是指 MyBatis 在 SqlSession 范围内的缓存。每个 SqlSession 都有自己的一级缓存。</li>\n</ul>\n<h4>特点</h4>\n<ul>\n  <li><strong>作用域</strong>：一级缓存的生命周期与 SqlSession 相同。当 SqlSession 被关闭时，一级缓存也随之失效。</li>\n  <li><strong>有效性</strong>：同一个 SqlSession 内的多次查询如果参数相同（例如通过 id 查找某个对象），MyBatis 会直接从一级缓存中读取数据，而不是去数据库查询。</li>\n  <li><strong>清空条件</strong>：当执行了 CRUD（增、删、改）操作后，相关的缓存内容会被清空，以确保数据的一致性。</li>\n  <li><strong>使用场景</strong>：适用于频繁更新的场景或在同一个事务中对相同数据进行多次查询的场景。</li>\n</ul>\n<h3>2. 二级缓存</h3>\n<h4>定义</h4>\n<ul>\n  <li><strong>二级缓存</strong>是指 MyBatis 在全局范围内的缓存，多个 SqlSession 共享同一个二级缓存。</li>\n</ul>\n<h4>特点</h4>\n<ul>\n  <li><strong>作用域</strong>：二级缓存的生命周期与 MyBatis 配置及 Mapper 映射文件相关，它在 SqlSession 之间共享。</li>\n  <li><strong>有效性</strong>：与一级缓存相比，二级缓存可以跨 SqlSession 使用，适用于读取频繁但更新较少的场景。</li>\n  <li><strong>配置</strong>：需要在<code>mybatis-config.xml</code>或对应的 Mapper 映射文件中进行配置来启用二级缓存。可以通过 <code>&#x3C;cache/></code> 标签开启二级缓存。</li>\n  <li><strong>清空条件</strong>：同样，当数据发生变化（如执行了更新、删除等操作）时，相关的二级缓存也会失效。</li>\n  <li><strong>使用场景</strong>：适用于高并发读取，且数据更新不频繁的场景，可以有效减少数据库的访问频率。</li>\n</ul>\n<h3>总结</h3>\n<ul>\n  <li><strong>一级缓存</strong>是 SqlSession 范围内的缓存，每个会话有独立的缓存；适合频繁的相似查询。</li>\n  <li><strong>二级缓存</strong>是全局共享的缓存，适合跨会话的查询，能够进一步提高性能。</li>\n</ul>\n<h3>注意事项</h3>\n<ul>\n  <li>对于敏感数据（如频繁更新的表），可能不适合使用二级缓存。</li>\n  <li>需要合理配置二级缓存并进行监控，以防止缓存不一致或过期的问题。</li>\n  <li>MyBatis 支持多种类型的二级缓存实现，如使用自定义的 Cache 类，或集成外部缓存框架（如 Ehcache, Redis 等）。</li>\n</ul>\n<p>了解这两种缓存机制可以帮助你更有效地使用 MyBatis，提高应用程序的性能。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.007272727,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：阐述MyBatis的一级、二级缓存。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对MyBatis一级缓存和二级缓存概念的理解。</li>\n      <li>一级缓存和二级缓存的工作原理。</li>\n      <li>一级缓存和二级缓存的作用范围。</li>\n      <li>一级缓存和二级缓存的使用场景和优缺点。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）缓存的作用</h4>\n<p>在数据访问过程中，缓存是一种提高系统性能的有效手段。通过将经常访问的数据存储在高速存储区域（如内存）中，下次需要相同数据时可以直接从缓存中获取，避免了重复的数据库查询，从而减少数据库压力，提高系统响应速度。</p>\n<h4>（2）MyBatis缓存概述</h4>\n<p>MyBatis提供了一级缓存和二级缓存，用于减少对数据库的访问，提高查询性能。</p>\n<h3>3. 解析</h3>\n<h4>（1）一级缓存</h4>\n<ul>\n  <li><strong>作用范围</strong>：一级缓存是SqlSession级别的缓存，也称为本地缓存。每个SqlSession都有自己独立的一级缓存，不同的SqlSession之间的一级缓存是相互隔离的。</li>\n  <li><strong>工作原理</strong>：当在同一个SqlSession中执行相同的查询语句时，MyBatis会先从当前SqlSession的一级缓存中查找是否有该查询结果。如果有，则直接返回缓存中的数据，不再执行数据库查询；如果没有，则执行数据库查询，并将查询结果存入一级缓存中，供后续相同查询使用。</li>\n  <li><strong>失效情况</strong>：当SqlSession执行了增、删、改操作时，该SqlSession的一级缓存会被清空，以保证数据的一致性。因为增、删、改操作可能会改变数据库中的数据，原有的缓存数据可能已经过时。</li>\n  <li><strong>使用场景</strong>：适用于在同一个SqlSession中多次执行相同查询的场景，能有效减少数据库查询次数，提高性能。</li>\n  <li><strong>示例代码</strong></li>\n</ul>\n<pre><code class=\"language-java\">try (SqlSession session = sqlSessionFactory.openSession()) {\n    UserMapper userMapper = session.getMapper(UserMapper.class);\n    // 第一次查询\n    User user1 = userMapper.selectUserById(1);\n    // 第二次查询，会从一级缓存中获取数据\n    User user2 = userMapper.selectUserById(1);\n}\n</code></pre>\n<h4>（2）二级缓存</h4>\n<ul>\n  <li><strong>作用范围</strong>：二级缓存是Mapper级别的缓存，也称为全局缓存。同一个Mapper的所有SqlSession共享该Mapper的二级缓存。只要Mapper相同，不同的SqlSession可以共享缓存数据。</li>\n  <li><strong>工作原理</strong>：当开启二级缓存后，MyBatis在执行查询时，会先从二级缓存中查找是否有该查询结果。如果没有，再从一级缓存中查找；如果一级缓存中也没有，则执行数据库查询，并将查询结果先存入一级缓存，再存入二级缓存。</li>\n  <li><strong>开启方式</strong>：在MyBatis的配置文件中设置<code>&#x3C;settings></code>标签的<code>cacheEnabled</code>属性为<code>true</code>（默认值为<code>true</code>），并在Mapper XML文件中添加<code>&#x3C;cache/></code>标签或在Mapper接口上使用<code>@CacheNamespace</code>注解。</li>\n  <li><strong>失效情况</strong>：当Mapper对应的SqlSession执行了增、删、改操作时，该Mapper的二级缓存会被清空，以保证数据的一致性。</li>\n  <li><strong>使用场景</strong>：适用于多个SqlSession需要共享相同查询结果的场景，如在不同的业务逻辑中频繁查询相同的数据。</li>\n  <li><strong>示例代码</strong></li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;!-- 在Mapper XML文件中开启二级缓存 -->\n&#x3C;mapper namespace=\"com.example.mapper.UserMapper\">\n    &#x3C;cache/>\n    &#x3C;select id=\"selectUserById\" resultType=\"com.example.entity.User\">\n        SELECT * FROM users WHERE id = #{id}\n    &#x3C;/select>\n&#x3C;/mapper>\n</code></pre>\n<h3>4. 一级缓存和二级缓存的比较</h3>\n<table>\n  <thead>\n    <tr>\n      <th>比较项</th>\n      <th>一级缓存</th>\n      <th>二级缓存</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>作用范围</td>\n      <td>SqlSession级别</td>\n      <td>Mapper级别</td>\n    </tr>\n    <tr>\n      <td>共享性</td>\n      <td>不共享，每个SqlSession独立</td>\n      <td>同一个Mapper的SqlSession共享</td>\n    </tr>\n    <tr>\n      <td>开启方式</td>\n      <td>默认开启</td>\n      <td>需要手动配置开启</td>\n    </tr>\n    <tr>\n      <td>缓存失效</td>\n      <td>同一SqlSession的增、删、改操作</td>\n      <td>同一Mapper的增、删、改操作</td>\n    </tr>\n  </tbody>\n</table>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆一级缓存和二级缓存的作用范围</h4>\n<ul>\n  <li>误区：认为一级缓存和二级缓存的作用范围相同，或者不清楚它们的区别。</li>\n  <li>纠正：明确一级缓存是SqlSession级别的，不同SqlSession的一级缓存相互隔离；二级缓存是Mapper级别的，同一Mapper的SqlSession共享二级缓存。</li>\n</ul>\n<h4>（2）未正确开启二级缓存</h4>\n<ul>\n  <li>误区：没有在配置文件和Mapper文件中正确配置，导致二级缓存未生效。</li>\n  <li>纠正：确保在MyBatis配置文件中设置<code>cacheEnabled</code>为<code>true</code>，并在Mapper文件中添加<code>&#x3C;cache/></code>标签或使用<code>@CacheNamespace</code>注解。</li>\n</ul>\n<h4>（3）忽略缓存一致性问题</h4>\n<ul>\n  <li>误区：只关注缓存带来的性能提升，而忽略了增、删、改操作可能导致的缓存数据不一致问题。</li>\n  <li>纠正：了解缓存失效机制，当执行增、删、改操作时，缓存会被清空，以保证数据的一致性。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>MyBatis提供了一级缓存和二级缓存来提高查询性能。一级缓存是SqlSession级别的缓存，每个SqlSession有自己独立的一级缓存。当在同一个SqlSession中执行相同查询时，会先从一级缓存中查找结果，若有则直接返回，避免重复查询数据库。但当该SqlSession执行增、删、改操作时，一级缓存会被清空。</p>\n<p>二级缓存是Mapper级别的缓存，同一个Mapper的所有SqlSession共享该Mapper的二级缓存。开启二级缓存后，查询时会先从二级缓存查找，再到一级缓存，最后才执行数据库查询。二级缓存需要手动配置开启，当Mapper对应的SqlSession执行增、删、改操作时，该Mapper的二级缓存会被清空。</p>\n<p>一级缓存适用于在同一个SqlSession中多次执行相同查询的场景，二级缓存适用于多个SqlSession需要共享相同查询结果的场景。使用缓存时要注意缓存一致性问题，避免出现数据不一致的情况。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>MyBatis的一级缓存和二级缓存的工作机制如何搭配？</strong></p>\n    <ul>\n      <li>提示：讨论如何利用这两种缓存来优化数据库性能，具体的缓存失效场景是什么。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>什么情况下一级缓存会失效？</strong></p>\n    <ul>\n      <li>提示：考虑具体的操作，如增、删、改等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>二级缓存的配置有哪些注意事项？</strong></p>\n    <ul>\n      <li>提示：涉及到如何在MyBatis中启用二级缓存，以及相关的XML配置。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你知道哪些二级缓存实现吗？</strong></p>\n    <ul>\n      <li>提示：讨论常用的缓存实现如Ehcache、Redis等，优缺点分别是哪些。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何管理和清理二级缓存？</strong></p>\n    <ul>\n      <li>提示：讨论缓存的生命周期，什么时候需要清理缓存。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>MyBatis中的Cache和SqlSession的关系是什么？</strong></p>\n    <ul>\n      <li>提示：考虑Cache的作用域和如何与SqlSession进行交互。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何监控MyBatis的缓存使用情况？</strong></p>\n    <ul>\n      <li>提示：可以提到日志、性能分析工具等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你有使用过MyBatis的CacheEvict注解吗？</strong></p>\n    <ul>\n      <li>提示：讨论缓存清理的场景及代码示例。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何解决缓存穿透问题？</strong></p>\n    <ul>\n      <li>提示：考虑使用布隆过滤器等技术。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在高并发环境下，如何确保缓存一致性？</strong></p>\n    <ul>\n      <li>提示：讨论分布式系统中潜在的问题和解决方案。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  MyBatis缓存机制\n    一级缓存\n      定义\n      特点\n        作用域\n        有效性\n        清空条件\n        使用场景\n    二级缓存\n      定义\n      特点\n        作用域\n        有效性\n        配置\n        清空条件\n        使用场景\n    总结\n    注意事项",
    "keynote": "- MyBatis 是一个 Java 持久层框架，简化数据库操作。\n- 一级缓存：SqlSession 范围内，生命周期与 SqlSession 相同；适用于频繁更新或同一事务中多次查询相同数据。\n- 二级缓存：全局共享，跨 SqlSession；适合高并发读取、数据更新不频繁的场景。\n- 一级缓存自动启用，执行 CRUD 后清空；二级缓存需手动配置。\n- 对于敏感数据不宜使用二级缓存，需合理配置和监控以避免问题。",
    "group_id": 37,
    "kps": [
      "缓存机制"
    ],
    "years": [
      2024
    ],
    "corps": [
      "趣链科技",
      "用友"
    ]
  }
}