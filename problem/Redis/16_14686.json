{
  "success": true,
  "data": {
    "id": 14686,
    "name": "<p>Redis 满了会怎么样</p>",
    "options": null,
    "answer": "<p>当Redis内存达到上限（maxmemory）后，会依据所配置的内存淘汰策略来处理新写入的数据，以下是不同淘汰策略下的具体表现：</p>\n<h3>不淘汰数据</h3>\n<ul>\n  <li><strong>noeviction</strong>：这是Redis的默认策略。当内存满了之后，若客户端尝试执行会导致内存增加的命令（如SET、LPUSH等），Redis会直接返回错误。而对于读操作（如GET）则不受影响。这种策略适用于不能容忍数据丢失的场景，例如缓存一些关键配置信息，一旦数据被淘汰可能会影响系统的正常运行。</li>\n</ul>\n<h3>淘汰过期键</h3>\n<ul>\n  <li><strong>volatile-lru</strong>：从已设置过期时间的键中，移除最近最少使用（LRU）的键。LRU算法会记录每个键的访问时间，当需要淘汰数据时，优先淘汰最久未被访问的键。这种策略适用于缓存中大部分数据都有过期时间，且希望优先淘汰那些不常使用的过期键的场景。</li>\n  <li><strong>volatile-lfu</strong>：从已设置过期时间的键中，移除最不经常使用（LFU）的键。LFU算法会统计每个键的访问频率，当内存不足时，优先淘汰访问频率最低的键。相比于LRU，LFU更关注键的使用频率，适用于那些访问频率差异较大的缓存场景。</li>\n  <li><strong>volatile-random</strong>：从已设置过期时间的键中，随机移除一个键。这种策略实现简单，但缺乏针对性，可能会淘汰掉一些仍有价值的数据。适用于对缓存数据的淘汰没有严格要求，只需要保证内存不溢出的场景。</li>\n  <li><strong>volatile-ttl</strong>：从已设置过期时间的键中，优先移除剩余存活时间（TTL）最短的键。这种策略适用于希望尽快释放那些即将过期的键所占用的内存的场景。</li>\n</ul>\n<h3>淘汰所有键</h3>\n<ul>\n  <li><strong>allkeys-lru</strong>：从所有键中，移除最近最少使用（LRU）的键。无论键是否设置了过期时间，都会参与淘汰。这种策略适用于缓存中数据没有明显的过期时间区分，且希望优先淘汰不常使用的数据的场景。</li>\n  <li><strong>allkeys-lfu</strong>：从所有键中，移除最不经常使用（LFU）的键。同样不考虑键是否设置了过期时间，根据访问频率进行淘汰。适用于对所有缓存数据的使用频率进行统一管理的场景。</li>\n  <li><strong>allkeys-random</strong>：从所有键中，随机移除一个键。这种策略简单粗暴，不考虑键的使用情况和过期时间，适用于对缓存数据的淘汰没有特定要求，只需要保证内存不溢出的场景。</li>\n</ul>\n<p>此外，如果Redis开启了持久化机制（RDB或AOF），在内存满的情况下，持久化操作可能会受到影响。例如，在进行RDB快照时，可能会因为内存不足而导致快照失败；在AOF重写时，也可能会因为内存紧张而影响重写的性能。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.002595904,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Redis满了会怎么样。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Redis内存使用和管理机制的理解。</li>\n      <li>Redis的内存淘汰策略。</li>\n      <li>Redis内存溢出的影响。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Redis内存限制</h4>\n<p>Redis可以通过<code>maxmemory</code>参数设置最大使用内存。当达到这个限制时，Redis需要采取相应措施来处理新的写入操作。</p>\n<h4>（2）内存淘汰策略</h4>\n<p>Redis提供了多种内存淘汰策略，用于在内存不足时决定删除哪些数据。</p>\n<h3>3. 解析</h3>\n<h4>（1）未设置内存淘汰策略</h4>\n<p>如果没有设置内存淘汰策略（即<code>maxmemory-policy</code>为<code>noeviction</code>），当Redis内存达到上限后，对于写操作（如<code>SET</code>、<code>LPUSH</code>等），Redis会返回错误，拒绝执行这些操作，但读操作仍然可以正常进行。这可能导致应用程序在写入数据时出现异常，影响业务的正常运行。</p>\n<h4>（2）设置了内存淘汰策略</h4>\n<p>当设置了合适的内存淘汰策略时，Redis会根据策略删除一些数据以腾出空间来处理新的写入操作。常见的内存淘汰策略有：</p>\n<ul>\n  <li><strong>volatile-lru</strong>：从设置了过期时间的键中，选择最近最少使用（LRU）的键进行删除。</li>\n  <li><strong>allkeys-lru</strong>：从所有键中，选择最近最少使用（LRU）的键进行删除。</li>\n  <li><strong>volatile-random</strong>：从设置了过期时间的键中，随机选择键进行删除。</li>\n  <li><strong>allkeys-random</strong>：从所有键中，随机选择键进行删除。</li>\n  <li><strong>volatile-ttl</strong>：从设置了过期时间的键中，选择剩余时间最短（TTL）的键进行删除。</li>\n</ul>\n<h4>（3）内存溢出的其他影响</h4>\n<p>除了影响写操作和触发内存淘汰策略外，Redis内存满了还可能导致性能下降。因为内存紧张时，Redis可能需要频繁进行内存交换，这会增加系统的I/O开销，降低Redis的响应速度。</p>\n<h3>4. 示例代码</h3>\n<p>以下是使用Redis客户端（如Python的<code>redis-py</code>库）设置内存限制和内存淘汰策略的示例：</p>\n<pre><code class=\"language-python\">import redis\n\n# 连接到Redis\nr = redis.Redis(host='localhost', port=6379, db=0)\n\n# 设置最大内存为100MB\nr.config_set('maxmemory', '100mb')\n\n# 设置内存淘汰策略为allkeys-lru\nr.config_set('maxmemory-policy', 'allkeys-lru')\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）认为Redis会自动处理内存满的情况</h4>\n<ul>\n  <li>误区：以为Redis会在内存满时自动调整，不需要人工干预。</li>\n  <li>纠正：Redis需要手动设置内存淘汰策略，否则在内存满时会拒绝写操作。</li>\n</ul>\n<h4>（2）忽略内存淘汰策略的选择</h4>\n<ul>\n  <li>误区：随意选择内存淘汰策略，不考虑业务需求。</li>\n  <li>纠正：应根据业务特点选择合适的内存淘汰策略，如对于缓存场景，<code>allkeys-lru</code>可能是一个不错的选择。</li>\n</ul>\n<h4>（3）只关注写操作的影响</h4>\n<ul>\n  <li>误区：只考虑内存满对写操作的影响，忽略了对性能的影响。</li>\n  <li>纠正：内存满可能导致性能下降，需要综合考虑。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“当Redis内存达到上限时，如果未设置内存淘汰策略（<code>maxmemory-policy</code>为<code>noeviction</code>），Redis会拒绝执行写操作，返回错误，但读操作仍可正常进行，这可能导致应用程序写入数据时出现异常。</p>\n<p>若设置了内存淘汰策略，Redis会根据策略删除一些数据以腾出空间处理新的写入操作。常见的策略有<code>volatile-lru</code>、<code>allkeys-lru</code>等，不同策略适用于不同的业务场景。</p>\n<p>此外，Redis内存满了还可能导致性能下降，因为内存紧张时可能需要频繁进行内存交换，增加系统的I/O开销。因此，需要根据业务需求合理设置内存淘汰策略，并监控Redis的内存使用情况。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      Redis有哪些内存淘汰策略，分别适用于什么场景？\n      提示：思考不同业务场景下对数据的要求，如是否允许过期、对数据完整性的要求等。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何动态修改Redis的内存淘汰策略？\n      提示：可以从Redis的配置文件和命令行操作两方面去考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      当Redis使用LRU淘汰策略时，是如何近似实现LRU算法的？\n      提示：了解Redis为了节省内存，在实现LRU算法上做的优化。\n    </p>\n  </li>\n  <li>\n    <p>\n      如果Redis开启了持久化，内存满了触发淘汰策略时，对持久化有什么影响？\n      提示：考虑不同持久化方式（RDB、AOF）在数据写入和同步时的特点。\n    </p>\n  </li>\n  <li>\n    <p>\n      怎样监控Redis的内存使用情况和淘汰情况？\n      提示：可以从Redis自带的命令和监控工具两方面思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      假设业务场景对数据实时性要求高，Redis内存满了该如何处理？\n      提示：结合实时性要求高的特点，考虑数据的存储和处理方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      Redis内存满了后，频繁触发淘汰策略会对性能产生什么影响？\n      提示：从CPU、内存、网络等资源使用情况去分析。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Redis内存达到上限后的处理))\n    不淘汰数据\n      noeviction\n      适用场景：不能容忍数据丢失\n    淘汰过期键\n      volatile-lru\n      volatile-lfu\n      volatile-random\n      volatile-ttl\n    淘汰所有键\n      allkeys-lru\n      allkeys-lfu\n      allkeys-random\n    持久化机制影响\n      RDB快照可能失败\n      AOF重写性能受影响",
    "keynote": "Redis内存达上限依策略处理新数据\n不淘汰数据：noeviction，读操作不受影响，适用于不能容忍数据丢失场景\n淘汰过期键：volatile-lru（移除最近最少使用）、volatile-lfu（移除最不经常使用）、volatile-random（随机移除）、volatile-ttl（移除剩余存活时间最短）\n淘汰所有键：allkeys-lru、allkeys-lfu、allkeys-random\n持久化机制影响：RDB快照可能失败，AOF重写性能受影响",
    "group_id": 16,
    "kps": [
      "常见问题与解决方案"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "字节跳动",
      "懂球帝",
      "美团",
      "阿里巴巴",
      "猿辅导",
      "某小厂"
    ]
  }
}