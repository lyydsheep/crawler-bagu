{
  "success": true,
  "data": {
    "id": 57974,
    "name": "<p>Redis主从同步的流程是什么，什么时候会进行全量复制</p>",
    "options": null,
    "answer": "<h3>Redis主从同步流程</h3>\n<p>Redis主从同步主要分为建立连接、数据同步和命令传播三个阶段，以下是详细介绍：</p>\n<h4>1. 建立连接</h4>\n<ul>\n  <li><strong>从节点向主节点发送 <code>REPLCONF listening-port</code> 命令</strong>：从节点启动后，会向主节点发送该命令，告知主节点自己用于复制的端口号。</li>\n  <li><strong>从节点向主节点发送 <code>PSYNC</code> 命令</strong>：<code>PSYNC</code> 命令有两种模式，分别是完整重同步（全量复制）和部分重同步（增量复制）。从节点通过该命令向主节点请求同步数据，并携带自己的复制偏移量和运行 ID。</li>\n</ul>\n<h4>2. 数据同步</h4>\n<ul>\n  <li><strong>主节点响应 <code>PSYNC</code> 命令</strong>：主节点接收到 <code>PSYNC</code> 命令后，根据从节点提供的信息判断是进行全量复制还是增量复制。\n    <ul>\n      <li><strong>全量复制</strong>：如果从节点是第一次连接主节点，或者主节点无法进行部分重同步（如从节点请求的偏移量数据已不在主节点的复制积压缓冲区中），主节点会返回 <code>FULLRESYNC</code> 响应，随后开始全量复制流程。</li>\n      <li><strong>增量复制</strong>：如果主节点判断可以进行部分重同步，会返回 <code>CONTINUE</code> 响应，主节点将从复制积压缓冲区中获取从节点缺失的数据发送给从节点。</li>\n    </ul>\n  </li>\n</ul>\n<h4>3. 命令传播</h4>\n<ul>\n  <li><strong>主节点持续发送写命令</strong>：在数据同步完成后，主节点会将后续执行的写命令持续发送给从节点，从节点接收并执行这些命令，以保证主从节点的数据一致性。</li>\n</ul>\n<h3>全量复制的触发时机</h3>\n<ul>\n  <li><strong>从节点初次连接主节点</strong>：当一个新的从节点第一次连接到主节点时，由于从节点没有任何主节点的数据，主节点会进行全量复制，将自己的所有数据发送给从节点。</li>\n  <li><strong>主从节点的复制偏移量差距过大</strong>：主节点会维护一个复制积压缓冲区，用于保存最近执行的写命令。如果从节点请求的复制偏移量已经不在主节点的复制积压缓冲区中，主节点无法提供从该偏移量开始的增量数据，此时会触发全量复制。</li>\n  <li><strong>主节点的运行 ID 发生变化</strong>：每个 Redis 实例都有一个唯一的运行 ID。当主节点发生故障重启后，其运行 ID 会发生变化。从节点在进行复制时会比较主节点的运行 ID，如果发现运行 ID 不同，会认为主节点已经发生了重置，从而触发全量复制。</li>\n</ul>",
    "type": 6,
    "level": 2,
    "freq": 0.001153735,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Redis主从同步的流程是什么，什么时候会进行全量复制。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Redis主从同步整体流程的掌握。</li>\n      <li>全量复制触发条件的理解。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Redis主从同步的目的</h4>\n<ul>\n  <li>提高Redis的可用性和读写性能。通过主从同步，多个从节点可以复制主节点的数据，实现数据的冗余备份，同时可以将读请求分发到从节点，减轻主节点的压力。</li>\n</ul>\n<h4>（2）Redis主从同步的两种方式</h4>\n<ul>\n  <li>全量复制：将主节点的所有数据发送给从节点。</li>\n  <li>增量复制：只将主节点自上次同步后产生的写命令发送给从节点。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）Redis主从同步的流程</h4>\n<ul>\n  <li><strong>建立连接</strong>：从节点向主节点发送SYNC或PSYNC命令，请求同步数据。SYNC是Redis 2.8之前的同步命令，PSYNC是2.8及以后的改进版，支持增量复制。</li>\n  <li><strong>主节点响应</strong>：主节点收到从节点的同步请求后，根据情况进行响应。如果是PSYNC命令，主节点会检查从节点发送的复制偏移量和运行ID，判断是否可以进行增量复制。</li>\n  <li><strong>数据同步</strong>：\n    <ul>\n      <li><strong>全量复制</strong>：主节点开始执行BGSAVE命令，生成RDB文件，同时将新的写命令缓存到内存中。RDB文件生成完成后，主节点将其发送给从节点。从节点接收并加载RDB文件，将数据恢复到内存中。主节点再将缓存的写命令发送给从节点，从节点执行这些命令，完成数据同步。</li>\n      <li><strong>增量复制</strong>：如果主节点判断可以进行增量复制，会将自上次同步后产生的写命令发送给从节点，从节点执行这些命令，更新数据。</li>\n    </ul>\n  </li>\n  <li><strong>持续同步</strong>：主从节点建立长连接，主节点将新的写命令实时发送给从节点，从节点执行这些命令，保持数据的一致性。</li>\n</ul>\n<h4>（2）全量复制的触发条件</h4>\n<ul>\n  <li><strong>初次同步</strong>：当从节点第一次连接到主节点时，由于没有历史复制信息，主节点会进行全量复制，将所有数据发送给从节点。</li>\n  <li><strong>主节点运行ID变化</strong>：每个Redis节点都有一个唯一的运行ID。如果主节点重启，其运行ID会发生变化。从节点再次连接主节点时，发现运行ID不一致，会触发全量复制。</li>\n  <li><strong>复制偏移量差距过大</strong>：如果从节点与主节点的复制偏移量差距过大，主节点无法提供足够的增量数据，也会进行全量复制。</li>\n</ul>\n<h3>4. 示例代码（伪代码）</h3>\n<pre><code class=\"language-python\"># 从节点连接主节点\nslave.connect(master)\n# 从节点发送同步请求\nslave.send_command(\"PSYNC &#x3C;run_id> &#x3C;offset>\")\n# 主节点响应\nif master.can_incremental_replication():\n    # 增量复制\n    master.send_incremental_commands(slave)\nelse:\n    # 全量复制\n    master.bgsave()\n    master.send_rdb_file(slave)\n    master.send_cached_commands(slave)\n# 持续同步\nwhile True:\n    if master.has_new_commands():\n        master.send_new_commands(slave)\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆全量复制和增量复制的条件</h4>\n<ul>\n  <li>误区：认为只要主从节点有数据不一致就会进行全量复制。</li>\n  <li>纠正：只有在初次同步、主节点运行ID变化或复制偏移量差距过大等特定情况下才会进行全量复制，其他情况可能进行增量复制。</li>\n</ul>\n<h4>（2）忽略持续同步阶段</h4>\n<ul>\n  <li>误区：只关注数据同步阶段，忽略了主从节点建立长连接后的持续同步。</li>\n  <li>纠正：持续同步是保持主从节点数据一致性的重要环节，主节点会实时将新的写命令发送给从节点。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Redis主从同步的流程如下：首先从节点向主节点发送SYNC或PSYNC命令请求同步数据，主节点收到请求后根据情况响应。若采用全量复制，主节点执行BGSAVE生成RDB文件，同时缓存新的写命令，生成完成后将RDB文件发送给从节点，从节点加载RDB文件，主节点再发送缓存的写命令；若采用增量复制，主节点将自上次同步后产生的写命令发送给从节点。之后主从节点建立长连接，主节点实时将新的写命令发送给从节点，保持数据一致。</p>\n<p>全量复制会在以下情况触发：一是从节点初次连接主节点时；二是主节点重启导致运行ID变化，从节点再次连接时；三是从节点与主节点的复制偏移量差距过大，主节点无法提供足够的增量数据时。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      全量复制过程中，主节点生成 RDB 文件时会对性能有什么影响，如何优化？\n      提示：思考 RDB 文件生成时的磁盘 I/O、内存使用等方面对主节点性能的影响，以及从配置参数、硬件等角度考虑优化方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      增量复制时，如果主从节点网络出现抖动，可能会有什么问题，怎么解决？\n      提示：分析网络抖动对命令传播、偏移量同步等方面的影响，从 Redis 机制和网络层面思考解决办法。\n    </p>\n  </li>\n  <li>\n    <p>\n      主从同步过程中，主节点的缓冲区有什么作用，缓冲区满了会怎样？\n      提示：了解主节点缓冲区在同步过程中的功能，思考缓冲区满后对同步流程和 Redis 运行的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      当主从节点版本不一致时，主从同步会有什么潜在问题？\n      提示：考虑不同版本 Redis 在协议、数据结构、功能特性等方面的差异对同步的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何监控 Redis 主从同步的状态和性能指标？\n      提示：从 Redis 提供的命令、监控工具等方面思考可以获取哪些与同步相关的指标。\n    </p>\n  </li>\n  <li>\n    <p>\n      主从同步过程中，从节点在接收 RDB 文件时是否可以处理客户端请求？\n      提示：分析从节点在接收 RDB 文件时的状态和工作模式，判断其对客户端请求的处理能力。\n    </p>\n  </li>\n  <li>\n    <p>\n      若主节点在全量复制期间发生故障，会对复制过程产生什么影响，如何恢复？\n      提示：考虑故障发生时复制所处的阶段，以及如何重新建立同步关系。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Redis主从同步流程))\n    建立连接\n      从节点发送REPLCONF listening - port命令\n      从节点发送PSYNC命令\n    数据同步\n      主节点响应PSYNC命令\n        全量复制\n        增量复制\n    命令传播\n      主节点持续发送写命令\n    全量复制的触发时机\n      从节点初次连接主节点\n      主从节点复制偏移量差距过大\n      主节点运行ID发生变化",
    "keynote": "Redis主从同步流程：建立连接、数据同步、命令传播\n建立连接：从节点发REPLCONF listening - port告知复制端口；发PSYNC请求同步，带复制偏移量和运行ID\n数据同步：主节点根据PSYNC响应，分全量和增量复制\n命令传播：主节点同步后持续发写命令保证数据一致\n全量复制触发时机：从节点初次连接；主从偏移量差距大；主节点运行ID变化",
    "group_id": 16,
    "kps": [
      "基础知识",
      "常见问题与解决方案"
    ],
    "years": [
      2024,
      2022
    ],
    "corps": [
      "科大讯飞",
      "快手",
      "百度",
      "字节跳动"
    ]
  }
}