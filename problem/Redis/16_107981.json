{
  "success": true,
  "data": {
    "id": 107981,
    "name": "<p>请描述哨兵模式下Redis崩溃恢复的流程</p>",
    "options": null,
    "answer": "<p>在Redis的哨兵模式中，当主节点崩溃后，系统会自动进行故障转移和恢复，以下是详细的流程：</p>\n<h3>1. 主观下线（Subjectively Down，SDOWN）</h3>\n<ul>\n  <li>每个哨兵节点会定期（默认每秒一次）向所有它监控的Redis节点（包括主节点、从节点）发送PING命令。</li>\n  <li>如果某个节点在指定的时间（<code>down-after-milliseconds</code>配置项指定的时间，默认30000毫秒即30秒）内没有响应，或者返回错误的响应，那么哨兵节点会将该节点标记为主观下线。主观下线只是单个哨兵节点的判断，可能存在误判。</li>\n</ul>\n<h3>2. 客观下线（Objectively Down，ODOWN）</h3>\n<ul>\n  <li>当一个哨兵节点将主节点标记为主观下线后，它会向其他哨兵节点发送消息，询问它们对该主节点的状态判断。</li>\n  <li>当足够数量（由<code>sentinel monitor</code>配置中的<code>quorum</code>参数指定）的哨兵节点都认为该主节点已经下线时，主节点就会被标记为客观下线。例如，<code>sentinel monitor mymaster 127.0.0.1 6379 2</code>，这里的<code>2</code>表示至少需要2个哨兵节点认为主节点下线，主节点才会被标记为客观下线。</li>\n</ul>\n<h3>3. 选举领导者哨兵节点</h3>\n<ul>\n  <li>当主节点被标记为客观下线后，哨兵节点们需要选举出一个领导者哨兵节点，由它来负责后续的故障转移操作。</li>\n  <li>选举过程基于Raft算法，每个哨兵节点都会向其他哨兵节点发送请求，请求成为领导者。</li>\n  <li>哨兵节点根据收到的请求和自身的状态进行投票，最终获得多数选票的哨兵节点成为领导者。</li>\n</ul>\n<h3>4. 选择新的主节点</h3>\n<ul>\n  <li>领导者哨兵节点会从原主节点的从节点中选择一个作为新的主节点。选择的规则如下：\n    <ul>\n      <li>过滤掉处于主观下线、断线、与原主节点失联超过指定时长（<code>down-after-milliseconds</code> * 10）的从节点。</li>\n      <li>优先选择优先级（<code>slave-priority</code>）最高的从节点，如果优先级相同，则选择复制偏移量最大（即数据最新）的从节点。</li>\n      <li>如果以上条件都相同，则选择运行ID最小的从节点。</li>\n    </ul>\n  </li>\n</ul>\n<h3>5. 故障转移</h3>\n<ul>\n  <li>领导者哨兵节点向被选中的从节点发送<code>SLAVEOF NO ONE</code>命令，将其升级为新的主节点。</li>\n  <li>新的主节点开始独立处理客户端的读写请求。</li>\n</ul>\n<h3>6. 配置更新</h3>\n<ul>\n  <li>领导者哨兵节点会向其他从节点发送<code>SLAVEOF</code>命令，让它们成为新主节点的从节点，开始从新主节点复制数据。</li>\n  <li>哨兵节点会更新自身的配置信息，将新的主节点信息保存下来，以便后续监控和管理。</li>\n</ul>\n<h3>7. 通知客户端</h3>\n<ul>\n  <li>哨兵节点可以通过发布订阅机制向客户端发送消息，通知客户端主节点已经发生变更，客户端可以根据这些消息更新自己的连接信息，连接到新的主节点。</li>\n</ul>\n<p>通过以上步骤，Redis哨兵模式可以在主节点崩溃后自动完成故障转移和恢复，保证系统的高可用性。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0002884338,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：描述哨兵模式下Redis崩溃恢复的流程。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Redis哨兵模式的理解。</li>\n      <li>哨兵的监控机制。</li>\n      <li>故障发现与判断逻辑。</li>\n      <li>故障转移的具体步骤。</li>\n      <li>新主从关系的建立过程。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Redis哨兵模式</h4>\n<p>Redis哨兵模式是一种高可用解决方案，多个哨兵进程会监控Redis主从集群。其主要功能包括监控、通知、自动故障转移和配置提供者。</p>\n<h4>（2）Redis主从复制</h4>\n<p>主从复制是Redis实现数据冗余和读写分离的机制，从节点会复制主节点的数据，保持数据一致。</p>\n<h3>3. 解析</h3>\n<h4>（1）故障发现</h4>\n<ul>\n  <li>哨兵会定期向Redis节点（主节点和从节点）发送PING命令，以检查节点的状态。</li>\n  <li>如果某个节点在指定时间内没有响应，哨兵会将该节点标记为“主观下线”（SDOWN）。</li>\n  <li>当多个哨兵都将同一个节点标记为SDOWN后，经过一定的协商，会将该节点标记为“客观下线”（ODOWN），确认节点真正出现故障。</li>\n</ul>\n<h4>（2）领导者选举</h4>\n<ul>\n  <li>当主节点被标记为ODOWN后，哨兵之间会进行领导者选举。</li>\n  <li>选举的目的是选出一个哨兵来负责后续的故障转移操作。</li>\n  <li>选举过程基于Raft算法，每个哨兵都有投票权，最终获得多数选票的哨兵成为领导者。</li>\n</ul>\n<h4>（3）故障转移</h4>\n<ul>\n  <li>领导者哨兵会从从节点中选出一个作为新的主节点。选择的依据通常包括从节点的优先级、复制偏移量等。</li>\n  <li>领导者哨兵会向选中的从节点发送<code>SLAVEOF NO ONE</code>命令，使其成为新的主节点。</li>\n</ul>\n<h4>（4）从节点重新配置</h4>\n<ul>\n  <li>领导者哨兵会向其他从节点发送<code>SLAVEOF</code>命令，让它们成为新主节点的从节点，重新建立主从关系。</li>\n</ul>\n<h4>（5）客户端通知</h4>\n<ul>\n  <li>哨兵会更新配置信息，并通知客户端新的主节点地址，以便客户端能够连接到新的主节点进行读写操作。</li>\n</ul>\n<h4>（6）旧主节点恢复</h4>\n<ul>\n  <li>当旧主节点恢复正常后，哨兵会将其作为从节点，向新主节点发起复制请求，使其数据与新主节点保持一致。</li>\n</ul>\n<h3>4. 示例代码（伪代码）</h3>\n<pre><code class=\"language-python\"># 模拟哨兵监控\nwhile True:\n    for node in redis_nodes:\n        if ping(node) == False:\n            mark_sdown(node)\n            if enough_sentinels_mark_sdown(node):\n                mark_odown(node)\n                leader = elect_leader()\n                new_master = select_new_master()\n                make_new_master(new_master)\n                reconfigure_slaves(new_master)\n                notify_clients(new_master)\n    sleep(monitor_interval)\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）忽视哨兵协商</h4>\n<ul>\n  <li>误区：认为单个哨兵判断节点下线就可以进行故障转移。</li>\n  <li>纠正：需要多个哨兵协商，将节点标记为ODOWN后才能进行故障转移。</li>\n</ul>\n<h4>（2）不清楚领导者选举</h4>\n<ul>\n  <li>误区：不了解故障转移由一个哨兵领导者负责，以为多个哨兵同时进行操作。</li>\n  <li>纠正：通过Raft算法选举出一个领导者哨兵来执行故障转移。</li>\n</ul>\n<h4>（3）忽略旧主节点恢复</h4>\n<ul>\n  <li>误区：只关注故障转移过程，忽略旧主节点恢复后的处理。</li>\n  <li>纠正：旧主节点恢复后会作为从节点，向新主节点进行数据复制。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>\n  在Redis哨兵模式下，崩溃恢复流程如下：\n  首先，哨兵会定期监控Redis节点，若某个节点在规定时间内未响应PING命令，会被标记为“主观下线”。当多个哨兵都将该节点标记为“主观下线”后，经过协商会将其标记为“客观下线”。\n  接着，哨兵之间会进行领导者选举，选出一个哨兵负责后续的故障转移操作。领导者哨兵会从从节点中选出一个作为新的主节点，向其发送<code>SLAVEOF NO ONE</code>命令。\n  然后，领导者哨兵会让其他从节点成为新主节点的从节点，重新建立主从关系。同时，哨兵会更新配置信息并通知客户端新的主节点地址。\n  最后，当旧主节点恢复正常后，会作为从节点向新主节点发起复制请求，使数据保持一致。\n</p>\n<p>需要注意的是，故障判断需要多个哨兵协商，故障转移由一个领导者哨兵负责，且不能忽略旧主节点恢复后的处理。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      哨兵在选举新主节点时，投票机制是怎样的？\n      提示：思考哨兵之间如何通信、投票规则以及达到什么条件才能选出新主节点。\n    </p>\n  </li>\n  <li>\n    <p>\n      新主节点选举出来后，从节点是如何同步数据的？\n      提示：关注Redis的数据同步方式，如全量同步和增量同步的过程。\n    </p>\n  </li>\n  <li>\n    <p>\n      哨兵模式下，如何避免脑裂问题的发生？\n      提示：考虑网络分区、选举机制等因素对脑裂的影响及相应的解决办法。\n    </p>\n  </li>\n  <li>\n    <p>\n      哨兵监控Redis节点的频率是可以配置的，这个频率设置会对崩溃恢复流程产生什么影响？\n      提示：从监控频率高或低分别对故障发现时间、资源消耗等方面进行分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      当多个哨兵同时发现主节点崩溃时，会出现什么情况，如何处理？\n      提示：思考多个哨兵同时发起选举的冲突问题及协调机制。\n    </p>\n  </li>\n  <li>\n    <p>\n      哨兵模式下，主节点恢复后会怎样处理？\n      提示：关注主节点恢复后的角色变化、数据同步等情况。\n    </p>\n  </li>\n  <li>\n    <p>\n      哨兵本身出现故障会对Redis崩溃恢复流程造成什么影响？\n      提示：分析单个哨兵故障和多个哨兵故障的不同影响及应对策略。\n    </p>\n  </li>\n  <li>\n    <p>\n      在哨兵模式中，配置文件的哪些参数会影响崩溃恢复流程？\n      提示：从选举、监控、同步等方面的配置参数去考虑。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Redis哨兵模式主节点崩溃后故障转移和恢复流程))\n    主观下线（SDOWN）\n      定期发PING命令\n      指定时间无响应或错误响应标记\n    客观下线（ODOWN）\n      询问其他哨兵节点\n      足够数量认为下线则标记\n    选举领导者哨兵节点\n      基于Raft算法\n      投票选领导者\n    选择新的主节点\n      过滤不合格从节点\n      按优先级、复制偏移量、运行ID选\n    故障转移\n      升级从节点为新主节点\n      新主节点处理请求\n    配置更新\n      让其他从节点复制新主节点\n      更新哨兵配置信息\n    通知客户端\n      发布订阅通知变更\n      客户端更新连接信息",
    "keynote": "主观下线：哨兵定期发PING，指定时间无响应或错误响应标记\n客观下线：询问其他哨兵，足够数量认为下线则标记\n选举领导者：基于Raft算法投票选\n选新主节点：过滤不合格，按优先级、复制偏移量、运行ID选\n故障转移：升级从节点为新主，新主处理请求\n配置更新：让其他从节点复制新主，更新哨兵配置\n通知客户端：发布订阅通知，客户端更新连接",
    "group_id": 16,
    "kps": [
      "集群与部署",
      "常见问题与解决方案"
    ],
    "years": [
      2024
    ],
    "corps": [
      "腾讯"
    ]
  }
}