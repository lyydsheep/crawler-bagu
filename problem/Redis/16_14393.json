{
  "success": true,
  "data": {
    "id": 14393,
    "name": "<p>Redis对于设置了TTL过期时间的key是如何处理的</p>",
    "options": null,
    "answer": "<p>Redis对于设置了TTL（Time To Live，即过期时间）的key，主要通过两种策略来处理过期情况，分别是惰性删除和定期删除，下面详细介绍这两种策略：</p>\n<h3>惰性删除</h3>\n<ul>\n  <li><strong>原理</strong>：惰性删除不会主动去检查key是否过期，而是在客户端尝试访问某个key时，Redis会先检查该key的过期时间，如果发现key已经过期，就会立即删除这个key，并返回客户端一个空结果。</li>\n  <li><strong>优点</strong>：这种策略对CPU友好，因为它只在有访问请求时才进行过期检查，不会在其他时间消耗额外的CPU资源去主动删除过期key。</li>\n  <li><strong>缺点</strong>：如果一个过期的key一直没有被访问，那么它会一直占用内存，可能导致内存浪费。</li>\n</ul>\n<h3>定期删除</h3>\n<ul>\n  <li><strong>原理</strong>：Redis会周期性地随机检查一部分设置了过期时间的key，并删除其中已经过期的key。具体来说，Redis内部有一个定时任务，默认每秒执行10次（可以通过配置hz参数调整执行频率）。每次执行时，它会从过期字典中随机选择一部分key进行检查，如果发现key已经过期，就将其删除。</li>\n  <li><strong>优点</strong>：定期删除可以在一定程度上弥补惰性删除的不足，能够及时清理掉一些长时间未被访问的过期key，减少内存占用。</li>\n  <li><strong>缺点</strong>：如果过期key数量过多，定期删除可能会消耗较多的CPU资源，影响Redis的性能。而且由于是随机检查，可能会有部分过期key没有被及时检查到，仍然会占用内存。</li>\n</ul>\n<h3>内存淘汰机制</h3>\n<p>当Redis的内存使用达到一定阈值（由maxmemory参数配置）时，即使有部分过期key还未被删除，Redis也会触发内存淘汰机制，根据不同的淘汰策略来删除一些key以释放内存。常见的淘汰策略有：</p>\n<ul>\n  <li><strong>volatile-lru</strong>：从设置了过期时间的key中，移除最近最少使用的key。</li>\n  <li><strong>volatile-ttl</strong>：从设置了过期时间的key中，移除剩余时间最短的key。</li>\n  <li><strong>volatile-random</strong>：从设置了过期时间的key中，随机移除一个key。</li>\n  <li><strong>allkeys-lru</strong>：从所有key中，移除最近最少使用的key。</li>\n  <li><strong>allkeys-random</strong>：从所有key中，随机移除一个key。</li>\n  <li><strong>noeviction</strong>：当内存不足时，不删除任何key，直接返回错误。</li>\n</ul>",
    "type": 6,
    "level": 2,
    "freq": 0.009229882,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Redis对于设置了TTL（Time-To-Live）过期时间的key是如何处理的。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>Redis的过期键删除策略。</li>\n      <li>Redis的过期键淘汰策略。</li>\n      <li>Redis的内存管理机制。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）TTL的概念</h4>\n<p>TTL是Redis中为键设置的一个生存时间，单位为秒或毫秒。当键的TTL到期后，该键将被视为过期键。</p>\n<h4>（2）Redis的内存管理</h4>\n<p>Redis是基于内存的数据库，为了避免内存无限增长，需要对过期键进行处理，释放内存。</p>\n<h3>3. 解析</h3>\n<h4>（1）过期键删除策略</h4>\n<ul>\n  <li><strong>定时删除</strong>：在设置键的过期时间时，创建一个定时器，当过期时间到达时，立即删除该键。这种策略对内存友好，但会占用大量CPU资源，因为需要维护大量定时器。Redis没有采用这种策略。</li>\n  <li><strong>惰性删除</strong>：Redis在访问一个键时，先检查该键是否过期，如果过期则删除该键并返回空。这种策略对CPU友好，但可能会导致内存浪费，因为过期键可能长时间占用内存。</li>\n  <li><strong>定期删除</strong>：Redis每隔一段时间（默认是100ms），随机检查一部分键，删除其中过期的键。这种策略是定时删除和惰性删除的折中，通过调整检查的频率和数量，可以在CPU和内存之间取得平衡。</li>\n</ul>\n<h4>（2）过期键淘汰策略</h4>\n<p>当Redis的内存使用达到一定阈值时，会触发过期键淘汰策略。Redis提供了多种淘汰策略：</p>\n<ul>\n  <li><strong>volatile-lru</strong>：从设置了过期时间的键中，删除最近最少使用（LRU）的键。</li>\n  <li><strong>volatile-lfu</strong>：从设置了过期时间的键中，删除最不经常使用（LFU）的键。</li>\n  <li><strong>volatile-random</strong>：从设置了过期时间的键中，随机删除一个键。</li>\n  <li><strong>volatile-ttl</strong>：从设置了过期时间的键中，删除剩余TTL最短的键。</li>\n  <li><strong>allkeys-lru</strong>：从所有键中，删除最近最少使用（LRU）的键。</li>\n  <li><strong>allkeys-lfu</strong>：从所有键中，删除最不经常使用（LFU）的键。</li>\n  <li><strong>allkeys-random</strong>：从所有键中，随机删除一个键。</li>\n  <li><strong>noeviction</strong>：不淘汰任何键，当内存不足时，新写入操作会报错。</li>\n</ul>\n<h4>（3）Redis的处理流程</h4>\n<ul>\n  <li>当设置了TTL的键被访问时，Redis会先进行惰性删除检查，如果键已过期则删除该键。</li>\n  <li>Redis会定期执行定期删除操作，随机检查一部分键，删除其中过期的键。</li>\n  <li>当Redis的内存使用达到阈值时，会根据配置的淘汰策略删除相应的键。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-python\">import redis\n\n# 连接到Redis\nr = redis.Redis(host='localhost', port=6379, db=0)\n\n# 设置一个键并设置过期时间\nr.set('mykey', 'myvalue')\nr.expire('mykey', 10)  # 设置过期时间为10秒\n\n# 模拟访问键\nvalue = r.get('mykey')\nprint(value)\n\n# 等待一段时间后再次访问\nimport time\ntime.sleep(11)\nvalue = r.get('mykey')\nprint(value)  # 此时键已过期，返回None\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）认为过期键会立即删除</h4>\n<ul>\n  <li>误区：认为设置了TTL的键在过期后会立即被删除。</li>\n  <li>纠正：Redis采用惰性删除和定期删除策略，过期键可能不会立即被删除。</li>\n</ul>\n<h4>（2）忽视淘汰策略的作用</h4>\n<ul>\n  <li>误区：只关注过期键的删除，忽略了Redis在内存不足时的淘汰策略。</li>\n  <li>纠正：了解Redis的多种淘汰策略，并根据实际情况选择合适的策略。</li>\n</ul>\n<h4>（3）混淆删除策略和淘汰策略</h4>\n<ul>\n  <li>误区：将过期键删除策略和淘汰策略混淆。</li>\n  <li>纠正：明确删除策略是针对过期键的处理，而淘汰策略是在内存不足时的处理。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“Redis对于设置了TTL过期时间的key采用了惰性删除和定期删除相结合的策略。惰性删除是指在访问一个键时，先检查该键是否过期，如果过期则删除该键并返回空。定期删除是指Redis每隔一段时间（默认是100ms），随机检查一部分键，删除其中过期的键。</p>\n<p>当Redis的内存使用达到一定阈值时，会触发过期键淘汰策略。Redis提供了多种淘汰策略，如volatile-lru、volatile-lfu、volatile-random等，可根据实际情况选择合适的策略。</p>\n<p>综上所述，Redis通过过期键删除策略和淘汰策略，有效地管理了设置了TTL的键，在保证性能的同时，避免了内存的无限增长。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      Redis过期键删除策略中，定期删除的执行频率是如何确定的，有什么影响因素？\n      提示：考虑Redis的配置参数、服务器性能和内存使用情况等方面。\n    </p>\n  </li>\n  <li>\n    <p>\n      当Redis内存达到最大限制时，对于设置了TTL的key和未设置TTL的key，淘汰机制有什么不同？\n      提示：思考Redis的不同内存淘汰策略以及对不同类型key的处理方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      在Redis集群环境下，过期key的处理机制和单机环境有什么差异？\n      提示：关注集群中数据分布、节点通信和同步等方面。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何监控Redis中过期key的处理情况，有哪些指标可以参考？\n      提示：从Redis提供的命令和监控工具入手，考虑过期key的数量、删除频率等指标。\n    </p>\n  </li>\n  <li>\n    <p>\n      如果Redis中大量key同时过期，会对系统造成什么影响，如何避免这种情况？\n      提示：分析大量key同时过期可能导致的性能问题，思考预防的方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      Redis的惰性删除机制在多线程环境下是如何工作的，是否存在并发问题？\n      提示：考虑多线程对过期key检查和删除操作的影响，以及Redis的并发控制机制。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于持久化的Redis实例，过期key在RDB和AOF文件中是如何处理的？\n      提示：分别研究RDB快照和AOF日志对过期key的记录和恢复方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      当Redis进行主从复制时，过期key的处理是如何同步的？\n      提示：关注主从节点之间的数据同步过程和过期key的处理逻辑。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Redis过期key处理策略))\n    惰性删除\n      原理\n      优点\n      缺点\n    定期删除\n      原理\n      优点\n      缺点\n    内存淘汰机制\n      触发条件\n      常见淘汰策略\n        volatile-lru\n        volatile-ttl\n        volatile-random\n        allkeys-lru\n        allkeys-random\n        noeviction",
    "keynote": "Redis过期key处理：TTL下有惰性、定期删除及内存淘汰机制\n惰性删除：访问时检查，CPU友好，可能浪费内存\n定期删除：周期随机查，补惰性不足，过期多耗CPU\n内存淘汰：达阈值触发，策略有volatile-lru等6种",
    "group_id": 16,
    "kps": [
      "基础知识",
      "常见问题与解决方案"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "快手",
      "美团",
      "友塔",
      "MetaApp",
      "Shopee虾皮",
      "字节跳动",
      "拼多多",
      "数字马力",
      "米哈游",
      "腾讯",
      "阿里巴巴",
      "阿里菜鸟",
      "百度",
      "小米",
      "携程",
      "vivo",
      "用友",
      "金山",
      "滴滴",
      "杭州品铂"
    ]
  }
}