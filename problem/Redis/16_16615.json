{
  "success": true,
  "data": {
    "id": 16615,
    "name": "<p>Redis缓存穿透、缓存雪崩、缓存击穿分别是什么，有哪些应对策略</p>",
    "options": null,
    "answer": "<h3>缓存穿透</h3>\n<ul>\n  <li><strong>定义</strong>：指客户端请求的数据在缓存和数据库中都不存在，这样每次请求都会穿透缓存直接访问数据库。攻击者可能会利用这一点，发送大量不存在的请求，导致数据库压力剧增，甚至崩溃。</li>\n  <li><strong>应对策略</strong>\n    <ul>\n      <li><strong>布隆过滤器</strong>：在缓存之前加一层布隆过滤器。将所有可能存在的数据哈希到一个足够大的位数组中，一个一定不存在的数据会被这个布隆过滤器拦截掉，从而避免对数据库的查询压力。</li>\n      <li><strong>缓存空对象</strong>：当查询数据库发现数据不存在时，也将这个空结果进行缓存，不过要设置一个较短的过期时间，避免存储过多空对象。</li>\n    </ul>\n  </li>\n</ul>\n<h3>缓存雪崩</h3>\n<ul>\n  <li><strong>定义</strong>：指缓存中大量的key在同一时间过期或者缓存服务故障，导致大量的请求直接访问数据库，使得数据库压力骤增，甚至可能导致数据库崩溃。</li>\n  <li><strong>应对策略</strong>\n    <ul>\n      <li><strong>均匀设置过期时间</strong>：在设置缓存过期时间时，给每个key的过期时间加上一个随机值，避免大量的key在同一时间过期。</li>\n      <li><strong>缓存高可用</strong>：采用Redis集群等方式保证缓存服务的高可用性，当部分节点出现故障时，其他节点仍能正常提供服务。</li>\n      <li><strong>限流降级</strong>：在数据库层设置限流策略，当请求量超过一定阈值时，对部分请求进行降级处理，如返回默认值等。</li>\n    </ul>\n  </li>\n</ul>\n<h3>缓存击穿</h3>\n<ul>\n  <li><strong>定义</strong>：指一个热点key在缓存中过期的瞬间，有大量的请求同时访问这个key，这些请求会直接穿透缓存访问数据库，给数据库带来巨大压力。</li>\n  <li><strong>应对策略</strong>\n    <ul>\n      <li><strong>设置永不过期</strong>：对于一些热点key，不设置过期时间，而是通过后台定时任务来更新缓存数据。</li>\n      <li><strong>互斥锁</strong>：当发现缓存过期时，先获取一个互斥锁，只有获取到锁的线程才能去查询数据库并更新缓存，其他线程等待缓存更新完成后再从缓存中获取数据。</li>\n    </ul>\n  </li>\n</ul>",
    "type": 6,
    "level": 2,
    "freq": 0.08566484,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：明确Redis缓存穿透、缓存雪崩、缓存击穿的定义及应对策略。</li>\n  <li><strong>考察点</strong>：对Redis常见问题的理解，以及解决这些问题的能力。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<ul>\n  <li><strong>Redis缓存</strong>：是一种基于内存的高性能键值存储系统，用于减轻数据库压力、提高系统响应速度。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）缓存穿透</h4>\n<ul>\n  <li><strong>定义</strong>：指客户端请求的数据在缓存和数据库中都不存在，这样每次请求都会穿透缓存直接访问数据库。大量这样的请求会对数据库造成巨大压力，甚至导致数据库崩溃。</li>\n  <li><strong>应对策略</strong>：\n    <ul>\n      <li><strong>布隆过滤器</strong>：在请求到达缓存之前，使用布隆过滤器判断请求的数据是否可能存在。如果布隆过滤器判断数据不存在，则直接返回，避免访问缓存和数据库。</li>\n      <li><strong>缓存空值</strong>：当数据库查询结果为空时，将空值也缓存起来，并设置较短的过期时间，这样后续相同的请求就可以直接从缓存中获取空值，而不会再访问数据库。</li>\n    </ul>\n  </li>\n</ul>\n<h4>（2）缓存雪崩</h4>\n<ul>\n  <li><strong>定义</strong>：指在同一时间段内，大量的缓存数据同时过期失效，或者Redis服务崩溃，导致大量请求直接访问数据库，从而使数据库压力剧增，甚至崩溃。</li>\n  <li><strong>应对策略</strong>：\n    <ul>\n      <li><strong>设置随机过期时间</strong>：为不同的缓存数据设置不同的过期时间，避免大量缓存同时过期。</li>\n      <li><strong>使用集群和分布式缓存</strong>：通过搭建Redis集群或使用分布式缓存系统，提高Redis的可用性和容错性，防止单点故障。</li>\n      <li><strong>限流和降级</strong>：在缓存雪崩发生时，对请求进行限流，限制并发访问量，或者对某些非核心业务进行降级处理，保证系统的基本可用性。</li>\n    </ul>\n  </li>\n</ul>\n<h4>（3）缓存击穿</h4>\n<ul>\n  <li><strong>定义</strong>：指某个热点数据的缓存过期后，大量的请求同时访问该数据，导致这些请求直接穿透缓存访问数据库，给数据库带来巨大压力。</li>\n  <li><strong>应对策略</strong>：\n    <ul>\n      <li><strong>设置热点数据永不过期</strong>：对于一些热点数据，不设置过期时间，或者在缓存数据更新时手动更新缓存。</li>\n      <li><strong>使用互斥锁</strong>：当缓存过期时，只有一个请求能够获取锁去访问数据库并更新缓存，其他请求等待缓存更新完成后再从缓存中获取数据，避免大量请求同时访问数据库。</li>\n    </ul>\n  </li>\n</ul>\n<h3>4. 示例代码（以Python和Redis为例）</h3>\n<h4>缓存穿透 - 缓存空值示例</h4>\n<pre><code class=\"language-python\">import redis\n\nr = redis.Redis(host='localhost', port=6379, db=0)\n\ndef get_data(key):\n    data = r.get(key)\n    if data is None:\n        # 模拟从数据库查询\n        db_data = None  # 假设数据库中也没有该数据\n        if db_data is None:\n            r.setex(key, 60, '')  # 缓存空值，设置60秒过期时间\n        return db_data\n    return data\n</code></pre>\n<h4>缓存击穿 - 使用互斥锁示例</h4>\n<pre><code class=\"language-python\">import redis\nimport time\n\nr = redis.Redis(host='localhost', port=6379, db=0)\n\ndef get_data(key):\n    data = r.get(key)\n    if data is None:\n        # 尝试获取锁\n        lock = r.setnx('lock:' + key, 1)\n        if lock:\n            r.expire('lock:' + key, 10)  # 设置锁的过期时间\n            try:\n                # 模拟从数据库查询\n                db_data = 'data from database'\n                r.setex(key, 3600, db_data)  # 更新缓存\n                return db_data\n            finally:\n                r.delete('lock:' + key)  # 释放锁\n        else:\n            time.sleep(0.1)  # 等待锁释放\n            return get_data(key)  # 重新尝试获取数据\n    return data\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆概念</h4>\n<ul>\n  <li>误区：将缓存穿透、缓存雪崩、缓存击穿的概念混淆，不能准确区分它们的特点和成因。</li>\n  <li>纠正：明确每个概念的定义和产生的原因，通过具体的场景和示例来加深理解。</li>\n</ul>\n<h4>（2）单一策略依赖</h4>\n<ul>\n  <li>误区：只采用一种应对策略，而忽略了不同策略的组合使用。</li>\n  <li>纠正：根据实际情况，综合使用多种应对策略，提高系统的稳定性和可靠性。</li>\n</ul>\n<h4>（3）忽视性能影响</h4>\n<ul>\n  <li>误区：在使用应对策略时，没有考虑到策略本身对系统性能的影响。</li>\n  <li>纠正：在选择和使用应对策略时，要权衡其对系统性能的影响，避免引入新的性能瓶颈。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“Redis缓存穿透是指客户端请求的数据在缓存和数据库中都不存在，导致请求穿透缓存直接访问数据库。可通过布隆过滤器或缓存空值来应对。</p>\n<p>缓存雪崩是指大量缓存数据同时过期或Redis服务崩溃，使大量请求直接访问数据库。可通过设置随机过期时间、使用集群和分布式缓存、限流和降级等策略来解决。</p>\n<p>缓存击穿是指热点数据缓存过期后，大量请求同时访问该数据，直接穿透缓存访问数据库。可通过设置热点数据永不过期或使用互斥锁来应对。</p>\n<p>在实际应用中，要准确区分这三种问题，综合使用多种应对策略，并考虑策略对系统性能的影响，以保障系统的稳定运行。”</p>",
    "more_ask": "<h3>1. 缓存穿透应对策略细节</h3>\n<ul>\n  <li><strong>布隆过滤器误判问题</strong>：布隆过滤器在应对缓存穿透时可能会出现误判，那误判会带来什么影响，又该如何尽量降低误判率？\n    <ul>\n      <li>提示：思考布隆过滤器的原理，误判是将不存在的元素判定为存在，结合业务场景想影响，从布隆过滤器的参数设置方面考虑降低误判率。</li>\n    </ul>\n  </li>\n  <li><strong>空值缓存的有效期设置</strong>：使用空值缓存应对缓存穿透时，空值缓存的有效期该如何合理设置，设置不当会有什么后果？\n    <ul>\n      <li>提示：考虑业务数据的更新频率、存储空间的占用情况，设置不当可能导致缓存空间浪费或缓存穿透问题再次出现。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 缓存雪崩相关</h3>\n<ul>\n  <li><strong>多级缓存架构下的雪崩处理</strong>：如果采用多级缓存架构（如本地缓存 + Redis 缓存），发生缓存雪崩时该如何处理，和单级缓存处理有什么不同？\n    <ul>\n      <li>提示：思考多级缓存之间的数据一致性、不同层级缓存的失效策略，对比单级缓存只考虑 Redis 的情况。</li>\n    </ul>\n  </li>\n  <li><strong>缓存雪崩对数据库的连锁反应</strong>：缓存雪崩发生后，大量请求涌入数据库，数据库除了性能下降还可能出现哪些问题，如何提前预防这些连锁反应？\n    <ul>\n      <li>提示：从数据库的连接数、磁盘 I/O、锁竞争等方面考虑可能出现的问题，预防措施可从数据库配置、限流、熔断等角度思考。</li>\n    </ul>\n  </li>\n</ul>\n<h3>3. 缓存击穿相关</h3>\n<ul>\n  <li><strong>热点数据动态更新</strong>：对于使用互斥锁解决缓存击穿问题，热点数据更新时如何保证锁的高效使用，避免出现死锁或锁竞争过于激烈的情况？\n    <ul>\n      <li>提示：思考锁的粒度、锁的释放时机、锁的类型（如读写锁），结合热点数据更新的频率和并发情况。</li>\n    </ul>\n  </li>\n  <li><strong>热点数据预热策略</strong>：除了手动预热，有没有自动化的热点数据预热策略，如何实现？\n    <ul>\n      <li>提示：可以从业务日志分析、用户行为预测等方面考虑自动化预热的方法，结合 Redis 的数据加载机制实现。</li>\n    </ul>\n  </li>\n</ul>\n<h3>4. 综合场景问题</h3>\n<ul>\n  <li><strong>多种缓存问题并发处理</strong>：如果在实际业务中同时出现缓存穿透、缓存雪崩和缓存击穿的情况，该如何按照优先级进行处理？\n    <ul>\n      <li>提示：考虑每种问题对系统的影响程度、处理的难易程度和时效性，确定处理的先后顺序。</li>\n    </ul>\n  </li>\n  <li><strong>Redis 集群环境下的缓存问题</strong>：在 Redis 集群环境中，缓存穿透、缓存雪崩、缓存击穿问题的表现和单机环境有什么不同，处理策略需要做哪些调整？\n    <ul>\n      <li>提示：思考集群环境下的数据分布、节点故障、网络延迟等因素对缓存问题的影响，以及处理策略在集群中的可扩展性和一致性。</li>\n    </ul>\n  </li>\n</ul>",
    "mindmap": "mindmap\n  root((缓存问题及应对策略))\n    缓存穿透\n      定义\n      应对策略\n        布隆过滤器\n        缓存空对象\n    缓存雪崩\n      定义\n      应对策略\n        均匀设置过期时间\n        缓存高可用\n        限流降级\n    缓存击穿\n      定义\n      应对策略\n        设置永不过期\n        互斥锁",
    "keynote": "缓存穿透：定义为请求数据在缓存和数据库都不存在，攻击者可利用致数据库压力剧增；策略有布隆过滤器、缓存空对象\n缓存雪崩：定义是大量key同时过期或缓存故障致请求直访数据库；策略有均匀设过期时间、缓存高可用、限流降级\n缓存击穿：定义是热点key过期瞬间大量请求直访数据库；策略有设置永不过期、互斥锁",
    "group_id": 16,
    "kps": [
      "常见问题与解决方案"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "快手",
      "小红书",
      "字节跳动",
      "华为",
      "中国电子云",
      "腾讯云智",
      "正浩创新",
      "酷开",
      "趣链科技",
      "陌陌",
      "比亚迪",
      "拼多多",
      "B站",
      "数字马力",
      "携程",
      "用友",
      "中冶南方",
      "CVTE视源股份",
      "百度",
      "滴滴",
      "4399",
      "度小满",
      "腾讯新闻",
      "长沙用友",
      "好未来",
      "哈啰出行",
      "网易",
      "苏州百邦达",
      "京东",
      "亚信",
      "美团",
      "Wind万得",
      "作业帮",
      "亚信安全",
      "阿里云",
      "小米",
      "海成科技",
      "TP-LINK",
      "武汉某小厂",
      "交通银行",
      "KN GROUP",
      "中国电信",
      "安克创新",
      "唯品会",
      "微派网络",
      "腾讯",
      "金山",
      "Shopee虾皮",
      "烽火通信",
      "绿盟科技",
      "中国工商银行",
      "闪电快车",
      "BOSS直聘",
      "海亮科技",
      "货拉拉",
      "腾讯云",
      "数禾科技",
      "三一集团",
      "字节飞书",
      "腾讯金融科技",
      "美团优选",
      "阿里橙狮体育",
      "某杭州半导体制造企业",
      "阿里巴巴",
      "淘天集团",
      "朗新",
      "OPPO",
      "58同城",
      "科大讯飞",
      "联想集团",
      "腾讯音乐",
      "途虎养车",
      "晓多科技",
      "深信服",
      "顺丰",
      "蚂蚁集团",
      "猿辅导",
      "CSDN",
      "贝壳",
      "网易有道",
      "酷家乐",
      "中国联通",
      "浩鲸科技",
      "同程旅行",
      "同程旅游",
      "帆软",
      "上海某数字科技公司",
      "华为OD",
      "欢聚集团",
      "长安深蓝",
      "字节今日头条",
      "北京小厂",
      "广州云芯信息科技"
    ]
  }
}