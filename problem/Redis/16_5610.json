{
  "success": true,
  "data": {
    "id": 5610,
    "name": "<p>什么是缓存击穿？如何解决？</p>",
    "options": null,
    "answer": "<p>缓存击穿是指在高并发情况下，某个热点数据在缓存中不存在，导致大量请求直接打到后端数据库，从而造成数据库的压力激增，甚至可能出现宕机的情况。</p>\n<h3>缓存击穿的场景</h3>\n<ul>\n  <li>假设一个热点商品的库存信息被缓存，但由于某种原因（比如缓存过期），该数据在缓存中失效了。</li>\n  <li>大量用户同时请求这个商品的信息，由于没有缓存，所有请求都会直接访问数据库。</li>\n  <li>这种情况下，数据库由于承受过大压力而崩溃。</li>\n</ul>\n<h3>解决缓存击穿的方法</h3>\n<ol>\n  <li>\n    <p><strong>使用Mutex（互斥锁）</strong>：</p>\n    <ul>\n      <li>在缓存失效之前，先对请求加锁。只有一个请求可以查询数据库并重新加载数据到缓存，其他请求则等待锁释放。</li>\n      <li>尽量减少锁的持有时间，以提高性能。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>加随机值的过期时间</strong>：</p>\n    <ul>\n      <li>对热点数据的缓存设置一个随机的过期时间，避免因同时失效而导致的高并发请求。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>使用热点数据提前加载</strong>：</p>\n    <ul>\n      <li>监控数据的热点情况，定期或者在特定情况下（如活动开始前）将热点数据提前加载到缓存中，减少失效的可能性。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>降级处理</strong>：</p>\n    <ul>\n      <li>如果数据库的负载过高，考虑直接返回一个默认值或提示用户稍后再试，而不是等待数据库查询。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>使用本地缓存</strong>：</p>\n    <ul>\n      <li>在应用层面添加本地缓存，减少对数据库的直接访问率。</li>\n    </ul>\n  </li>\n</ol>\n<p>通过以上方法，可以有效减少和防止缓存击穿的情况，提高系统的稳定性和性能。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.01730603,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：什么是缓存击穿，以及如何解决缓存击穿问题。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对缓存击穿概念的理解。</li>\n      <li>掌握解决缓存击穿问题的方法。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）缓存机制</h4>\n<p>缓存是为了提高系统性能，减少对数据库等数据源的访问压力，将经常访问的数据存储在高速存储介质（如Redis）中。当有请求到来时，先从缓存中查找数据，若存在则直接返回，不存在则从数据源获取并更新缓存。</p>\n<h4>（2）缓存击穿产生背景</h4>\n<p>在高并发场景下，某些热点数据的缓存失效或过期，大量请求同时涌入，直接访问数据源，给数据源带来巨大压力，甚至可能导致系统崩溃。</p>\n<h3>3. 解析</h3>\n<h4>（1）缓存击穿的定义</h4>\n<p>缓存击穿指的是在高并发情况下，某个热点key在缓存中过期或失效的瞬间，大量请求同时访问该key，由于缓存中没有数据，这些请求会直接穿透缓存访问数据库等数据源，可能导致数据库压力过大，甚至出现数据库崩溃等问题。</p>\n<h4>（2）解决缓存击穿的方法</h4>\n<ul>\n  <li><strong>设置永不过期</strong>：对于一些非常热点且不经常更新的数据，可以将其在缓存中设置为永不过期。在业务层面，当数据发生变化时，手动更新缓存。这种方式能避免缓存过期导致的击穿问题，但需要注意数据的一致性。</li>\n  <li><strong>加互斥锁</strong>：当缓存失效时，让一个请求去获取数据并更新缓存，其他请求等待。可以使用Redis的分布式锁实现，例如使用SETNX（SET if Not eXists）命令。当第一个请求获取到锁后，从数据库获取数据并更新缓存，其他请求在等待锁释放后，直接从缓存中获取数据。</li>\n  <li><strong>使用热点数据预加载</strong>：提前将热点数据加载到缓存中，并设置合适的过期时间，在临近过期时间时，异步更新缓存。这样可以保证缓存中始终有热点数据，减少缓存击穿的概率。</li>\n  <li><strong>限流</strong>：对访问热点key的请求进行限流，控制同时访问的请求数量，避免大量请求同时穿透缓存。可以使用令牌桶算法或漏桶算法等限流算法实现。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<h4>使用Redis分布式锁解决缓存击穿示例（Python + Redis）</h4>\n<pre><code class=\"language-python\">import redis\nimport time\n\n# 连接Redis\nr = redis.Redis(host='localhost', port=6379, db=0)\n\ndef get_data(key):\n    # 先从缓存中获取数据\n    data = r.get(key)\n    if data is not None:\n        return data.decode()\n\n    # 尝试获取分布式锁\n    lock_key = f'lock:{key}'\n    if r.setnx(lock_key, 1):\n        try:\n            # 设置锁的过期时间，避免死锁\n            r.expire(lock_key, 10)\n            # 从数据库获取数据\n            # 这里模拟从数据库获取数据\n            data_from_db = 'example data from db'\n            # 更新缓存\n            r.set(key, data_from_db)\n            return data_from_db\n        finally:\n            # 释放锁\n            r.delete(lock_key)\n    else:\n        # 未获取到锁，等待一段时间后重试\n        time.sleep(0.1)\n        return get_data(key)\n\n# 调用示例\nresult = get_data('hot_key')\nprint(result)\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）忽视高并发场景</h4>\n<p>\n  误区：只考虑普通场景下的缓存使用，没有意识到高并发场景下缓存击穿的风险。\n  纠正：在设计缓存系统时，要充分考虑高并发情况，特别是热点数据的处理。\n</p>\n<h4>（2）滥用永不过期策略</h4>\n<p>\n  误区：对所有数据都设置为永不过期，导致数据一致性问题严重。\n  纠正：只对不经常更新的热点数据使用永不过期策略，并在数据更新时及时手动更新缓存。\n</p>\n<h4>（3）锁使用不当</h4>\n<p>\n  误区：没有设置锁的过期时间，可能导致死锁问题；或者锁的粒度设置不合理，影响系统性能。\n  纠正：合理设置锁的过期时间，避免死锁；根据业务需求，调整锁的粒度，尽量减少锁的持有时间。\n</p>\n<h3>6. 总结回答</h3>\n<p>缓存击穿是指在高并发情况下，某个热点key在缓存中过期或失效的瞬间，大量请求同时访问该key，直接穿透缓存访问数据库等数据源，可能导致数据库压力过大甚至崩溃。</p>\n<p>解决缓存击穿问题可以采用以下方法：一是设置永不过期，对于不常更新的热点数据，将其在缓存中设为永不过期，数据更新时手动更新缓存；二是加互斥锁，当缓存失效时，让一个请求获取数据并更新缓存，其他请求等待；三是热点数据预加载，提前将热点数据加载到缓存并设置合适过期时间，临近过期时异步更新；四是限流，对访问热点key的请求进行限流。同时要注意避免常见误区，如忽视高并发场景、滥用永不过期策略和锁使用不当等问题。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>请解释什么是缓存穿透，并与缓存击穿进行对比。</strong></p>\n    <ul>\n      <li>提示：可以从定义、原因和影响等方面进行阐述。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在设计缓存策略时，如何选择合适的缓存失效策略？</strong></p>\n    <ul>\n      <li>提示：考虑场景、数据访问频率和过期时间等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何监控和优化Redis的性能？</strong></p>\n    <ul>\n      <li>提示：谈谈监控工具、指标（如命中率）、以及如何进行性能调优。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在高并发场景下，如何保证缓存与数据库的一致性？</strong></p>\n    <ul>\n      <li>提示：考虑缓存失效、数据更新策略等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你如何处理缓存中的脏数据问题？</strong></p>\n    <ul>\n      <li>提示：可以从更新策略、人工干预等角度讨论。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>对于不同类型的数据（如热点数据和冷数据），你会采取什么样的缓存策略？</strong></p>\n    <ul>\n      <li>提示：考虑访问频率、存储成本、TTL设置等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>能否讨论一下Redis中持久化机制的优势与劣势？</strong></p>\n    <ul>\n      <li>提示：提及RDB、AOF等，而不是只谈缓存。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>能否提供一个具体实例，说明你在项目中如何使用Redis来解决某个具体问题？</strong></p>\n    <ul>\n      <li>提示：关注使用场景、遇到的挑战及解决方案。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果遇到Redis网络延迟或者节点故障，你的应对方案是什么？</strong></p>\n    <ul>\n      <li>提示：考虑高可用方案如主从复制、集群等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何评估和选择合适的缓存更新策略（如LRU、LFU等）？</strong></p>\n    <ul>\n      <li>提示：从数据应用场景和缓存特性方面分析。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  缓存击穿\n    缓存击穿的场景\n      热点商品库存信息缓存失效\n      大量用户同时请求直接访问数据库\n      数据库压力激增导致崩溃\n    解决缓存击穿的方法\n      使用Mutex（互斥锁）\n        请求加锁查询数据库并重新加载数据到缓存\n        减少锁的持有时间以提高性能\n      加随机值的过期时间\n        设置随机过期时间避免高并发请求\n      使用热点数据提前加载\n        监控热点情况定期或特定情况下提前加载\n      降级处理\n        返回默认值或提示用户稍后再试\n      使用本地缓存\n        添加本地缓存减少直接访问数据库",
    "keynote": "- 缓存击穿：高并发下热点数据缓存失效，大量请求直接打到数据库。\n- 场景：热点商品库存信息缓存失效，大量用户同时请求，数据库压力激增。\n- 方法：\n  - 使用Mutex：加锁查询数据库，减少锁持有时间。\n  - 随机过期时间：避免同时失效导致高并发。\n  - 提前加载：监控热点数据，定期或特定情况下提前加载。\n  - 降级处理：返回默认值或提示稍后再试。\n  - 本地缓存：应用层面添加本地缓存。",
    "group_id": 16,
    "kps": [
      "常见问题与解决方案"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "快手",
      "腾讯云智",
      "西安某小厂",
      "美团",
      "广东壹念心新理网络科技有限公司",
      "招商银行",
      "腾讯",
      "携程",
      "百度",
      "网易",
      "钉钉",
      "字节跳动",
      "字节生活服务",
      "百度网盘",
      "京东",
      "科大讯飞",
      "好未来",
      "途虎养车",
      "小米",
      "滴滴",
      "顺丰",
      "vivo",
      "蚂蚁集团",
      "阅文集团",
      "同程旅行",
      "游卡",
      "字节飞书",
      "腾讯云",
      "美团骑行",
      "华为",
      "字节今日头条",
      "来未来科技（浙江）熙牛医疗"
    ]
  }
}