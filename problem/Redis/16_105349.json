{
  "success": true,
  "data": {
    "id": 105349,
    "name": "<p>请说明 Redis 哨兵机制选主节点的算法</p>",
    "options": null,
    "answer": "<p>Redis 哨兵机制选主节点的算法主要包含以下几个步骤：</p>\n<h3>筛选出可用的从节点</h3>\n<p>在进行选主之前，哨兵会先对所有从节点进行筛选，排除那些不符合要求的节点：</p>\n<ul>\n  <li><strong>主观下线（SDOWN）和客观下线（ODOWN）判断</strong>：哨兵会持续监控主节点和从节点的状态。如果一个节点在一定时间内没有响应哨兵的 PING 命令，哨兵会将其标记为主观下线。当多个哨兵都将该节点标记为主观下线，并且达到一定数量（由配置文件中的 <code>quorum</code> 参数决定）时，该节点会被标记为客观下线。只有未被标记为客观下线的从节点才会进入后续的选主流程。</li>\n  <li><strong>与主节点断开连接时间</strong>：从节点与原主节点断开连接的时间不能过长。如果断开时间超过了配置的 <code>down-after-milliseconds</code> 参数乘以 10 再加上 5 秒，该从节点会被排除。这是为了避免选择那些长时间与主节点失去联系，数据可能严重滞后的从节点。</li>\n</ul>\n<h3>对剩余从节点进行打分排序</h3>\n<p>经过筛选后，会对剩余的从节点按照以下规则依次打分，得分最高的从节点将被选为新的主节点：</p>\n<h4>优先级得分（Priority）</h4>\n<ul>\n  <li>每个从节点都可以配置一个优先级，通过 <code>slave-priority</code> 参数设置。优先级的取值范围是 1 - 255，数值越小优先级越高。哨兵会优先选择优先级高的从节点。如果某个从节点的优先级为 0，则表示该节点永远不会被选为新的主节点。</li>\n</ul>\n<h4>复制偏移量得分（Replication Offset）</h4>\n<ul>\n  <li>如果多个从节点的优先级相同，哨兵会比较它们的复制偏移量。复制偏移量表示从节点从主节点复制数据的进度，偏移量越大说明从节点的数据越新。哨兵会选择复制偏移量最大的从节点，以确保新主节点的数据尽可能接近原主节点。</li>\n</ul>\n<h4>运行 ID 得分（Run ID）</h4>\n<ul>\n  <li>如果多个从节点的优先级和复制偏移量都相同，哨兵会比较它们的运行 ID。运行 ID 是每个 Redis 实例启动时生成的唯一标识符。哨兵会选择运行 ID 最小的从节点作为新的主节点。</li>\n</ul>\n<h3>选举结果确认</h3>\n<p>当一个从节点在上述打分排序中得分最高时，哨兵会将其选为新的主节点。然后，哨兵会向其他从节点发送 <code>SLAVEOF</code> 命令，让它们将新选的主节点作为主节点进行复制，从而完成主从切换。同时，哨兵会更新自身的配置信息，记录新的主节点信息，以便后续的监控和管理。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0008653014,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：说明Redis哨兵机制选主节点的算法。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Redis哨兵机制的理解。</li>\n      <li>选主节点算法的具体流程。</li>\n      <li>影响选主的各项因素。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Redis哨兵机制</h4>\n<p>Redis哨兵机制是用于监控Redis主从集群的高可用性解决方案。当主节点出现故障时，哨兵会自动进行故障转移，从从节点中选出一个新的主节点。</p>\n<h4>（2）选主的必要性</h4>\n<p>主节点故障会导致写操作无法正常进行，影响系统可用性。通过选主可以快速恢复集群的读写功能。</p>\n<h3>3. 解析</h3>\n<h4>（1）主观下线和客观下线</h4>\n<ul>\n  <li>每个哨兵会定期向主节点发送PING命令，若在一定时间内未收到有效回复，哨兵会将该主节点标记为主观下线（SDOWN）。</li>\n  <li>当多数哨兵都认为主节点主观下线时，会将其标记为客观下线（ODOWN），此时开始选主流程。</li>\n</ul>\n<h4>（2）筛选从节点</h4>\n<ul>\n  <li>过滤掉处于下线状态、与主节点断开连接时间过长、响应慢的从节点，确保候选从节点是健康的。</li>\n</ul>\n<h4>（3）优先级排序</h4>\n<ul>\n  <li>每个从节点可以配置一个优先级（replica-priority），数值越小优先级越高。哨兵会优先选择优先级高的从节点作为新主节点。</li>\n</ul>\n<h4>（4）复制偏移量</h4>\n<ul>\n  <li>如果优先级相同，会选择复制偏移量最大的从节点。复制偏移量表示从节点与原主节点数据的同步程度，偏移量越大说明数据越新。</li>\n</ul>\n<h4>（5）运行ID</h4>\n<ul>\n  <li>如果复制偏移量也相同，会选择运行ID最小的从节点。运行ID是Redis实例启动时生成的唯一标识符。</li>\n</ul>\n<h3>4. 示例说明</h3>\n<p>假设有三个从节点S1、S2、S3，它们的优先级和复制偏移量如下：</p>\n<table>\n  <thead>\n    <tr>\n      <th>从节点</th>\n      <th>优先级</th>\n      <th>复制偏移量</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>S1</td>\n      <td>10</td>\n      <td>1000</td>\n    </tr>\n    <tr>\n      <td>S2</td>\n      <td>20</td>\n      <td>1200</td>\n    </tr>\n    <tr>\n      <td>S3</td>\n      <td>10</td>\n      <td>1100</td>\n    </tr>\n  </tbody>\n</table>\n<p>首先，由于S1和S3优先级相同且低于S2，会在S1和S3中进一步选择。又因为S3的复制偏移量大于S1，所以最终会选择S3作为新的主节点。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）忽略筛选过程</h4>\n<ul>\n  <li>误区：只关注优先级、复制偏移量等排序因素，忽略了筛选不健康从节点的步骤。</li>\n  <li>纠正：选主前需要先筛选出健康的从节点，确保新主节点能正常工作。</li>\n</ul>\n<h4>（2）误解优先级含义</h4>\n<ul>\n  <li>误区：认为优先级数值越大越优先。</li>\n  <li>纠正：优先级数值越小，从节点被选中的优先级越高。</li>\n</ul>\n<h4>（3）不理解复制偏移量作用</h4>\n<ul>\n  <li>误区：不清楚复制偏移量在选主中的重要性。</li>\n  <li>纠正：复制偏移量反映数据同步程度，选主时优先选择数据新的从节点。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>\n  Redis哨兵机制选主节点的算法如下：\n  首先，当多数哨兵将主节点标记为客观下线后，开始选主流程。接着，会筛选掉不健康的从节点，如处于下线状态、与主节点断开连接时间过长、响应慢的节点。然后，按照以下规则进行排序选择：\n</p>\n<ol>\n  <li>优先选择优先级（replica-priority）高的从节点，优先级数值越小越优先。</li>\n  <li>若优先级相同，选择复制偏移量最大的从节点，复制偏移量表示与原主节点数据的同步程度，越大说明数据越新。</li>\n  <li>若复制偏移量也相同，选择运行ID最小的从节点，运行ID是Redis实例启动时生成的唯一标识符。</li>\n</ol>\n<p>通过这样的算法，能确保选出合适的从节点作为新的主节点，恢复Redis集群的高可用性。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      请详细说明 Redis 哨兵机制选主过程中，各个阶段的时间参数及其作用。\n      提示：思考选主过程中涉及的如故障判定时间、选举时间等参数。\n    </p>\n  </li>\n  <li>\n    <p>\n      若在 Redis 哨兵选主时，网络出现分区，会对选主算法产生什么影响，如何应对？\n      提示：考虑网络分区导致信息不一致的情况及解决办法。\n    </p>\n  </li>\n  <li>\n    <p>\n      当多个从节点的优先级、复制偏移量等条件都相同时，Redis 哨兵选主算法是如何处理的？\n      提示：关注选主算法在特殊情况的额外判断逻辑。\n    </p>\n  </li>\n  <li>\n    <p>\n      请阐述 Redis 哨兵选主算法与集群模式下的主节点选举算法有何异同。\n      提示：对比两种不同架构下选举的流程和关键因素。\n    </p>\n  </li>\n  <li>\n    <p>\n      在大规模 Redis 集群中，哨兵选主算法的性能瓶颈可能出现在哪里，怎样优化？\n      提示：从网络、计算资源等方面思考性能瓶颈。\n    </p>\n  </li>\n  <li>\n    <p>\n      若手动干预 Redis 哨兵选主，会有什么潜在风险，如何正确操作？\n      提示：考虑手动干预对系统稳定性和一致性的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      Redis 哨兵选主算法中，对从节点的健康检查是如何进行的，检查结果如何影响选主？\n      提示：关注健康检查的方式和指标。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Redis 哨兵机制选主节点算法))\n    筛选可用从节点\n      主观下线和客观下线判断\n      与主节点断开连接时间\n    对剩余从节点打分排序\n      优先级得分\n      复制偏移量得分\n      运行 ID 得分\n    选举结果确认\n      选得分最高为新主节点\n      向其他从节点发 SLAVEOF 命令\n      更新自身配置信息",
    "keynote": "筛选可用从节点：\n- 排除主观、客观下线节点\n- 排除与主节点断开时间过长节点\n\n对剩余从节点打分排序：\n- 优先级得分：数值小优先，0 不参选\n- 复制偏移量得分：偏移量大优先\n- 运行 ID 得分：ID 小优先\n\n选举结果确认：\n- 选得分最高为新主节点\n- 让其他从节点复制新主节点\n- 更新配置记录新主节点信息",
    "group_id": 16,
    "kps": [
      "数据结构",
      "常见问题与解决方案"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "字节跳动",
      "金山",
      "饿了么"
    ]
  }
}