{"success":true,"data":{"id":17879,"name":"<p>请说明 Bean 的作用域</p>","options":null,"answer":"<p>在 Spring 中，Bean 的作用域定义了 Bean 在 Spring 容器中的生命周期和可见范围。Spring 提供了多种 Bean 作用域，下面详细介绍几种常见的作用域：</p>\n<h3>单例（Singleton）</h3>\n<ul>\n  <li><strong>描述</strong>：单例是 Spring 中默认的 Bean 作用域。当一个 Bean 的作用域为单例时，在整个 Spring 应用上下文中只会创建该 Bean 的一个实例，并且所有对该 Bean 的请求都会返回这个唯一的实例。</li>\n  <li><strong>使用场景</strong>：适用于无状态的 Bean，例如配置信息类、工具类等，因为这些类不需要维护特定于某个请求或会话的状态，使用单例可以节省系统资源。</li>\n  <li><strong>示例配置</strong>：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"singletonBean\" class=\"com.example.SingletonBean\" scope=\"singleton\"/>\n</code></pre>\n<p>或者使用注解：</p>\n<pre><code class=\"language-java\">@Component\npublic class SingletonBean {\n    // 类的具体实现\n}\n</code></pre>\n<h3>原型（Prototype）</h3>\n<ul>\n  <li><strong>描述</strong>：每次从 Spring 容器中获取原型作用域的 Bean 时，容器都会创建一个新的实例。也就是说，对该 Bean 的每次请求都会返回一个不同的对象。</li>\n  <li><strong>使用场景</strong>：适用于有状态的 Bean，例如需要保存用户会话信息的 Bean，因为每个用户的会话信息是不同的，需要为每个用户创建一个独立的实例。</li>\n  <li><strong>示例配置</strong>：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"prototypeBean\" class=\"com.example.PrototypeBean\" scope=\"prototype\"/>\n</code></pre>\n<p>或者使用注解：</p>\n<pre><code class=\"language-java\">@Component\n@Scope(\"prototype\")\npublic class PrototypeBean {\n    // 类的具体实现\n}\n</code></pre>\n<h3>请求（Request）</h3>\n<ul>\n  <li><strong>描述</strong>：该作用域仅在基于 Web 的 Spring 应用中有效。对于每个 HTTP 请求，Spring 容器会创建一个新的 Bean 实例，并且该实例仅在当前请求的生命周期内有效。当请求处理完成后，该 Bean 实例会被销毁。</li>\n  <li><strong>使用场景</strong>：适用于需要在一次请求处理过程中保存状态的 Bean，例如处理用户请求的表单数据。</li>\n  <li><strong>示例配置</strong>：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"requestBean\" class=\"com.example.RequestBean\" scope=\"request\">\n    &#x3C;aop:scoped-proxy/>\n&#x3C;/bean>\n</code></pre>\n<p>或者使用注解：</p>\n<pre><code class=\"language-java\">@Component\n@Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class RequestBean {\n    // 类的具体实现\n}\n</code></pre>\n<h3>会话（Session）</h3>\n<ul>\n  <li><strong>描述</strong>：同样仅在基于 Web 的 Spring 应用中有效。对于每个 HTTP 会话，Spring 容器会创建一个新的 Bean 实例，并且该实例在整个会话期间都有效。当会话结束时，该 Bean 实例会被销毁。</li>\n  <li><strong>使用场景</strong>：适用于需要在用户会话期间保存状态的 Bean，例如用户的购物车信息。</li>\n  <li><strong>示例配置</strong>：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"sessionBean\" class=\"com.example.SessionBean\" scope=\"session\">\n    &#x3C;aop:scoped-proxy/>\n&#x3C;/bean>\n</code></pre>\n<p>或者使用注解：</p>\n<pre><code class=\"language-java\">@Component\n@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class SessionBean {\n    // 类的具体实现\n}\n</code></pre>\n<h3>全局会话（Global Session）</h3>\n<ul>\n  <li><strong>描述</strong>：仅在基于 Portlet 的 Web 应用中有效。全局会话作用域类似于会话作用域，但它是在整个 Portlet 应用的全局会话中有效。</li>\n  <li><strong>使用场景</strong>：适用于 Portlet 应用中需要在全局会话中保存状态的 Bean。</li>\n  <li><strong>示例配置</strong>：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"globalSessionBean\" class=\"com.example.GlobalSessionBean\" scope=\"globalSession\">\n    &#x3C;aop:scoped-proxy/>\n&#x3C;/bean>\n</code></pre>\n<p>或者使用注解：</p>\n<pre><code class=\"language-java\">@Component\n@Scope(value = WebApplicationContext.SCOPE_GLOBAL_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)\npublic class GlobalSessionBean {\n    // 类的具体实现\n}\n</code></pre>\n<p>除了以上这些内置的作用域，Spring 还允许用户自定义作用域，以满足特定的业务需求。</p>","type":6,"level":1,"freq":0.01717408,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：说明 Bean 的作用域。</li>\n  <li><strong>考察点</strong>：对 Spring 框架中 Bean 作用域概念的理解，不同作用域的特点及使用场景。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>在 Spring 框架里，Bean 作用域定义了 Bean 实例的生命周期和可见范围。合理选择 Bean 作用域能优化应用性能和资源使用。</p>\n<h3>3. 解析</h3>\n<h4>（1）单例（Singleton）</h4>\n<ul>\n  <li><strong>特点</strong>：Spring IoC 容器中仅存在一个 Bean 实例，所有对该 Bean 的请求都会返回同一个实例。这是 Spring 默认的作用域。</li>\n  <li><strong>使用场景</strong>：适用于无状态的 Bean，如配置信息类、工具类等，因为它们不需要维护特定状态，一个实例可被多个地方共享使用。</li>\n</ul>\n<h4>（2）原型（Prototype）</h4>\n<ul>\n  <li><strong>特点</strong>：每次请求该 Bean 时，Spring 容器都会创建一个新的实例。</li>\n  <li><strong>使用场景</strong>：适用于有状态的 Bean，如持有用户会话信息的 Bean，每个用户的会话信息不同，需要独立的实例来维护。</li>\n</ul>\n<h4>（3）请求（Request）</h4>\n<ul>\n  <li><strong>特点</strong>：仅在 Web 应用中有效，每个 HTTP 请求会创建一个新的 Bean 实例，请求结束后该实例会被销毁。</li>\n  <li><strong>使用场景</strong>：当 Bean 需要与特定的 HTTP 请求关联时使用，比如处理请求参数的 Bean。</li>\n</ul>\n<h4>（4）会话（Session）</h4>\n<ul>\n  <li><strong>特点</strong>：仅在 Web 应用中有效，每个 HTTP 会话会创建一个新的 Bean 实例，会话结束后该实例会被销毁。</li>\n  <li><strong>使用场景</strong>：用于存储用户会话期间的信息，如用户购物车信息，不同用户的购物车内容不同，且在会话期间保持一致。</li>\n</ul>\n<h4>（5）全局会话（GlobalSession）</h4>\n<ul>\n  <li><strong>特点</strong>：仅在 Portlet 应用中有效，类似于会话作用域，但在全局会话中有效。</li>\n  <li><strong>使用场景</strong>：在 Portlet 应用里，用于在多个 Portlet 之间共享会话信息。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-xml\">&#x3C;!-- 单例作用域 -->\n&#x3C;bean id=\"singletonBean\" class=\"com.example.SingletonBean\" scope=\"singleton\"/>\n\n&#x3C;!-- 原型作用域 -->\n&#x3C;bean id=\"prototypeBean\" class=\"com.example.PrototypeBean\" scope=\"prototype\"/>\n\n&#x3C;!-- 在 Java 配置中使用注解指定作用域 -->\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\n\n@Configuration\npublic class AppConfig {\n    @Bean\n    @Scope(\"singleton\")\n    public SingletonBean singletonBean() {\n        return new SingletonBean();\n    }\n\n    @Bean\n    @Scope(\"prototype\")\n    public PrototypeBean prototypeBean() {\n        return new PrototypeBean();\n    }\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）滥用单例作用域</h4>\n<ul>\n  <li>误区：不管 Bean 是否有状态，都使用单例作用域，可能导致多个请求之间的数据相互影响。</li>\n  <li>纠正：对于有状态的 Bean，应使用原型、请求或会话等作用域。</li>\n</ul>\n<h4>（2）混淆不同作用域的使用场景</h4>\n<ul>\n  <li>误区：在需要每个请求独立实例的场景下使用单例作用域，或者在不需要会话级别的 Bean 上使用会话作用域。</li>\n  <li>纠正：根据 Bean 的实际使用需求，准确选择合适的作用域。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Spring 框架中 Bean 有多种作用域，分别是单例（Singleton）、原型（Prototype）、请求（Request）、会话（Session）和全局会话（GlobalSession）。单例作用域是默认的，容器中只有一个 Bean 实例，适合无状态的 Bean；原型作用域每次请求都会创建新实例，用于有状态的 Bean；请求作用域在 Web 应用中，每个 HTTP 请求创建一个实例；会话作用域在 Web 应用中，每个 HTTP 会话创建一个实例；全局会话作用域仅在 Portlet 应用中有效，用于全局会话。在使用时，要根据 Bean 的特性和实际需求选择合适的作用域，避免滥用单例作用域和混淆不同作用域的使用场景。</p>","more_ask":"<ol>\n  <li>\n    <p>\n      不同作用域的 Bean 在多线程环境下的表现如何？\n      提示：考虑不同作用域 Bean 的实例数量和线程安全问题。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何自定义 Bean 的作用域？\n      提示：思考 Spring 提供的扩展机制和相关接口。\n    </p>\n  </li>\n  <li>\n    <p>\n      在 Web 应用中，request 和 session 作用域的 Bean 是如何管理生命周期的？\n      提示：结合 Web 应用的请求和会话处理流程。\n    </p>\n  </li>\n  <li>\n    <p>\n      单例作用域的 Bean 是如何保证全局唯一的？\n      提示：从 Spring 的容器管理和实例化机制方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      prototype 作用域的 Bean 在依赖注入时会有什么特殊情况？\n      提示：关注注入时 Bean 实例的创建和使用。\n    </p>\n  </li>\n  <li>\n    <p>\n      当一个单例 Bean 依赖一个 prototype 作用域的 Bean 时，会出现什么问题，如何解决？\n      提示：分析单例 Bean 生命周期和 prototype Bean 多次创建的矛盾。\n    </p>\n  </li>\n  <li>\n    <p>\n      作用域为 application 的 Bean 在 Spring 框架中是如何体现的？\n      提示：联系 Spring 与 Servlet 容器的集成。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何在代码中动态改变 Bean 的作用域？\n      提示：思考 Spring 提供的配置和编程方式。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((Spring Bean作用域))\n    定义\n      生命周期\n      可见范围\n    常见作用域\n      单例（Singleton）\n        描述\n          应用上下文仅创建一个实例\n          所有请求返回同一实例\n        使用场景\n          无状态Bean\n          配置信息类\n          工具类\n      原型（Prototype）\n        描述\n          每次获取创建新实例\n          每次请求返回不同对象\n        使用场景\n          有状态Bean\n          保存用户会话信息Bean\n      请求（Request）\n        描述\n          仅Web应用有效\n          每个HTTP请求创建新实例\n          实例仅在请求生命周期内有效\n        使用场景\n          一次请求处理保存状态Bean\n          处理用户请求表单数据\n      会话（Session）\n        描述\n          仅Web应用有效\n          每个HTTP会话创建新实例\n          实例在会话期间有效\n        使用场景\n          用户会话期间保存状态Bean\n          用户购物车信息\n      全局会话（Global Session）\n        描述\n          仅Portlet应用有效\n          全局会话中有效\n        使用场景\n          Portlet应用全局会话保存状态Bean\n    自定义作用域\n      满足特定业务需求","keynote":"Spring Bean作用域定义：生命周期和可见范围\n常见作用域：\n- 单例（Singleton）：默认，应用上下文一个实例，用于无状态Bean\n- 原型（Prototype）：每次获取新实例，用于有状态Bean\n- 请求（Request）：Web应用，每个请求新实例，用于请求处理保存状态\n- 会话（Session）：Web应用，每个会话新实例，用于会话期间保存状态\n- 全局会话（Global Session）：Portlet应用，全局会话有效\n自定义作用域：满足特定业务需求","group_id":17,"kps":["基础知识"],"years":[2025,2024,2023,2022],"corps":["Wind万得","趣链科技","数字马力","携程","合思","神测数据","腾讯","美团","百度","京东","快手","阿里巴巴","滴滴","蚂蚁集团","B站","用友","恒生电子","去哪儿旅行","飞猪","中电金信"]}}