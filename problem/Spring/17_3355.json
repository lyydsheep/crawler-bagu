{"success":true,"data":{"id":3355,"name":"<p>Spring Bean 支持哪几种作用域?</p>","options":null,"answer":"<p>在 Spring 框架中，Spring Bean 支持以下几种作用域 (scope)：</p>\n<ol>\n  <li>\n    <p><strong>singleton</strong>（单例）：这是默认的作用域。Spring 容器只会创建一个 Bean 的实例，并在整个应用程序中共享这个实例。</p>\n  </li>\n  <li>\n    <p><strong>prototype</strong>（原型）：每次从 Spring 容器获取 Bean 时，都会创建一个新的实例。适用于需要多个不同实例的场景。</p>\n  </li>\n  <li>\n    <p><strong>request</strong>（请求）：在 Web 应用中，适用于每个 HTTP 请求创建一个新的 Bean 实例。该 Bean 仅在当前 HTTP 请求内有效。</p>\n  </li>\n  <li>\n    <p><strong>session</strong>（会话）：在 Web 应用中，适用于每个 HTTP 会话创建一个新的 Bean 实例。该 Bean 在一个会话内共享，但在不同会话之间是不共享的。</p>\n  </li>\n  <li>\n    <p><strong>application</strong>（应用）：在 Web 应用中，整个应用上下文中共享一个 Bean 实例。适用于需要跨多个请求和会话的共享数据。</p>\n  </li>\n  <li>\n    <p><strong>websocket</strong>（WebSocket）：适用于 WebSocket 连接，一个 WebSocket 连接对应一个 Bean 实例。</p>\n  </li>\n</ol>\n<p>对于非 Web 应用，通常使用 <code>singleton</code> 和 <code>prototype</code> 这两种作用域。对于 Web 应用，可以选择 <code>request</code>、<code>session</code>、<code>application</code> 和 <code>websocket</code> 等。</p>","type":6,"level":1,"freq":0.00156128,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring Bean支持哪几种作用域。</li>\n  <li><strong>考察点</strong>：对Spring框架中Bean作用域概念的了解，不同作用域的特点及适用场景。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>在Spring框架中，Bean的作用域定义了Bean的生命周期和可见性。通过设置不同的作用域，可以控制Bean的创建和使用方式，以满足不同的业务需求。</p>\n<h3>3. 解析</h3>\n<h4>（1）单例（Singleton）</h4>\n<ul>\n  <li><strong>特点</strong>：默认的作用域，Spring IoC容器中只会创建该Bean的一个实例，所有对该Bean的请求都会返回同一个实例。</li>\n  <li><strong>适用场景</strong>：无状态的Bean，如Service层、DAO层的组件，因为它们不需要维护特定的状态，多个请求共享同一个实例可以提高性能和资源利用率。</li>\n</ul>\n<h4>（2）原型（Prototype）</h4>\n<ul>\n  <li><strong>特点</strong>：每次从容器中获取Bean时，都会创建一个新的实例。</li>\n  <li><strong>适用场景</strong>：有状态的Bean，例如需要保存用户会话信息的Bean，因为每个用户的会话信息是不同的，需要为每个请求创建一个新的实例。</li>\n</ul>\n<h4>（3）请求（Request）</h4>\n<ul>\n  <li><strong>特点</strong>：仅适用于Web应用程序。每个HTTP请求都会创建一个新的Bean实例，请求结束后，该实例会被销毁。</li>\n  <li><strong>适用场景</strong>：处理单个HTTP请求相关的业务逻辑，如记录请求的日志信息等。</li>\n</ul>\n<h4>（4）会话（Session）</h4>\n<ul>\n  <li><strong>特点</strong>：仅适用于Web应用程序。每个HTTP会话会创建一个新的Bean实例，会话结束后，该实例会被销毁。</li>\n  <li><strong>适用场景</strong>：存储用户会话期间的信息，如用户的购物车信息等。</li>\n</ul>\n<h4>（5）全局会话（Global Session）</h4>\n<ul>\n  <li><strong>特点</strong>：仅适用于Portlet应用程序。在Portlet的全局会话中，每个全局会话会创建一个新的Bean实例。</li>\n  <li><strong>适用场景</strong>：Portlet应用程序中，用于在不同的Portlet之间共享全局会话信息。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<p>以下是使用XML配置和注解配置设置Bean作用域的示例：</p>\n<h4>XML配置</h4>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"singletonBean\" class=\"com.example.SingletonBean\" scope=\"singleton\"/>\n&#x3C;bean id=\"prototypeBean\" class=\"com.example.PrototypeBean\" scope=\"prototype\"/>\n</code></pre>\n<h4>注解配置</h4>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\n\n@Configuration\npublic class AppConfig {\n\n    @Bean\n    @Scope(\"singleton\")\n    public SingletonBean singletonBean() {\n        return new SingletonBean();\n    }\n\n    @Bean\n    @Scope(\"prototype\")\n    public PrototypeBean prototypeBean() {\n        return new PrototypeBean();\n    }\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆单例和原型作用域</h4>\n<ul>\n  <li>误区：认为所有的Bean都应该使用单例作用域，忽略了有状态Bean需要使用原型作用域。</li>\n  <li>纠正：根据Bean是否需要维护状态来选择合适的作用域，有状态的Bean应使用原型作用域。</li>\n</ul>\n<h4>（2）在非Web应用中使用请求、会话作用域</h4>\n<ul>\n  <li>误区：在非Web应用中配置请求、会话作用域的Bean，导致应用启动报错。</li>\n  <li>纠正：请求、会话和全局会话作用域仅适用于Web应用程序，非Web应用只能使用单例和原型作用域。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Spring Bean支持以下几种作用域：</p>\n<ul>\n  <li><strong>单例（Singleton）</strong>：Spring IoC容器中只会创建该Bean的一个实例，所有对该Bean的请求都会返回同一个实例，适用于无状态的Bean。</li>\n  <li><strong>原型（Prototype）</strong>：每次从容器中获取Bean时，都会创建一个新的实例，适用于有状态的Bean。</li>\n  <li><strong>请求（Request）</strong>：仅适用于Web应用程序，每个HTTP请求都会创建一个新的Bean实例，请求结束后，该实例会被销毁，用于处理单个HTTP请求相关的业务逻辑。</li>\n  <li><strong>会话（Session）</strong>：仅适用于Web应用程序，每个HTTP会话会创建一个新的Bean实例，会话结束后，该实例会被销毁，用于存储用户会话期间的信息。</li>\n  <li><strong>全局会话（Global Session）</strong>：仅适用于Portlet应用程序，在Portlet的全局会话中，每个全局会话会创建一个新的Bean实例，用于在不同的Portlet之间共享全局会话信息。</li>\n</ul>\n<p>在使用时，需要根据具体的业务需求选择合适的作用域，同时要注意不同作用域的适用场景，避免出现混淆和错误配置。</p>","more_ask":"<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>能否详细解释一下单例和原型的区别？</strong></p>\n    <ul>\n      <li>提示：考虑实例创建的数量和生命周期管理。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在什么情况下选择使用会话作用域？</strong></p>\n    <ul>\n      <li>提示：想想web应用中与用户会话的关系。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Spring如何管理和配置不同作用域的Bean？</strong></p>\n    <ul>\n      <li>提示：关注注解或XML配置的使用。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>谈谈请求作用域和会话作用域的实际应用场景。</strong></p>\n    <ul>\n      <li>提示：可以举一些具体的业务场景。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果需要一个多线程环境中的单例Bean，你会如何处理？</strong></p>\n    <ul>\n      <li>提示：考虑线程安全和锁机制。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Spring中如何实现和支持自定义作用域？</strong></p>\n    <ul>\n      <li>提示：讨论Spring容器的扩展性。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>可以解释一下“作用域”在Spring中是如何影响Bean获取和注入的流程的吗？</strong></p>\n    <ul>\n      <li>提示：关注实例化、注入的时机和类型。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在配置中，作用域的设置对性能有什么影响？</strong></p>\n    <ul>\n      <li>提示：思考不同作用域对资源使用的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果一个Bean依赖于另一个具有原型作用域的Bean，那么该如何管理依赖？</strong></p>\n    <ul>\n      <li>提示：考虑依赖注入方式的选择。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Spring的作用域是否支持跨多个Http请求的Bean？如果支持，如何实现？</strong></p>\n    <ul>\n      <li>提示：考虑使用@Scope注解与SessionScoped。</li>\n    </ul>\n  </li>\n</ol>","mindmap":"mindmap\n  root((Spring Bean作用域))\n    singleton\n      默认作用域\n      整个应用共享一个实例\n    prototype\n      每次获取都创建新实例\n      适用于需要多个不同实例的场景\n    request\n      Web应用中每个HTTP请求创建一个实例\n      仅在当前HTTP请求内有效\n    session\n      Web应用中每个HTTP会话创建一个实例\n      在一个会话内共享，不同会话间不共享\n    application\n      Web应用中整个上下文共享一个实例\n      跨多个请求和会话共享数据\n    websocket\n      WebSocket连接对应一个实例","keynote":"- singleton：默认作用域；整个应用程序共享单个实例。\n- prototype：每次从容器获取时创建新实例；适合需多实例场景。\n- request：Web应用中每HTTP请求一个实例；仅在当前请求内有效。\n- session：Web应用中每会话一个实例；同一会话共享，不同会话独立。\n- application：Web应用全局共享一个实例；跨请求与会话共享。\n- websocket：WebSocket连接对应单独一个Bean实例。","group_id":17,"kps":["基础知识"],"years":[2024,2023],"corps":["蚂蚁集团"]}}