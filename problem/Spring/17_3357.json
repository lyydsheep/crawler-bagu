{
  "success": true,
  "data": {
    "id": 3357,
    "name": "<p>Spring Bean 默认是单例还是多例?</p>",
    "options": null,
    "answer": "<p>在 Spring 中，默认情况下，Spring Bean 是单例（singleton）作用域。这意味着 Spring 容器在创建 Bean 时只会创建一个实例，不同的请求会共享同一个实例。</p>\n<p>如果需要创建多例（prototype）作用域的 Bean，可以在配置 Bean 时指定其作用域为 <code>prototype</code>，例如使用注解 <code>@Scope(\"prototype\")</code> 或在 XML 配置文件中设置相应的属性。</p>\n<p>简单总结：</p>\n<ul>\n  <li>默认作用域：单例（singleton）</li>\n  <li>多例作用域：需要显式指定（prototype）</li>\n</ul>",
    "type": 6,
    "level": 1,
    "freq": 0.006245121,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring Bean 默认是单例还是多例？</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对 Spring Bean 作用域概念的理解。</li>\n      <li>清楚 Spring Bean 默认的作用域类型。</li>\n      <li>了解单例和多例作用域的特点及区别。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Spring Bean 作用域</h4>\n<p>Spring 中的 Bean 作用域定义了 Bean 的生命周期和实例化方式。常见的作用域有单例（singleton）、多例（prototype）、请求（request）、会话（session）等。</p>\n<h4>（2）单例作用域</h4>\n<p>单例作用域的 Bean 在 Spring 容器中仅存在一个实例，所有对该 Bean 的请求都会返回同一个实例。</p>\n<h4>（3）多例作用域</h4>\n<p>多例作用域的 Bean 在每次请求时都会创建一个新的实例。</p>\n<h3>3. 解析</h3>\n<h4>（1）默认作用域</h4>\n<p>Spring Bean 默认的作用域是单例（singleton）。当在 Spring 配置文件或使用注解定义一个 Bean 时，如果不指定作用域，Spring 会将其创建为单例 Bean。</p>\n<h4>（2）单例作用域的优点</h4>\n<ul>\n  <li>节省内存：由于只存在一个实例，避免了重复创建对象带来的内存开销。</li>\n  <li>方便管理：便于对共享资源进行集中管理和控制。</li>\n</ul>\n<h4>（3）单例作用域的缺点</h4>\n<ul>\n  <li>线程安全问题：如果单例 Bean 中包含可变状态，多个线程同时访问可能会导致线程安全问题。</li>\n</ul>\n<h4>（4）多例作用域的使用场景</h4>\n<p>当 Bean 包含可变状态，且需要保证每个请求都有独立的状态时，适合使用多例作用域。</p>\n<h3>4. 示例代码</h3>\n<h4>（1）使用 XML 配置定义单例 Bean</h4>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"myBean\" class=\"com.example.MyBean\"/>\n</code></pre>\n<p>这里没有指定作用域，默认是单例作用域。</p>\n<h4>（2）使用注解定义单例 Bean</h4>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Component;\n\n@Component\npublic class MyBean {\n    // 类的具体实现\n}\n</code></pre>\n<p>同样，这里默认也是单例作用域。</p>\n<h4>（3）指定多例作用域</h4>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Scope;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(\"prototype\")\npublic class MyPrototypeBean {\n    // 类的具体实现\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）认为默认是多例</h4>\n<p>\n  误区：错误地认为 Spring Bean 默认是多例，没有掌握 Spring Bean 默认作用域的知识。\n  纠正：明确 Spring Bean 默认作用域是单例。\n</p>\n<h4>（2）混淆单例和多例的使用场景</h4>\n<p>\n  误区：不清楚在什么情况下应该使用单例或多例作用域。\n  纠正：理解单例适合无状态或共享资源的场景，多例适合有可变状态且需要独立状态的场景。\n</p>\n<h3>6. 总结回答</h3>\n<p>Spring Bean 默认是单例（singleton）。当在 Spring 中定义一个 Bean 时，如果不特别指定其作用域，Spring 容器会将该 Bean 创建为单例，即整个 Spring 容器中只会存在一个该 Bean 的实例，所有对该 Bean 的请求都会返回这个唯一的实例。</p>\n<p>单例作用域的优点是可以节省内存和方便管理，但可能存在线程安全问题。如果 Bean 包含可变状态，且需要保证每个请求都有独立的状态，可将 Bean 的作用域指定为多例（prototype），这样每次请求该 Bean 时都会创建一个新的实例。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>什么是Spring Bean的作用域？</strong><br>提示：解释不同的作用域，如单例、原型、请求、会话等。</p>\n  </li>\n  <li>\n    <p><strong>Spring Bean的生命周期是怎样的？</strong><br>提示：讨论Bean的初始化、销毁以及相关的回调方法。</p>\n  </li>\n  <li>\n    <p><strong>如何配置Spring Bean的作用域？</strong><br>提示：可以涉及XML配置、注解方式，以及在应用程序上下文中的使用。</p>\n  </li>\n  <li>\n    <p><strong>在实际项目中，单例和多例Bean各适用于什么场景？</strong><br>提示：阐述选择其中一种范围的理由，考虑性能与资源管理。</p>\n  </li>\n  <li>\n    <p><strong>如何确保线程安全的单例Bean？</strong><br>提示：讨论使用同步、线程池或者设计模式（如双重检查锁定）。</p>\n  </li>\n  <li>\n    <p><strong>原型Bean的使用场景与性能开销有哪些？</strong><br>提示：说明在什么情况下使用原型Bean合适以及带来的资源负担。</p>\n  </li>\n  <li>\n    <p><strong>Spring中@Lazy注解的作用是什么？</strong><br>提示：讨论懒加载与Bean的创建时间。</p>\n  </li>\n  <li>\n    <p><strong>如果需要多个线程共享同一个Bean实例，应该怎么处理？</strong><br>提示：涉及状态管理和数据一致性问题。</p>\n  </li>\n  <li>\n    <p><strong>Spring中如何处理Bean的依赖注入？</strong><br>提示：讨论构造器注入、Setter注入和接口注入的区别。</p>\n  </li>\n  <li>\n    <p><strong>BeanPostProcessor在Spring中的作用是什么？</strong><br>提示：讲述如何自定义Bean的初始化及处理过程。</p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Spring Bean作用域))\n    默认情况\n      单例（singleton）\n    非默认情况\n      多例（prototype）\n        指定方式\n          @Scope(\"prototype\")\n          XML配置",
    "keynote": "- Spring Bean 默认为单例（singleton）作用域。\n- 单例作用域下，整个应用上下文共享同一个Bean实例。\n- 创建多例（prototype）作用域的Bean需要显式指定。\n- 可以通过注解`@Scope(\"prototype\")`或XML配置来设置多例作用域。",
    "group_id": 17,
    "kps": [
      "基础知识"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "网易",
      "阿里菜鸟",
      "高德地图",
      "CVTE视源股份",
      "字节跳动",
      "百度"
    ]
  }
}