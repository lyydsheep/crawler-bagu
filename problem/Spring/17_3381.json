{
  "success": true,
  "data": {
    "id": 3381,
    "name": "<p>解释一下Spring 循环依赖?</p>",
    "options": null,
    "answer": "<p>Spring 循环依赖问题是指在 Spring 的依赖注入中，当两个或多个 Bean 相互依赖时，可能会导致 Spring 容器无法正确创建这些 Bean。这种情况会引发如下几个问题：</p>\n<h3>1. 循环依赖的类型</h3>\n<ul>\n  <li><strong>构造器循环依赖</strong>：例如，A 类依赖 B 类的构造函数，而 B 类又依赖 A 类的构造函数。在这种情况下，Spring 会无法创建这两个类的实例。</li>\n  <li><strong>属性循环依赖</strong>：这发生在 Bean 的属性注入中，A 类有一个属性是 B 类，而 B 类又有一个属性是 A 类。Spring 可以解决属性注入的循环依赖问题，但在构造器注入中则无法解决。</li>\n</ul>\n<h3>2. Spring 如何解决循环依赖</h3>\n<ul>\n  <li><strong>一级缓存</strong>：Spring 容器在创建 Bean 的过程中使用一个缓存（一级缓存）来存储已经创建的 Bean。如果 A 正在创建 B，B 还未完全初始化，Spring 可以将 A 放入缓存，然后在需要时返回给依赖的代码。</li>\n  <li><strong>二级缓存</strong>：Spring 还维护一个二级缓存，主要用于单例 Bean。在创建一个 Bean 时，如果最终发现它需要依赖的 Bean 尚未完全构造，Spring 将可以从缓存中获取该 Bean 的引用。</li>\n</ul>\n<h3>3. 实际代码示例</h3>\n<p>假设有两个类 A 和 B，如下所示：</p>\n<pre><code class=\"language-java\">@Component\npublic class A {\n    @Autowired\n    private B b;\n\n    // A 的其他代码...\n}\n\n@Component\npublic class B {\n    @Autowired\n    private A a;\n\n    // B 的其他代码...\n}\n</code></pre>\n<p>在这种情况下，如果你使用构造器注入，Spring 就会因为无法完全初始化 A 和 B 而导致异常。如果使用属性注入，Spring 可能会在一个 Bean 中填充另一个 Bean 的引用，借助于一级和二级缓存来完成依赖。</p>\n<h3>4. 解决方法</h3>\n<ul>\n  <li><strong>重构代码</strong>：可以通过修改代码结构，避免循环依赖。</li>\n  <li><strong>使用 @Lazy 注解</strong>：可以在 Bean 的注入点使用 @Lazy 注解，以延迟加载依赖 Bean，从而避免直接引用。</li>\n  <li><strong>引入中介类</strong>：将依赖关系引入到一个更抽象的中介类中，从而打破循环引用。</li>\n</ul>\n<h3>总结</h3>\n<p>循环依赖是 Spring 的一个重要问题，了解和解决循环依赖的方式对于构建健壮的应用程序至关重要。正确的设计原则和使用合适的 Spring 特性可以有效避免这一问题。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0156128,
    "analysis": "<h3><strong>1. 题目核心</strong></h3>\n<ul>\n  <li><strong>问题</strong>：解释Spring循环依赖。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring Bean创建过程的理解。</li>\n      <li>循环依赖的概念及产生场景。</li>\n      <li>Spring解决循环依赖的机制。</li>\n      <li>无法解决循环依赖的情况。</li>\n    </ul>\n  </li>\n</ul>\n<h3><strong>2. 背景知识</strong></h3>\n<h4><strong>（1）Spring Bean创建过程</strong></h4>\n<p>Spring创建Bean一般经历实例化（为Bean分配内存空间）、属性填充（设置Bean的属性值）、初始化（调用初始化方法）等阶段。</p>\n<h4><strong>（2）循环依赖的定义</strong></h4>\n<p>循环依赖指的是多个Bean之间相互依赖，形成一个闭环。例如，Bean A依赖Bean B，Bean B又依赖Bean A。</p>\n<h3><strong>3. 解析</strong></h3>\n<h4><strong>（1）循环依赖的产生场景</strong></h4>\n<p>在Spring应用中，当多个Bean之间存在相互依赖关系时就可能产生循环依赖。比如有如下代码：</p>\n<pre><code class=\"language-java\">@Component\npublic class A {\n    @Autowired\n    private B b;\n    // 其他代码\n}\n\n@Component\npublic class B {\n    @Autowired\n    private A a;\n    // 其他代码\n}\n</code></pre>\n<p>这里A依赖B，B又依赖A，就形成了循环依赖。</p>\n<h4><strong>（2）Spring解决循环依赖的机制</strong></h4>\n<p>Spring通过三级缓存来解决循环依赖问题：</p>\n<ul>\n  <li><strong>一级缓存（singletonObjects）</strong>：存储已经完全创建好的单例Bean实例，这些Bean已经完成了实例化、属性填充和初始化。</li>\n  <li><strong>二级缓存（singletonFactories）</strong>：存储单例Bean的工厂对象，这些工厂对象可以用来创建早期的Bean实例。</li>\n  <li><strong>三级缓存（earlySingletonObjects）</strong>：存储早期暴露的单例Bean实例，这些Bean只完成了实例化，还未进行属性填充和初始化。</li>\n</ul>\n<p>当创建一个单例Bean时，Spring会先将其对应的ObjectFactory放入三级缓存。如果在创建过程中发现有其他Bean依赖当前Bean，会从三级缓存中获取对应的ObjectFactory，调用其getObject方法得到早期暴露的Bean实例并放入二级缓存。当Bean完全创建好后，会从二级缓存移除并放入一级缓存。</p>\n<p>以A和B的循环依赖为例：</p>\n<ul>\n  <li>Spring开始创建A，将A对应的ObjectFactory放入三级缓存。</li>\n  <li>对A进行属性填充时，发现依赖B，开始创建B。</li>\n  <li>Spring将B对应的ObjectFactory放入三级缓存，对B进行属性填充时，发现依赖A。</li>\n  <li>从三级缓存获取A的ObjectFactory，得到早期暴露的A实例放入二级缓存，将A注入到B中，完成B的创建，将B放入一级缓存。</li>\n  <li>继续完成A的属性填充，将B注入到A中，完成A的创建，将A放入一级缓存。</li>\n</ul>\n<h4><strong>（3）无法解决循环依赖的情况</strong></h4>\n<ul>\n  <li><strong>构造器注入的循环依赖</strong>：如果Bean之间的循环依赖是通过构造器注入的，Spring无法解决。因为在实例化阶段就需要依赖的Bean，而此时还没有早期暴露的Bean实例。例如：</li>\n</ul>\n<pre><code class=\"language-java\">@Component\npublic class A {\n    private B b;\n    @Autowired\n    public A(B b) {\n        this.b = b;\n    }\n    // 其他代码\n}\n\n@Component\npublic class B {\n    private A a;\n    @Autowired\n    public B(A a) {\n        this.a = a;\n    }\n    // 其他代码\n}\n</code></pre>\n<ul>\n  <li><strong>多例Bean的循环依赖</strong>：对于多例Bean，Spring不会进行循环依赖的处理，因为每次请求都会创建一个新的实例，无法使用缓存来解决循环依赖。</li>\n</ul>\n<h3><strong>4. 常见误区</strong></h3>\n<h4><strong>（1）认为Spring能解决所有循环依赖</strong></h4>\n<ul>\n  <li>误区：觉得Spring有强大的解决循环依赖能力，能处理所有循环依赖场景。</li>\n  <li>纠正：Spring只能解决基于setter注入的单例Bean的循环依赖，构造器注入和多例Bean的循环依赖无法解决。</li>\n</ul>\n<h4><strong>（2）对三级缓存理解不清</strong></h4>\n<ul>\n  <li>误区：混淆三级缓存的作用，不清楚每个缓存存储的内容和使用时机。</li>\n  <li>纠正：明确一级缓存存储完全创建好的Bean，二级缓存存储早期暴露的Bean实例，三级缓存存储Bean的工厂对象。</li>\n</ul>\n<h4><strong>（3）忽略循环依赖的性能影响</strong></h4>\n<ul>\n  <li>误区：只关注Spring能否解决循环依赖，忽略了循环依赖可能带来的性能问题。</li>\n  <li>纠正：循环依赖会增加Bean创建的复杂度和时间，在设计时应尽量避免。</li>\n</ul>\n<h3><strong>5. 总结回答</strong></h3>\n<p>Spring循环依赖指的是多个Bean之间相互依赖形成闭环的情况，如Bean A依赖Bean B，Bean B又依赖Bean A。Spring主要通过三级缓存机制解决基于setter注入的单例Bean的循环依赖。三级缓存分别是存储完全创建好单例Bean的一级缓存（singletonObjects）、存储早期暴露单例Bean实例的二级缓存（earlySingletonObjects）和存储单例Bean工厂对象的三级缓存（singletonFactories）。</p>\n<p>不过，Spring无法解决构造器注入的循环依赖和多例Bean的循环依赖。因为构造器注入在实例化阶段就需要依赖的Bean，而此时还没有早期暴露的Bean实例；多例Bean每次请求都会创建新实例，无法使用缓存解决循环依赖。并且，循环依赖会增加Bean创建的复杂度和时间，在设计时应尽量避免。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>什么是Spring中的单例和原型作用域？</strong><br>提示：对比这两种作用域时，考虑它们对循环依赖的影响。</p>\n  </li>\n  <li>\n    <p><strong>Spring如何解决循环依赖问题？</strong><br>提示：可以讨论构造器注入和setter注入的不同，以及Spring使用的不同策略。</p>\n  </li>\n  <li>\n    <p><strong>实际项目中遇到循环依赖的场景举例。</strong><br>提示：可以结合具体的业务场景，说明如何识别并解决问题。</p>\n  </li>\n  <li>\n    <p><strong>如何配置Spring Bean的依赖注入？</strong><br>提示：询问XML配置与Java注解方式的区别，尤其在处理循环依赖时的表现。</p>\n  </li>\n  <li>\n    <p><strong>Bean的加载顺序在解决循环依赖中有多大影响？</strong><br>提示：考虑Spring的初始化过程，返回未初始化Bean的情况。</p>\n  </li>\n  <li>\n    <p><strong>Spring Boot在处理循环依赖方面有何特别之处？</strong><br>提示：考虑Spring Boot使用的自动配置及其对Bean生命周期的影响。</p>\n  </li>\n  <li>\n    <p><strong>在构建微服务时，如何避免循环依赖问题？</strong><br>提示：可以谈谈服务划分、接口设计及通信方式。</p>\n  </li>\n  <li>\n    <p><strong>循环依赖对性能可能造成哪些影响？</strong><br>提示：考虑初始化所需的资源和时间，以及对可维护性的影响。</p>\n  </li>\n  <li>\n    <p><strong>在单元测试中，如何模拟和解决循环依赖？</strong><br>提示：考虑使用Mockito或JUnit如何帮助解决依赖注入问题。</p>\n  </li>\n  <li>\n    <p><strong>你对Spring的@Lazy注解有什么了解？它在循环依赖中扮演什么角色？</strong><br>提示：讨论懒加载如何影响Bean的创建及依赖注入过程。</p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Spring 循环依赖问题))\n    循环依赖的类型\n      构造器循环依赖\n      属性循环依赖\n    Spring 如何解决循环依赖\n      一级缓存\n      二级缓存\n    解决方法\n      重构代码\n      使用 @Lazy 注解\n      引入中介类",
    "keynote": "- 循环依赖指两个或多个 Bean 相互依赖，导致 Spring 容器无法正确创建这些 Bean。\n- 循环依赖分为构造器循环依赖和属性循环依赖两种类型。\n- 构造器循环依赖在 Spring 中无法解决；属性循环依赖可以通过缓存机制解决。\n- Spring 利用一级缓存存储已创建但未完全初始化的 Bean，二级缓存用于单例 Bean 的引用获取。\n- 解决循环依赖的方法包括：重构代码、使用 @Lazy 注解延迟加载依赖以及引入中介类来打破循环。",
    "group_id": 17,
    "kps": [
      "控制反转（IoC）与依赖注入（DI）"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "小红书",
      "京东",
      "腾讯云智",
      "美团",
      "南昌龙孚信息技术",
      "数禾科技",
      "快手",
      "科大讯飞",
      "猿辅导",
      "贝壳",
      "用友",
      "滴滴",
      "字节跳动"
    ]
  }
}