{
  "success": true,
  "data": {
    "id": 32404,
    "name": "<p>拦截器对静态资源访问是否有效</p>",
    "options": null,
    "answer": "<p>拦截器对静态资源访问默认是有效的，但可以通过配置来控制是否对静态资源生效。</p>\n<h3>默认情况</h3>\n<p>在Spring框架里，拦截器默认会对所有请求进行拦截，这其中就包含了对静态资源的访问请求。当我们配置拦截器时，如果没有特别排除静态资源的路径，那么静态资源的访问也会被拦截器处理。例如，下面是一个简单的拦截器配置示例：</p>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new MyInterceptor())\n               .addPathPatterns(\"/**\"); // 拦截所有请求\n    }\n}\n</code></pre>\n<p>在这个例子中，<code>addPathPatterns(\"/**\")</code> 表示拦截所有请求，所以静态资源的访问也会被 <code>MyInterceptor</code> 拦截。</p>\n<h3>排除静态资源</h3>\n<p>若不想让拦截器对静态资源访问生效，可在配置拦截器时排除静态资源的路径。Spring Boot项目中，静态资源默认存放在 <code>classpath:/static</code>、<code>classpath:/public</code>、<code>classpath:/resources</code>、<code>classpath:/META-INF/resources</code> 这些目录下。我们可以通过 <code>excludePathPatterns</code> 方法来排除这些静态资源路径，示例如下：</p>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new MyInterceptor())\n               .addPathPatterns(\"/**\")\n               .excludePathPatterns(\"/static/**\", \"/public/**\", \"/resources/**\", \"/META-INF/resources/**\");\n    }\n}\n</code></pre>\n<p>在这个配置里，<code>excludePathPatterns</code> 方法排除了静态资源的路径，这样拦截器就不会对静态资源的访问进行拦截了。</p>\n<p>综上所述，拦截器对静态资源访问默认有效，但可通过配置排除静态资源路径，使拦截器不对静态资源访问生效。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0007806401,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring框架中拦截器对静态资源访问是否有效。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring拦截器机制的理解。</li>\n      <li>对Spring静态资源处理机制的理解。</li>\n      <li>拦截器配置与静态资源配置之间的关系。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Spring拦截器</h4>\n<ul>\n  <li>Spring拦截器是Spring框架提供的一种机制，用于在请求处理的前后进行一些额外的操作，如权限验证、日志记录等。它通过实现<code>HandlerInterceptor</code>接口或继承<code>HandlerInterceptorAdapter</code>类来定义，然后在配置类中进行注册。</li>\n</ul>\n<h4>（2）Spring静态资源处理</h4>\n<ul>\n  <li>Spring框架支持静态资源的处理，如HTML、CSS、JavaScript、图片等。可以通过配置<code>ResourceHandlerRegistry</code>来指定静态资源的位置和映射路径。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）默认情况</h4>\n<ul>\n  <li>默认情况下，拦截器会对静态资源访问生效。因为Spring的拦截器是基于请求的URL进行拦截的，如果没有对静态资源的访问路径进行特殊配置，拦截器会拦截所有匹配的URL请求，包括静态资源的请求。</li>\n</ul>\n<h4>（2）配置排除静态资源</h4>\n<ul>\n  <li>为了避免拦截器对静态资源的不必要拦截，可以在配置拦截器时，通过<code>excludePathPatterns</code>方法排除静态资源的访问路径。例如：</li>\n</ul>\n<pre><code class=\"language-java\">@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new MyInterceptor())\n               .addPathPatterns(\"/**\")\n               .excludePathPatterns(\"/static/**\");\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/static/**\")\n               .addResourceLocations(\"classpath:/static/\");\n    }\n}\n</code></pre>\n<p>在上述代码中，<code>excludePathPatterns(\"/static/**\")</code>表示排除以<code>/static/</code>开头的请求，即静态资源请求，这样拦截器就不会对静态资源访问进行拦截。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-java\">import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n// 自定义拦截器\nclass MyInterceptor implements org.springframework.web.servlet.HandlerInterceptor {\n    @Override\n    public boolean preHandle(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"Pre - handling request\");\n        return true;\n    }\n}\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new MyInterceptor())\n               .addPathPatterns(\"/**\")\n               .excludePathPatterns(\"/static/**\");\n    }\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/static/**\")\n               .addResourceLocations(\"classpath:/static/\");\n    }\n}\n</code></pre>\n<p>在这个示例中，<code>MyInterceptor</code>是自定义的拦截器，<code>WebConfig</code>类进行了拦截器和静态资源的配置。通过<code>excludePathPatterns(\"/static/**\")</code>排除了静态资源的拦截。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为拦截器默认不拦截静态资源</h4>\n<ul>\n  <li>误区：以为Spring拦截器默认不会对静态资源进行拦截。</li>\n  <li>纠正：默认情况下，拦截器会对所有匹配的URL请求进行拦截，包括静态资源请求，需要手动配置排除。</li>\n</ul>\n<h4>（2）配置错误</h4>\n<ul>\n  <li>误区：在配置排除静态资源路径时，路径配置错误，导致拦截器仍然拦截静态资源。</li>\n  <li>纠正：确保<code>excludePathPatterns</code>方法中的路径与<code>addResourceHandlers</code>方法中配置的静态资源映射路径一致。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“在Spring框架中，默认情况下拦截器对静态资源访问是有效的，因为拦截器基于请求的URL进行拦截，若未对静态资源访问路径特殊配置，会拦截所有匹配的URL请求，包括静态资源请求。</p>\n<p>不过，可以通过在配置拦截器时使用<code>excludePathPatterns</code>方法排除静态资源的访问路径，避免拦截器对静态资源的不必要拦截。例如在配置类中，使用<code>registry.addInterceptor(new MyInterceptor()).addPathPatterns(\"/**\").excludePathPatterns(\"/static/**\")</code>来排除以<code>/static/</code>开头的静态资源请求。”</p>",
    "more_ask": "<h3>1. 如何配置Spring拦截器使其对静态资源生效？</h3>\n<p>提示：思考Spring配置文件或者Java配置类中与拦截器和静态资源相关的配置项，比如<code>WebMvcConfigurer</code>接口的使用。</p>\n<h3>2. 拦截器对静态资源生效后，会对系统性能产生什么影响？</h3>\n<p>提示：从拦截器的执行流程、静态资源的访问特点等方面分析，例如拦截器的前置、后置处理逻辑对静态资源加载时间的影响。</p>\n<h3>3. 若拦截器对静态资源生效，如何在拦截器中区分请求的是静态资源还是动态资源？</h3>\n<p>提示：可以从请求的URL特征、请求头信息等方面去考虑，比如静态资源的URL通常有特定的文件扩展名。</p>\n<h3>4. 当拦截器对静态资源生效时，如何优化以减少不必要的拦截操作？</h3>\n<p>提示：结合拦截器的配置规则，如使用排除路径的方式，或者根据请求的某些特征进行判断后再决定是否执行拦截逻辑。</p>\n<h3>5. 在Spring Boot项目中，拦截器对静态资源访问的配置和传统Spring项目有什么不同？</h3>\n<p>提示：关注Spring Boot的自动配置特性，以及它在静态资源处理和拦截器配置上的简化方式，比如<code>application.properties</code>或<code>application.yml</code>文件的作用。</p>",
    "mindmap": "mindmap\n  root((拦截器对静态资源访问的配置))\n    默认情况\n      Spring框架拦截器默认拦截所有请求\n      未排除静态资源路径时静态资源访问会被拦截\n    排除静态资源\n      Spring Boot静态资源默认存放目录\n      用excludePathPatterns方法排除静态资源路径",
    "keynote": "拦截器对静态资源访问默认有效\nSpring框架拦截器默认拦截所有请求，未排除路径时静态资源访问被拦截\nSpring Boot静态资源默认存于classpath:/static、classpath:/public、classpath:/resources、classpath:/META-INF/resources\n可用excludePathPatterns方法排除静态资源路径使拦截器不拦截静态资源访问",
    "group_id": 17,
    "kps": [
      "基础知识",
      "MVC"
    ],
    "years": [
      2024
    ],
    "corps": [
      "小米"
    ]
  }
}