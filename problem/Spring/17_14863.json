{
  "success": true,
  "data": {
    "id": 14863,
    "name": "<p>三级缓存无法解决哪种循环依赖</p>",
    "options": null,
    "answer": "<p>三级缓存无法解决存在AOP代理的构造器循环依赖。</p>\n<p>在Spring中，三级缓存分别是：</p>\n<ul>\n  <li>一级缓存（singletonObjects）：用于存放完全初始化好的单例Bean，这些Bean可以直接使用。</li>\n  <li>二级缓存（singletonFactories）：存放早期暴露的单例Bean对象工厂，当需要提前获取Bean时可以从这里获取。</li>\n  <li>三级缓存（earlySingletonObjects）：存放提前暴露的单例Bean，这些Bean还未完成初始化。</li>\n</ul>\n<p>对于普通的属性注入循环依赖，Spring通过三级缓存机制可以解决。当一个Bean在创建过程中，会先将其对应的ObjectFactory放入三级缓存中，若其他Bean需要依赖它，就可以从三级缓存中获取早期暴露的Bean来完成依赖注入。</p>\n<p>然而，当存在构造器循环依赖且涉及AOP代理时，问题就变得复杂了。因为构造器注入是在Bean实例化阶段就需要确定依赖的Bean，而此时Bean还未创建完成，无法将其放入三级缓存。并且AOP代理通常是在Bean初始化后进行的，在构造器注入时无法提供代理对象。所以，当两个或多个Bean通过构造器相互依赖，并且其中有Bean需要进行AOP代理时，三级缓存无法解决这种循环依赖问题。</p>",
    "type": 6,
    "level": 3,
    "freq": 0.00234192,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：三级缓存无法解决哪种循环依赖。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring三级缓存原理的理解。</li>\n      <li>对循环依赖类型的认识。</li>\n      <li>明确三级缓存能解决和不能解决的循环依赖情况。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Spring三级缓存</h4>\n<p>Spring通过三级缓存来解决部分循环依赖问题。三级缓存分别是：</p>\n<ul>\n  <li>一级缓存（singletonObjects）：存储已经完全初始化好的单例Bean。</li>\n  <li>二级缓存（singletonFactories）：存储提前暴露的单例Bean工厂。</li>\n  <li>三级缓存（earlySingletonObjects）：存储提前暴露的单例Bean实例。</li>\n</ul>\n<h4>（2）循环依赖</h4>\n<p>循环依赖指的是多个Bean之间相互依赖，形成一个闭环。例如，Bean A依赖Bean B，Bean B又依赖Bean A。</p>\n<h3>3. 解析</h3>\n<h4>（1）三级缓存能解决的循环依赖</h4>\n<p>对于单例Bean的构造函数注入以外的循环依赖，三级缓存通常可以解决。以属性注入为例，当创建Bean A时，在实例化后但未完全初始化时，会将其提前暴露到三级缓存中。当Bean B依赖Bean A时，可以从三级缓存中获取到Bean A的早期引用，从而完成Bean B的创建，进而完成Bean A的创建。</p>\n<h4>（2）三级缓存无法解决的循环依赖</h4>\n<ul>\n  <li><strong>构造函数循环依赖</strong>：当多个Bean通过构造函数相互依赖时，三级缓存无法解决。因为在实例化Bean时，需要先确定其构造函数的参数，如果构造函数的参数是另一个正在创建的Bean，就会陷入死循环。例如，Bean A的构造函数需要Bean B，Bean B的构造函数需要Bean A，在创建Bean A时，需要先创建Bean B，但创建Bean B又需要先创建Bean A，这样就无法完成任何一个Bean的创建。</li>\n  <li><strong>原型Bean的循环依赖</strong>：对于原型（prototype）作用域的Bean，Spring不会缓存这些Bean，因为每次请求都会创建一个新的实例。所以当原型Bean之间存在循环依赖时，Spring无法通过三级缓存来解决，会抛出BeanCurrentlyInCreationException异常。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<h4>构造函数循环依赖示例</h4>\n<pre><code class=\"language-java\">@Component\npublic class A {\n    private B b;\n\n    public A(B b) {\n        this.b = b;\n    }\n}\n\n@Component\npublic class B {\n    private A a;\n\n    public B(A a) {\n        this.a = a;\n    }\n}\n</code></pre>\n<p>在这个例子中，A和B通过构造函数相互依赖，Spring在启动时会抛出异常，无法解决这种循环依赖。</p>\n<h4>原型Bean循环依赖示例</h4>\n<pre><code class=\"language-java\">@Component\n@Scope(\"prototype\")\npublic class C {\n    private D d;\n\n    public void setD(D d) {\n        this.d = d;\n    }\n}\n\n@Component\n@Scope(\"prototype\")\npublic class D {\n    private C c;\n\n    public void setC(C c) {\n        this.c = c;\n    }\n}\n</code></pre>\n<p>当请求创建C和D时，由于它们是原型Bean，Spring无法通过缓存来解决它们之间的循环依赖。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为三级缓存能解决所有循环依赖</h4>\n<ul>\n  <li>误区：没有认识到构造函数循环依赖和原型Bean循环依赖是三级缓存无法解决的。</li>\n  <li>纠正：明确三级缓存的适用范围，理解构造函数和原型Bean循环依赖的特殊性。</li>\n</ul>\n<h4>（2）混淆不同作用域Bean的处理方式</h4>\n<ul>\n  <li>误区：没有区分单例Bean和原型Bean在处理循环依赖时的差异。</li>\n  <li>纠正：理解Spring对不同作用域Bean的管理机制，特别是原型Bean不使用缓存的特点。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>三级缓存无法解决构造函数循环依赖和原型Bean的循环依赖。对于构造函数循环依赖，由于在实例化Bean时需要确定构造函数的参数，当多个Bean通过构造函数相互依赖时会陷入死循环，无法完成任何一个Bean的创建。而对于原型Bean，Spring不会缓存这些Bean，每次请求都会创建新实例，所以当原型Bean之间存在循环依赖时，Spring无法通过三级缓存来解决，会抛出异常。</p>",
    "more_ask": "<h3>1. 若不使用三级缓存，还有哪些方式可以解决 Spring 中的循环依赖问题？</h3>\n<p>提示：可以从代码层面手动管理对象引用、调整 Bean 的创建逻辑等方面思考。</p>\n<h3>2. 三级缓存解决循环依赖时，在多线程环境下会有什么问题？如何解决？</h3>\n<p>提示：多线程环境下要考虑并发访问缓存、对象创建过程中的线程安全问题，解决方法可从同步机制入手。</p>\n<h3>3. Spring 中不同作用域的 Bean 在循环依赖处理上有什么差异？</h3>\n<p>提示：不同作用域（如单例、原型等）的 Bean 创建和管理机制不同，思考这些差异对循环依赖处理的影响。</p>\n<h3>4. 当循环依赖涉及 AOP 代理时，三级缓存是如何工作的？</h3>\n<p>提示：AOP 代理会改变 Bean 的创建过程，关注三级缓存中存储的对象与代理对象的关系和创建顺序。</p>\n<h3>5. 三级缓存中每个缓存的具体作用和使用场景是什么？</h3>\n<p>提示：分别分析每个缓存存储的内容、在解决循环依赖过程中的调用时机和作用。</p>\n<h3>6. 若循环依赖的 Bean 存在复杂的初始化逻辑，三级缓存还能正常解决吗？为什么？</h3>\n<p>提示：复杂初始化逻辑可能会影响 Bean 的创建和赋值过程，思考这些影响对三级缓存解决循环依赖的作用。</p>\n<h3>7. 如何在代码中模拟 Spring 三级缓存解决循环依赖的过程？</h3>\n<p>提示：可以创建简单的类模拟 Bean，使用集合模拟缓存，实现对象的创建和依赖注入过程。</p>",
    "mindmap": "mindmap\n  root((三级缓存与循环依赖))\n    三级缓存介绍\n      一级缓存(singletonObjects)\n        存放完全初始化好的单例Bean\n      二级缓存(singletonFactories)\n        存放早期暴露的单例Bean对象工厂\n      三级缓存(earlySingletonObjects)\n        存放提前暴露未完成初始化的单例Bean\n    普通属性注入循环依赖\n      三级缓存可解决\n      创建中先将ObjectFactory放入三级缓存\n      其他Bean从三级缓存获取早期暴露Bean完成注入\n    构造器循环依赖且涉及AOP代理\n      三级缓存无法解决\n      构造器注入时Bean未完成创建无法放入三级缓存\n      AOP代理在初始化后进行，构造器注入时无法提供代理对象",
    "keynote": "三级缓存：一级缓存存完全初始化单例Bean；二级缓存存早期暴露单例Bean对象工厂；三级缓存存提前暴露未完成初始化单例Bean\n普通属性注入循环依赖：三级缓存可解决，创建中放ObjectFactory到三级缓存，其他Bean从三级缓存获取早期暴露Bean注入\n构造器循环依赖且涉及AOP代理：三级缓存无法解决，构造器注入时Bean未完成创建无法入缓存，AOP代理初始化后进行，构造器注入时无代理对象",
    "group_id": 17,
    "kps": [
      "控制反转（IoC）与依赖注入（DI）"
    ],
    "years": [
      2025,
      2024,
      2023
    ],
    "corps": [
      "百联全渠道",
      "美团",
      "快手"
    ]
  }
}