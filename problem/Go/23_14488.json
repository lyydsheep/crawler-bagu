{
  "success": true,
  "data": {
    "id": 14488,
    "name": "<p>介绍Go语言的GMP模型</p>",
    "options": null,
    "answer": "<p>Go语言的GMP模型是Go运行时（runtime）调度器的核心，它主要由G、M、P三个组件构成，下面分别介绍这三个组件以及它们之间的协作机制。</p>\n<h3>组件介绍</h3>\n<ul>\n  <li><strong>G（Goroutine）</strong>\n    <ul>\n      <li>Goroutine是Go语言中轻量级的线程实现，由Go运行时管理。与传统的操作系统线程相比，Goroutine的栈内存初始时非常小（通常为2KB），并且可以根据需要动态伸缩，这使得在一个Go程序中可以轻松创建成千上万个Goroutine。</li>\n      <li>每个Goroutine都有自己的栈空间、程序计数器（PC）和一组寄存器，用于保存其执行状态。Goroutine的创建和销毁开销极小，因此可以高效地实现并发编程。</li>\n    </ul>\n  </li>\n  <li><strong>M（Machine）</strong>\n    <ul>\n      <li>M代表操作系统线程，是真正执行计算的实体。每个M都对应一个底层的操作系统线程，它负责执行Goroutine。</li>\n      <li>M需要绑定一个P才能执行Goroutine，当M执行Goroutine时，会从P的本地队列或者全局队列中获取Goroutine来执行。</li>\n    </ul>\n  </li>\n  <li><strong>P（Processor）</strong>\n    <ul>\n      <li>P是处理器，它是连接G和M的桥梁。P包含了运行Goroutine的必要资源，如本地Goroutine队列、调度器等。</li>\n      <li>P的数量在程序启动时由环境变量 <code>GOMAXPROCS</code> 或者 <code>runtime.GOMAXPROCS()</code> 函数来设置，它决定了在同一时刻可以并行执行的Goroutine的最大数量。例如，当 <code>GOMAXPROCS</code> 设置为4时，表示最多有4个M可以同时执行Goroutine。</li>\n    </ul>\n  </li>\n</ul>\n<h3>协作机制</h3>\n<ul>\n  <li><strong>调度流程</strong>\n    <ol>\n      <li><strong>创建Goroutine</strong>：当程序中使用 <code>go</code> 关键字创建一个新的Goroutine时，这个Goroutine会被放入当前P的本地队列中。</li>\n      <li><strong>M获取Goroutine</strong>：M会从绑定的P的本地队列中获取Goroutine来执行。如果本地队列为空，M会尝试从全局队列中获取一批Goroutine到本地队列中。如果全局队列也为空，M会尝试从其他P的本地队列中“偷取”一半的Goroutine到自己的本地队列中，这种机制称为“工作窃取”。</li>\n      <li><strong>Goroutine阻塞</strong>：当一个Goroutine执行阻塞操作（如I/O操作）时，M会将该Goroutine从当前P的本地队列中移除，并将其放入等待队列中。同时，M会与当前P解绑，寻找其他空闲的P继续执行其他Goroutine。当阻塞操作完成后，Goroutine会被重新放入某个P的本地队列中等待执行。</li>\n      <li><strong>调度器平衡</strong>：Go运行时调度器会定期检查各个P的本地队列和全局队列的负载情况，进行调度平衡，确保各个M的负载相对均衡。</li>\n    </ol>\n  </li>\n</ul>\n<h3>优点</h3>\n<ul>\n  <li><strong>高效利用多核处理器</strong>：通过 <code>GOMAXPROCS</code> 可以控制并行执行的Goroutine数量，充分利用多核处理器的计算能力。</li>\n  <li><strong>低开销并发</strong>：Goroutine的创建和销毁开销极小，并且栈内存动态伸缩，使得在一个程序中可以创建大量的Goroutine，实现高效的并发编程。</li>\n  <li><strong>调度灵活</strong>：工作窃取机制和调度器的动态平衡保证了各个M的负载相对均衡，提高了系统的整体性能。</li>\n</ul>",
    "type": 6,
    "level": 2,
    "freq": 0.08652246,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：介绍Go语言的GMP模型。</li>\n  <li><strong>考察点</strong>：对Go语言并发调度模型GMP的理解，包括G、M、P各自的含义、作用以及它们之间的协作机制。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）并发编程需求</h4>\n<p>在现代多核处理器环境下，为了充分利用多核资源，提高程序的并发性能，需要一个高效的并发调度模型。传统的线程模型在创建、销毁和调度线程时会有较大的开销，Go语言为了解决这些问题，设计了GMP模型。</p>\n<h4>（2）相关概念</h4>\n<ul>\n  <li><strong>线程</strong>：操作系统调度的最小单位，线程的创建、销毁和切换需要操作系统内核的参与，开销较大。</li>\n  <li><strong>协程</strong>：一种轻量级的线程，由用户态程序自行管理，创建和销毁的开销较小。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）G（Goroutine）</h4>\n<ul>\n  <li><strong>含义</strong>：Goroutine是Go语言中轻量级的执行单元，类似于协程。它由Go运行时管理，创建和销毁的开销非常小。</li>\n  <li><strong>作用</strong>：每个Goroutine都有自己的栈空间和执行上下文，可以独立执行代码。多个Goroutine可以并发执行，提高程序的并发性能。</li>\n</ul>\n<h4>（2）M（Machine）</h4>\n<ul>\n  <li><strong>含义</strong>：Machine表示操作系统线程，每个M都对应一个操作系统线程。</li>\n  <li><strong>作用</strong>：M是真正执行Goroutine的实体，它负责从P的本地队列或全局队列中获取Goroutine并执行。</li>\n</ul>\n<h4>（3）P（Processor）</h4>\n<ul>\n  <li><strong>含义</strong>：Processor是处理器的抽象，它是G和M之间的桥梁。每个P都有一个本地的Goroutine队列。</li>\n  <li><strong>作用</strong>：P负责调度Goroutine，它会将Goroutine分配给M执行。同时，P还负责管理Goroutine的执行上下文，如栈空间的分配和释放。</li>\n</ul>\n<h4>（4）GMP协作机制</h4>\n<ul>\n  <li><strong>启动阶段</strong>：程序启动时，会创建一定数量的M和P，M和P会进行绑定。</li>\n  <li><strong>调度过程</strong>：当创建一个新的Goroutine时，它会被放入P的本地队列中。M会从P的本地队列中获取Goroutine并执行。如果P的本地队列为空，M会从全局队列中获取Goroutine，或者从其他P的本地队列中“偷取”Goroutine。</li>\n  <li><strong>阻塞和唤醒</strong>：当一个Goroutine发生阻塞（如进行I/O操作）时，M会将该Goroutine挂起，然后从P的本地队列中获取其他Goroutine继续执行。当阻塞的Goroutine可以继续执行时，它会被重新放入P的本地队列中等待调度。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(id int) {\n    fmt.Printf(\"Worker %d starting\\n\", id)\n    time.Sleep(time.Second)\n    fmt.Printf(\"Worker %d done\\n\", id)\n}\n\nfunc main() {\n    for i := 1; i &#x3C;= 3; i++ {\n        go worker(i)\n    }\n    time.Sleep(2 * time.Second)\n    fmt.Println(\"All workers done\")\n}\n</code></pre>\n<ul>\n  <li>在这个例子中，<code>main</code>函数中创建了3个Goroutine，这些Goroutine会被放入P的本地队列中，由M调度执行。</li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆G、M、P的概念</h4>\n<ul>\n  <li>误区：不清楚G、M、P各自的含义和作用，将它们的功能混淆。</li>\n  <li>纠正：明确G是Goroutine，M是操作系统线程，P是处理器的抽象，它们各自有不同的职责。</li>\n</ul>\n<h4>（2）忽视P的作用</h4>\n<ul>\n  <li>误区：只关注G和M，忽略了P在调度中的重要作用。</li>\n  <li>纠正：理解P是G和M之间的桥梁，负责调度Goroutine和管理执行上下文。</li>\n</ul>\n<h4>（3）认为Goroutine和线程一样</h4>\n<ul>\n  <li>误区：将Goroutine等同于传统的线程，没有认识到Goroutine的轻量级特性。</li>\n  <li>纠正：明确Goroutine是轻量级的执行单元，创建和销毁的开销远小于线程。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Go语言的GMP模型是一种高效的并发调度模型，用于管理和调度Goroutine的执行。其中，G（Goroutine）是Go语言中轻量级的执行单元，类似于协程，创建和销毁的开销非常小；M（Machine）表示操作系统线程，是真正执行Goroutine的实体；P（Processor）是处理器的抽象，是G和M之间的桥梁，负责调度Goroutine和管理执行上下文。</p>\n<p>在GMP模型中，程序启动时会创建一定数量的M和P，M和P会进行绑定。当创建一个新的Goroutine时，它会被放入P的本地队列中，M会从P的本地队列中获取Goroutine并执行。如果P的本地队列为空，M会从全局队列中获取Goroutine，或者从其他P的本地队列中“偷取”Goroutine。当一个Goroutine发生阻塞时，M会将该Goroutine挂起，然后从P的本地队列中获取其他Goroutine继续执行。</p>\n<p>需要注意的是，不要混淆G、M、P的概念，要认识到P在调度中的重要作用，同时要明确Goroutine和传统线程的区别，Goroutine是轻量级的执行单元。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      GMP 模型中，M 频繁创建和销毁会带来什么问题，如何解决？\n      提示：思考系统资源开销以及 Go 语言的调度机制如何优化。\n    </p>\n  </li>\n  <li>\n    <p>\n      当 G 进入系统调用时，GMP 模型会进行怎样的调整？\n      提示：关注 M、P 和 G 之间的状态变化和重新分配。\n    </p>\n  </li>\n  <li>\n    <p>\n      简述 GMP 模型中工作窃取算法的原理和作用。\n      提示：从空闲 P 如何获取可运行 G 的角度思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      多个 M 竞争一个 P 时，Go 语言是如何处理这种竞争的？\n      提示：考虑 Go 语言的锁机制和调度策略。\n    </p>\n  </li>\n  <li>\n    <p>\n      GMP 模型在多核 CPU 上是如何充分利用多核性能的？\n      提示：思考 P 和 M 在多核上的分布和调度。\n    </p>\n  </li>\n  <li>\n    <p>\n      若 G 长时间占用 M，会对 GMP 模型的调度产生什么影响，Go 是如何应对的？\n      提示：关注其他 G 的执行和调度器的干预。\n    </p>\n  </li>\n  <li>\n    <p>\n      请说明 GMP 模型中全局队列和本地队列的区别和联系。\n      提示：从队列的作用、使用场景和数据交互方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      在 GMP 模型中，如何保证公平调度各个 G？\n      提示：思考调度器的调度策略和优先级设置。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Go语言的GMP模型))\n    组件介绍\n      G（Goroutine）\n        轻量级线程实现，由Go运行时管理\n        栈内存初始小且可动态伸缩\n        有自己的栈空间、PC和寄存器\n        创建和销毁开销极小\n      M（Machine）\n        代表操作系统线程，执行计算\n        需绑定P才能执行Goroutine\n        从P的本地或全局队列获取Goroutine\n      P（Processor）\n        连接G和M的桥梁\n        包含运行Goroutine的必要资源\n        数量由GOMAXPROCS或runtime.GOMAXPROCS()设置\n    协作机制\n      调度流程\n        创建Goroutine：放入当前P本地队列\n        M获取Goroutine：先本地，再全局，可“工作窃取”\n        Goroutine阻塞：移除本地队列，放入等待队列，M解绑找新P\n        调度器平衡：定期检查队列负载，确保M负载均衡\n    优点\n      高效利用多核处理器\n      低开销并发\n      调度灵活",
    "keynote": "GMP模型由G、M、P构成\nG：轻量级线程，栈小可伸缩，创建销毁开销小\nM：操作系统线程，需绑定P执行G\nP：连接G和M，数量决定并行G数量\n调度流程：创建入P本地队列，M获取G，G阻塞处理，调度器平衡\n优点：利用多核，低开销并发，调度灵活",
    "group_id": 23,
    "kps": [
      "并发编程"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "腾讯音乐",
      "百度",
      "Shopee虾皮",
      "读书郎",
      "得物",
      "深言科技",
      "科大讯飞",
      "字节跳动",
      "腾讯",
      "杭州端点科技",
      "快手",
      "成都好未来",
      "度小满",
      "小米",
      "滴滴",
      "深信服",
      "杭州默安",
      "B站",
      "小红书",
      "知乎",
      "Momenta",
      "美图"
    ]
  }
}