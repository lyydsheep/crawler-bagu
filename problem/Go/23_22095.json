{
  "success": true,
  "data": {
    "id": 22095,
    "name": "<p>context是否是线程安全的？</p>",
    "options": null,
    "answer": "<p>是的，context 是线程安全的。</p>\n<p>在 Go 语言里，context 包的设计初衷就是为了在多个 goroutine 之间安全地传递请求作用域的数据、取消信号以及截止时间等信息。context 包提供的所有函数和方法都保证了并发安全，这意味着多个 goroutine 可以同时使用同一个 context 实例，而无需额外的同步机制。</p>\n<p>下面通过一个简单的示例来展示多个 goroutine 同时使用同一个 context 的情况：</p>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(ctx context.Context, id int) {\n    for {\n        select {\n        case &#x3C;-ctx.Done():\n            fmt.Printf(\"Worker %d received cancel signal and exiting...\\n\", id)\n            return\n        default:\n            fmt.Printf(\"Worker %d is working...\\n\", id)\n            time.Sleep(1 * time.Second)\n        }\n    }\n}\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 3*time.Second)\n    defer cancel()\n\n    for i := 0; i &#x3C; 3; i++ {\n        go worker(ctx, i)\n    }\n\n    time.Sleep(5 * time.Second)\n}\n</code></pre>\n<p>在这个示例中，创建了一个带有超时时间的 context，然后启动了 3 个 goroutine，每个 goroutine 都会接收这个 context 作为参数。在每个 goroutine 里，会不断检查 context 是否被取消。由于 context 是线程安全的，多个 goroutine 可以同时安全地使用它，当超时时间到达时，所有的 goroutine 都会收到取消信号并退出。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.009983361,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Go语言里context是否是线程安全的。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Go语言中context包的理解。</li>\n      <li>线程安全的概念。</li>\n      <li>context的设计目的和使用场景。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）线程安全</h4>\n<p>线程安全指的是在多线程环境下，对共享资源的并发访问不会导致数据不一致或其他异常问题。当多个线程同时访问一个资源时，如果没有合适的同步机制，可能会出现竞态条件等问题。</p>\n<h4>（2）Go语言的context包</h4>\n<p>context包用于在Go程序中传递请求作用域的数据、取消信号和截止时间等。它通常用于在不同的Go协程之间传递上下文信息，以控制请求的生命周期和传递请求相关的数据。</p>\n<h3>3. 解析</h3>\n<h4>（1）context是线程安全的</h4>\n<p>Go语言的context是线程安全的。context包的设计初衷就是为了在多协程环境下安全地传递上下文信息。它提供了一系列的方法来创建和操作context对象，这些方法在并发环境下可以安全使用。</p>\n<h4>（2）实现原理</h4>\n<p>context对象一旦创建，其内部状态是不可变的。当需要对context进行修改时，会返回一个新的context对象，而不是修改原有的对象。例如，<code>context.WithCancel</code>、<code>context.WithDeadline</code>和<code>context.WithTimeout</code>等函数都会返回一个新的context对象，这样就避免了多个协程同时修改同一个context对象导致的数据竞争问题。</p>\n<h4>（3）使用场景</h4>\n<p>由于context是线程安全的，它非常适合在多协程环境下使用。比如在处理HTTP请求时，一个请求可能会启动多个协程来处理不同的任务，通过context可以在这些协程之间传递请求的截止时间、取消信号等信息，确保所有相关的协程能够正确地响应请求的生命周期。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"time\"\n)\n\nfunc worker(ctx context.Context) {\n    for {\n        select {\n        case &#x3C;-ctx.Done():\n            fmt.Println(\"Worker is cancelled\")\n            return\n        default:\n            fmt.Println(\"Worker is working\")\n            time.Sleep(1 * time.Second)\n        }\n    }\n}\n\nfunc main() {\n    ctx, cancel := context.WithCancel(context.Background())\n\n    go worker(ctx)\n\n    time.Sleep(3 * time.Second)\n    cancel()\n\n    time.Sleep(1 * time.Second)\n}\n</code></pre>\n<p>在这个例子中，<code>main</code>函数创建了一个可取消的context，并将其传递给<code>worker</code>协程。<code>worker</code>协程会不断检查context是否被取消，当<code>main</code>函数调用<code>cancel</code>函数时，<code>worker</code>协程会收到取消信号并退出。由于context是线程安全的，多个协程可以安全地使用和检查这个context对象。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为context不是线程安全的</h4>\n<ul>\n  <li>误区：由于对context的实现原理不了解，认为在多协程环境下使用context会出现线程安全问题。</li>\n  <li>纠正：Go语言的context包在设计上保证了线程安全，其内部状态不可变，修改操作会返回新的对象。</li>\n</ul>\n<h4>（2）错误地修改context对象</h4>\n<ul>\n  <li>误区：尝试直接修改context对象的内部状态。</li>\n  <li>纠正：context对象是不可变的，应该使用<code>context</code>包提供的函数来创建新的context对象。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>在Go语言中，context是线程安全的。这是因为context对象一旦创建，其内部状态是不可变的，当需要对context进行修改时，会返回一个新的context对象，避免了多个协程同时修改同一个对象导致的数据竞争问题。</p>\n<p>context的线程安全特性使其非常适合在多协程环境下使用，例如在处理HTTP请求时，可以在不同的协程之间安全地传递请求的截止时间、取消信号等信息。不过，在使用时要注意不要尝试直接修改context对象的内部状态，而是使用<code>context</code>包提供的函数来创建新的context对象。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      <strong>context 线程安全的实现原理是什么？</strong>\n      提示：从 context 包的底层数据结构和锁机制等方面思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在并发场景下使用 context 时，可能会遇到哪些线程安全相关的问题？</strong>\n      提示：考虑多个 goroutine 同时对 context 进行操作的情况。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>如果要自定义一个 context，怎样保证它是线程安全的？</strong>\n      提示：参考标准库中 context 的实现思路，思考需要注意的并发控制点。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>当 context 被多个 goroutine 共享时，如何避免数据竞争？</strong>\n      提示：结合 context 的操作方法和并发编程的同步机制。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>context 的线程安全特性对分布式系统有什么重要意义？</strong>\n      提示：从分布式系统中多节点、多线程协作的角度考虑。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Go语言中context的线程安全性))\n    context线程安全特性\n      设计初衷\n        在多个goroutine间安全传递信息\n      并发安全保障\n        包内函数和方法保证并发安全\n        多goroutine可共用实例无需额外同步\n    示例展示\n      创建带超时时间的context\n      启动多个goroutine并传入context\n      goroutine检查context是否取消\n      超时后所有goroutine收到信号退出",
    "keynote": "context线程安全\n设计初衷：在多goroutine间安全传信息\n并发安全：包函数方法保证，多goroutine共用无需同步\n示例：创建带超时context，启动多goroutine，检查取消，超时退出",
    "group_id": 23,
    "kps": [
      "并发编程",
      "标准库"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "作业帮",
      "蚂蚁集团",
      "腾讯云智",
      "百度",
      "字节跳动",
      "北京格灵深瞳"
    ]
  }
}