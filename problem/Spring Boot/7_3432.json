{
  "success": true,
  "data": {
    "id": 3432,
    "name": "<p>SpringBoot支持哪些嵌入式Web服务器？默认使用哪一个？</p>",
    "options": null,
    "answer": "<p>Spring Boot 支持以下几个嵌入式 Web 服务器：</p>\n<ol>\n  <li><strong>Tomcat</strong>：默认的嵌入式 Web 服务器。</li>\n  <li><strong>Jetty</strong>：可选的嵌入式 Web 服务器，用于轻量级或异步应用。</li>\n  <li><strong>Undertow</strong>：一个高性能的 Web 服务器，支持异步处理。</li>\n</ol>\n<h3>默认配置</h3>\n<p>在 Spring Boot 中，Tomcat 是默认的嵌入式 Web 服务器。如果你想使用其他的服务器（如 Jetty 或 Undertow），可以通过修改 Maven 或 Gradle 的依赖进行配置。</p>\n<p>例如，可以通过将 <code>spring-boot-starter-jetty</code> 或 <code>spring-boot-starter-undertow</code> 添加到你的依赖中来更换默认的 Web 服务器。</p>\n<h3>示例</h3>\n<p>对于 Maven 用户，可以在 <code>pom.xml</code> 中添加以下依赖来使用 Jetty：</p>\n<pre><code class=\"language-xml\">&#x3C;dependency>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-starter-jetty&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<p>对于 Gradle 用户，可以在 <code>build.gradle</code> 中添加：</p>\n<pre><code class=\"language-groovy\">implementation 'org.springframework.boot:spring-boot-starter-jetty'\n</code></pre>\n<p>这样，当你的 Spring Boot 应用启动时，就会使用 Jetty 替代 Tomcat。</p>",
    "type": 6,
    "level": 1,
    "freq": 0,
    "analysis": "<h3><strong>1. 题目核心</strong></h3>\n<ul>\n  <li><strong>问题</strong>：Spring Boot支持哪些嵌入式Web服务器，默认使用哪一个。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring Boot支持的嵌入式Web服务器种类的了解。</li>\n      <li>清楚Spring Boot默认使用的嵌入式Web服务器。</li>\n    </ul>\n  </li>\n</ul>\n<h3><strong>2. 背景知识</strong></h3>\n<ul>\n  <li>嵌入式Web服务器是Spring Boot的重要特性之一，它允许将Web服务器嵌入到应用程序中，使得应用可以独立运行，无需外部的Web服务器部署。</li>\n</ul>\n<h3><strong>3. 解析</strong></h3>\n<h4><strong>（1）Spring Boot支持的嵌入式Web服务器</strong></h4>\n<ul>\n  <li><strong>Tomcat</strong>：Apache开发的开源Servlet容器，是Java Web开发中最常用的Web服务器之一，具有高性能、稳定等特点，支持Servlet和JSP规范。</li>\n  <li><strong>Jetty</strong>：一个开源的Servlet容器，相对轻量级，启动速度快，并且对异步处理有很好的支持，适合用于开发一些对性能和响应速度要求较高的Web应用。</li>\n  <li><strong>Undertow</strong>：Red Hat开发的一款高性能的Web服务器，采用了非阻塞I/O模型，支持Servlet 3.1规范，在处理高并发请求时表现出色。</li>\n</ul>\n<h4><strong>（2）默认使用的嵌入式Web服务器</strong></h4>\n<p>Spring Boot默认使用的嵌入式Web服务器是Tomcat。当创建一个Spring Boot Web应用时，如果不进行额外的配置，Spring Boot会自动引入Tomcat相关的依赖，并使用Tomcat作为Web服务器来运行应用。</p>\n<h3><strong>4. 示例配置</strong></h3>\n<p>如果想切换到其他嵌入式Web服务器，以切换到Jetty为例，需要在<code>pom.xml</code>（Maven项目）中进行如下操作：</p>\n<pre><code class=\"language-xml\">&#x3C;!-- 排除默认的Tomcat依赖 -->\n&#x3C;dependency>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-starter-web&#x3C;/artifactId>\n    &#x3C;exclusions>\n        &#x3C;exclusion>\n            &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n            &#x3C;artifactId>spring-boot-starter-tomcat&#x3C;/artifactId>\n        &#x3C;/exclusion>\n    &#x3C;/exclusions>\n&#x3C;/dependency>\n&#x3C;!-- 添加Jetty依赖 -->\n&#x3C;dependency>\n    &#x3C;groupId>org.springframework.boot&#x3C;/groupId>\n    &#x3C;artifactId>spring-boot-starter-jetty&#x3C;/artifactId>\n&#x3C;/dependency>\n</code></pre>\n<h3><strong>5. 常见误区</strong></h3>\n<h4><strong>（1）不清楚默认服务器</strong></h4>\n<ul>\n  <li>误区：不知道Spring Boot默认使用的嵌入式Web服务器是Tomcat。</li>\n  <li>纠正：明确记住Spring Boot默认使用Tomcat作为嵌入式Web服务器。</li>\n</ul>\n<h4><strong>（2）错误配置切换服务器</strong></h4>\n<ul>\n  <li>误区：在切换嵌入式Web服务器时，没有正确排除默认的服务器依赖，导致出现冲突。</li>\n  <li>纠正：在引入新的嵌入式Web服务器依赖前，先排除默认的服务器依赖。</li>\n</ul>\n<h3><strong>6. 总结回答</strong></h3>\n<p>Spring Boot支持多种嵌入式Web服务器，主要包括Tomcat、Jetty和Undertow。默认情况下，Spring Boot使用Tomcat作为嵌入式Web服务器。不过，开发者可以根据项目的需求，通过配置依赖来切换到其他嵌入式Web服务器。例如，若要使用Jetty，需要在项目配置文件中排除Tomcat依赖并添加Jetty依赖。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>请解释Spring Boot如何配置嵌入式Web服务器的特性。</strong></p>\n    <ul>\n      <li>提示：可以提到通过<code>application.properties</code>或<code>application.yml</code>进行配置。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在Spring Boot中，如何自定义嵌入式Web服务器的端口和上下文路径？</strong></p>\n    <ul>\n      <li>提示：考虑是否涉及到配置文件或注解的使用。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>讨论一下Spring Boot中嵌入式Web服务器的优缺点。</strong></p>\n    <ul>\n      <li>提示：想想嵌入式服务器对开发、测试和部署带来的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果想在Spring Boot应用中使用其他Web服务器（如Jetty或Tomcat），应该如何做？</strong></p>\n    <ul>\n      <li>提示：可以提到依赖的添加和配置的更新。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Spring Boot如何处理Web服务器的生命周期？</strong></p>\n    <ul>\n      <li>提示：可以提到Bean的初始化和销毁过程。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Spring Boot的嵌入式Web服务器是否支持HTTPS？如果支持，如何配置？</strong></p>\n    <ul>\n      <li>提示：可涉及到SSL证书和相关的配置项。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在Spring Boot中，如何实现基于不同环境的Web服务器配置？</strong></p>\n    <ul>\n      <li>提示：讨论使用不同的配置文件或profiles。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>当使用嵌入式Web服务器时，如何处理静态资源？</strong></p>\n    <ul>\n      <li>提示：考虑到静态资源的位置和访问路径。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果性能不佳，如何分析Spring Boot应用中嵌入式Web服务器的性能问题？</strong></p>\n    <ul>\n      <li>提示：可涉及监控工具、日志分析等方法。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在生产环境中使用嵌入式Web服务器时，有哪些安全考虑？</strong></p>\n    <ul>\n      <li>提示：讨论对外暴露的端口、CORS配置、防火墙等问题。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Spring Boot 嵌入式Web服务器))\n    Tomcat\n      默认的嵌入式Web服务器\n    Jetty\n      可选的嵌入式Web服务器\n      用于轻量级或异步应用\n    Undertow\n      高性能Web服务器\n      支持异步处理\n    默认配置\n      Tomcat是默认选项\n      通过修改依赖可更换Web服务器\n    示例\n      Maven用户添加依赖\n      Gradle用户添加依赖",
    "keynote": "- Spring Boot 支持Tomcat、Jetty和Undertow作为嵌入式Web服务器。\n- Tomcat是默认的嵌入式Web服务器。\n- Jetty适用于轻量级或异步应用程序。\n- Undertow是一个高性能的Web服务器，支持异步处理。\n- 可以通过更改Maven或Gradle项目的依赖项来选择不同的Web服务器。\n- Maven项目中使用`spring-boot-starter-jetty`或`spring-boot-starter-undertow`替换Tomcat。\n- Gradle项目中同样通过添加相应starter依赖来实现Web服务器切换。",
    "group_id": 7,
    "kps": [
      "内置服务器"
    ],
    "years": null,
    "corps": null
  }
}