{"success":true,"data":{"id":13635,"name":"<p>描述Spring Boot的启动流程</p>","options":null,"answer":"<p>Spring Boot的启动流程是一个复杂且有序的过程，下面将详细介绍其主要步骤。</p>\n<h3>1. 启动入口</h3>\n<p>Spring Boot应用的启动通常从一个带有<code>@SpringBootApplication</code>注解的主类开始，该类包含一个<code>main</code>方法，示例代码如下：</p>\n<pre><code class=\"language-java\">import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MySpringBootApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MySpringBootApplication.class, args);\n    }\n}\n</code></pre>\n<p>在<code>main</code>方法中，调用了<code>SpringApplication.run</code>方法，这是Spring Boot启动的入口。</p>\n<h3>2. <code>SpringApplication</code>实例的创建</h3>\n<p><code>SpringApplication.run</code>方法内部会创建一个<code>SpringApplication</code>实例，该实例负责管理Spring Boot应用的启动过程。创建<code>SpringApplication</code>实例时，会进行以下操作：</p>\n<ul>\n  <li><strong>推断应用类型</strong>：判断应用是普通的Servlet应用、Reactive应用还是非Web应用。</li>\n  <li><strong>查找并加载初始化器（<code>ApplicationContextInitializer</code>）</strong>：初始化器用于在<code>ApplicationContext</code>刷新之前对其进行定制。</li>\n  <li><strong>查找并加载监听器（<code>ApplicationListener</code>）</strong>：监听器用于监听应用启动过程中的各种事件。</li>\n  <li><strong>推断主应用类</strong>：确定包含<code>main</code>方法的主类。</li>\n</ul>\n<h3>3. 启动应用</h3>\n<p>创建<code>SpringApplication</code>实例后，会调用其<code>run</code>方法来启动应用，<code>run</code>方法的主要步骤如下：</p>\n<h4>3.1 记录启动时间</h4>\n<p>记录应用启动的开始时间，用于后续计算应用启动的总时间。</p>\n<h4>3.2 触发<code>ApplicationStartingEvent</code>事件</h4>\n<p>发布<code>ApplicationStartingEvent</code>事件，通知所有注册的<code>ApplicationListener</code>应用开始启动。</p>\n<h4>3.3 创建并配置<code>Environment</code></h4>\n<p>创建<code>Environment</code>对象，用于管理应用的配置信息。<code>Environment</code>会加载各种配置源，如<code>application.properties</code>、<code>application.yml</code>等。同时，会触发<code>ApplicationEnvironmentPreparedEvent</code>事件，通知监听器环境已经准备好。</p>\n<h4>3.4 创建<code>ApplicationContext</code></h4>\n<p>根据之前推断的应用类型，创建相应的<code>ApplicationContext</code>实例。例如，对于Servlet应用，会创建<code>AnnotationConfigServletWebServerApplicationContext</code>；对于Reactive应用，会创建<code>AnnotationConfigReactiveWebServerApplicationContext</code>。</p>\n<h4>3.5 准备<code>ApplicationContext</code></h4>\n<ul>\n  <li><strong>设置<code>Environment</code></strong>：将之前创建的<code>Environment</code>对象设置到<code>ApplicationContext</code>中。</li>\n  <li><strong>应用初始化器</strong>：调用之前加载的初始化器对<code>ApplicationContext</code>进行定制。</li>\n  <li><strong>触发<code>ApplicationContextInitializedEvent</code>事件</strong>：通知监听器<code>ApplicationContext</code>已经初始化完成。</li>\n</ul>\n<h4>3.6 加载<code>BeanDefinition</code></h4>\n<p>通过<code>AnnotatedBeanDefinitionReader</code>和<code>ClassPathBeanDefinitionScanner</code>等工具，扫描并加载应用中的<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>等注解标注的类，将它们注册为<code>BeanDefinition</code>。</p>\n<h4>3.7 刷新<code>ApplicationContext</code></h4>\n<p>调用<code>ApplicationContext</code>的<code>refresh</code>方法，这是Spring容器启动的核心步骤，主要包括以下操作：</p>\n<ul>\n  <li><strong>创建<code>BeanFactory</code></strong>：创建<code>DefaultListableBeanFactory</code>，用于管理应用中的所有Bean。</li>\n  <li><strong>加载配置类</strong>：解析配置类，处理<code>@Configuration</code>、<code>@Bean</code>等注解。</li>\n  <li><strong>创建和初始化Bean</strong>：根据<code>BeanDefinition</code>创建和初始化所有的Bean。</li>\n  <li><strong>启动嵌入式服务器</strong>：如果是Web应用，会启动嵌入式服务器（如Tomcat、Jetty等）。</li>\n</ul>\n<h4>3.8 触发<code>ApplicationStartedEvent</code>事件</h4>\n<p>通知监听器应用已经启动完成。</p>\n<h4>3.9 调用<code>CommandLineRunner</code>和<code>ApplicationRunner</code></h4>\n<p>如果应用中定义了<code>CommandLineRunner</code>或<code>ApplicationRunner</code>接口的实现类，会调用它们的<code>run</code>方法，执行一些启动后的初始化操作。</p>\n<h4>3.10 触发<code>ApplicationReadyEvent</code>事件</h4>\n<p>通知监听器应用已经准备好接受请求。</p>\n<h3>4. 异常处理</h3>\n<p>如果在启动过程中发生异常，会触发<code>ApplicationFailedEvent</code>事件，通知监听器应用启动失败。</p>\n<h3>总结</h3>\n<p>Spring Boot的启动流程主要包括创建<code>SpringApplication</code>实例、启动应用、触发各种事件、创建和刷新<code>ApplicationContext</code>、启动嵌入式服务器等步骤。通过这些步骤，Spring Boot能够自动配置和启动应用，大大简化了Spring应用的开发和部署。</p>","type":6,"level":2,"freq":0.06008011,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：描述Spring Boot的启动流程。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring Boot启动过程各阶段的了解。</li>\n      <li>对Spring Boot自动配置机制的理解。</li>\n      <li>对Spring Boot应用上下文创建和初始化的认识。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Spring Boot简介</h4>\n<p>Spring Boot是Spring框架的扩展，旨在简化Spring应用的开发和部署，提供了自动配置、嵌入式服务器等特性。</p>\n<h4>（2）核心组件</h4>\n<ul>\n  <li><strong>SpringApplication</strong>：负责Spring Boot应用的启动和引导。</li>\n  <li><strong>ApplicationContext</strong>：Spring的应用上下文，管理Bean的生命周期和依赖注入。</li>\n  <li><strong>自动配置</strong>：Spring Boot根据类路径中的依赖和配置自动配置应用。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）启动入口</h4>\n<p>Spring Boot应用通常从一个带有<code>@SpringBootApplication</code>注解的主类的<code>main</code>方法开始启动，<code>main</code>方法中调用<code>SpringApplication.run</code>方法。</p>\n<h4>（2）创建SpringApplication实例</h4>\n<p><code>SpringApplication.run</code>方法内部会创建一个<code>SpringApplication</code>实例，在创建过程中会进行以下操作：</p>\n<ul>\n  <li>推断应用类型（如Web应用、非Web应用）。</li>\n  <li>查找并加载应用的初始化器（<code>ApplicationContextInitializer</code>）和监听器（<code>ApplicationListener</code>）。</li>\n</ul>\n<h4>（3）应用启动前的准备工作</h4>\n<ul>\n  <li>触发<code>ApplicationStartingEvent</code>事件，通知所有监听器应用开始启动。</li>\n  <li>加载命令行参数。</li>\n  <li>创建并配置环境对象（<code>ConfigurableEnvironment</code>），包括加载配置文件、系统属性等。</li>\n  <li>触发<code>ApplicationEnvironmentPreparedEvent</code>事件，通知监听器环境已准备好。</li>\n</ul>\n<h4>（4）创建应用上下文</h4>\n<p>根据应用类型创建相应的<code>ApplicationContext</code>实例，如<code>AnnotationConfigServletWebServerApplicationContext</code>（Web应用）或<code>AnnotationConfigApplicationContext</code>（非Web应用）。</p>\n<h4>（5）应用上下文的准备工作</h4>\n<ul>\n  <li>将环境对象设置到应用上下文中。</li>\n  <li>加载Spring Boot的自动配置类，这些配置类根据类路径中的依赖和配置自动配置应用。</li>\n  <li>触发<code>ApplicationContextInitializedEvent</code>事件，通知监听器应用上下文已初始化。</li>\n</ul>\n<h4>（6）刷新应用上下文</h4>\n<p>调用<code>ApplicationContext</code>的<code>refresh</code>方法，完成以下操作：</p>\n<ul>\n  <li>创建BeanFactory，加载Bean定义。</li>\n  <li>执行Bean的实例化、依赖注入和初始化。</li>\n  <li>启动嵌入式服务器（如果是Web应用）。</li>\n</ul>\n<h4>（7）应用启动完成</h4>\n<ul>\n  <li>触发<code>ApplicationStartedEvent</code>事件，通知监听器应用已启动。</li>\n  <li>调用所有实现了<code>CommandLineRunner</code>或<code>ApplicationRunner</code>接口的Bean的<code>run</code>方法。</li>\n  <li>触发<code>ApplicationReadyEvent</code>事件，通知监听器应用已准备好接受请求。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-java\">import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MySpringBootApp {\n    public static void main(String[] args) {\n        SpringApplication.run(MySpringBootApp.class, args);\n    }\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）忽略自动配置机制</h4>\n<ul>\n  <li>误区：只关注应用上下文的创建和初始化，忽略了Spring Boot的自动配置机制。</li>\n  <li>纠正：明确自动配置类在启动过程中的作用，以及如何根据类路径中的依赖和配置自动配置应用。</li>\n</ul>\n<h4>（2）混淆事件的顺序</h4>\n<ul>\n  <li>误区：不清楚各个启动事件的触发顺序和作用。</li>\n  <li>纠正：理解每个事件的含义和触发时机，以及如何利用这些事件进行自定义配置。</li>\n</ul>\n<h4>（3）忽视嵌入式服务器的启动</h4>\n<ul>\n  <li>误区：在Web应用中，忽略了嵌入式服务器的启动过程。</li>\n  <li>纠正：了解嵌入式服务器（如Tomcat、Jetty）是如何在应用上下文刷新过程中启动的。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Spring Boot的启动流程主要包括以下步骤：</p>\n<ol>\n  <li>从带有<code>@SpringBootApplication</code>注解的主类的<code>main</code>方法开始，调用<code>SpringApplication.run</code>方法。</li>\n  <li>创建<code>SpringApplication</code>实例，推断应用类型，加载初始化器和监听器。</li>\n  <li>进行启动前的准备工作，包括触发<code>ApplicationStartingEvent</code>事件、加载命令行参数、配置环境对象并触发<code>ApplicationEnvironmentPreparedEvent</code>事件。</li>\n  <li>根据应用类型创建相应的<code>ApplicationContext</code>实例。</li>\n  <li>对应用上下文进行准备工作，设置环境对象，加载自动配置类，触发<code>ApplicationContextInitializedEvent</code>事件。</li>\n  <li>刷新应用上下文，创建BeanFactory，加载Bean定义，实例化和初始化Bean，启动嵌入式服务器（Web应用）。</li>\n  <li>应用启动完成，触发<code>ApplicationStartedEvent</code>事件，调用<code>CommandLineRunner</code>或<code>ApplicationRunner</code>的<code>run</code>方法，最后触发<code>ApplicationReadyEvent</code>事件。</li>\n</ol>\n<p>需要注意的是，Spring Boot的自动配置机制在启动过程中起着重要作用，根据类路径中的依赖和配置自动配置应用。同时，各个启动事件的顺序和作用也需要清晰理解，以便进行自定义配置。</p>","more_ask":"<ol>\n  <li>\n    <p>\n      Spring Boot启动过程中，自动配置是如何实现的？\n      提示：思考<code>spring.factories</code>文件、<code>@EnableAutoConfiguration</code>注解及自动配置类的加载机制。\n    </p>\n  </li>\n  <li>\n    <p>\n      说说Spring Boot启动时，<code>ApplicationContext</code>的创建过程。\n      提示：关注<code>SpringApplication</code>类中创建<code>ApplicationContext</code>的方法及不同类型<code>ApplicationContext</code>的初始化。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot启动时，如何处理命令行参数？\n      提示：查看<code>SpringApplication</code>类中处理命令行参数的相关方法和逻辑。\n    </p>\n  </li>\n  <li>\n    <p>\n      在Spring Boot启动流程里，<code>Environment</code>对象是何时创建和配置的？\n      提示：留意<code>SpringApplication</code>类中初始化<code>Environment</code>的步骤和相关配置源。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot启动时，如何加载和处理配置文件（如<code>application.properties</code>）？\n      提示：考虑配置文件的加载顺序、<code>PropertySource</code>的使用和配置文件的解析过程。\n    </p>\n  </li>\n  <li>\n    <p>\n      描述Spring Boot启动过程中，嵌入式服务器（如Tomcat）是如何启动的？\n      提示：关注<code>EmbeddedWebServerFactory</code>和<code>EmbeddedWebServer</code>相关类的作用和调用流程。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot启动时，<code>Bean</code>的创建和初始化顺序是怎样的？\n      提示：思考<code>@Order</code>注解、<code>Ordered</code>接口以及<code>@DependsOn</code>注解对<code>Bean</code>创建顺序的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      若Spring Boot启动失败，如何进行有效的错误排查？\n      提示：从日志信息、异常堆栈、配置文件等方面去思考排查方法。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((Spring Boot启动流程))\n    启动入口\n      带@SpringBootApplication注解主类\n      main方法调用SpringApplication.run\n    SpringApplication实例的创建\n      推断应用类型\n      查找并加载初始化器\n      查找并加载监听器\n      推断主应用类\n    启动应用\n      记录启动时间\n      触发ApplicationStartingEvent事件\n      创建并配置Environment\n      创建ApplicationContext\n      准备ApplicationContext\n        设置Environment\n        应用初始化器\n        触发ApplicationContextInitializedEvent事件\n      加载BeanDefinition\n      刷新ApplicationContext\n        创建BeanFactory\n        加载配置类\n        创建和初始化Bean\n        启动嵌入式服务器\n      触发ApplicationStartedEvent事件\n      调用CommandLineRunner和ApplicationRunner\n      触发ApplicationReadyEvent事件\n    异常处理\n      触发ApplicationFailedEvent事件\n    总结\n      自动配置和启动应用","keynote":"Spring Boot启动流程：\n1. 启动入口：带`@SpringBootApplication`注解主类，`main`方法调用`SpringApplication.run`\n2. `SpringApplication`实例创建：推断应用类型、加载初始化器和监听器、推断主应用类\n3. 启动应用：\n    - 记录启动时间\n    - 触发`ApplicationStartingEvent`\n    - 创建配置`Environment`\n    - 创建`ApplicationContext`\n    - 准备`ApplicationContext`：设置`Environment`、应用初始化器、触发`ApplicationContextInitializedEvent`\n    - 加载`BeanDefinition`\n    - 刷新`ApplicationContext`：创建`BeanFactory`、加载配置类、创建初始化Bean、启动嵌入式服务器\n    - 触发`ApplicationStartedEvent`\n    - 调用`CommandLineRunner`和`ApplicationRunner`\n    - 触发`ApplicationReadyEvent`\n4. 异常处理：触发`ApplicationFailedEvent`\n5. 总结：自动配置和启动应用","group_id":7,"kps":["基础知识"],"years":[2025,2024,2023,2022],"corps":["德勤","华为","小米","百度","京东","美团","腾讯云智","华资","快手","瑞幸","Wind万得","字节跳动","盛趣游戏","梦创双杨","网易","腾讯","科大讯飞","联想集团","钉钉","阿里巴巴","携程","猿辅导","大华","B站","用友","小红书","同程旅行","帆软","饿了么","星环科技","网商银行","成都数之联"]}}