{
  "success": true,
  "data": {
    "id": 43716,
    "name": "<p>Spring Boot启动过程干了哪些事？</p>",
    "options": null,
    "answer": "<p>Spring Boot的启动过程是一个复杂且有序的流程，主要包含以下几个关键步骤：</p>\n<h3>1. 初始化SpringApplication实例</h3>\n<p>当执行Spring Boot应用的<code>main</code>方法时，通常会调用<code>SpringApplication.run</code>方法，在这个过程中会创建一个<code>SpringApplication</code>实例。</p>\n<ul>\n  <li><strong>推断应用类型</strong>：根据类路径中的类，判断应用是普通的Servlet应用、Reactive应用还是其他类型的应用。例如，如果类路径中存在<code>javax.servlet.Servlet</code>和<code>org.springframework.web.context.ConfigurableWebApplicationContext</code>，则判断为Servlet应用。</li>\n  <li><strong>查找并加载初始化器（Initializers）</strong>：从<code>META-INF/spring.factories</code>文件中查找所有实现了<code>ApplicationContextInitializer</code>接口的类，并将它们加载到<code>SpringApplication</code>实例中。这些初始化器可以在应用上下文刷新之前对其进行定制化配置。</li>\n  <li><strong>查找并加载监听器（Listeners）</strong>：同样从<code>META-INF/spring.factories</code>文件中查找所有实现了<code>ApplicationListener</code>接口的类，并将它们加载到<code>SpringApplication</code>实例中。这些监听器可以监听应用启动过程中的各种事件，如应用启动事件、应用上下文刷新事件等。</li>\n  <li><strong>推断主应用类</strong>：通过分析调用栈，找出包含<code>main</code>方法的主应用类。</li>\n</ul>\n<h3>2. 调用run方法</h3>\n<p>创建<code>SpringApplication</code>实例后，会调用其<code>run</code>方法开始启动应用。</p>\n<ul>\n  <li><strong>发布应用启动事件（ApplicationStartingEvent）</strong>：通知所有注册的监听器应用开始启动。</li>\n  <li><strong>创建并配置环境（Environment）</strong>：\n    <ul>\n      <li>确定并加载应用的运行环境，包括系统属性、环境变量、命令行参数等。</li>\n      <li>根据应用类型（Servlet、Reactive等）配置相应的环境。例如，对于Servlet应用，会配置Servlet相关的环境信息。</li>\n      <li>发布应用环境准备好事件（ApplicationEnvironmentPreparedEvent），通知监听器环境已经准备好。</li>\n    </ul>\n  </li>\n  <li><strong>创建应用上下文（ApplicationContext）</strong>：根据之前推断的应用类型，创建相应的应用上下文实例。例如，对于Servlet应用，会创建<code>AnnotationConfigServletWebServerApplicationContext</code>；对于Reactive应用，会创建<code>AnnotationConfigReactiveWebServerApplicationContext</code>。</li>\n  <li><strong>准备应用上下文</strong>：\n    <ul>\n      <li>将之前创建的环境信息设置到应用上下文中。</li>\n      <li>应用之前加载的初始化器对应用上下文进行初始化。</li>\n      <li>发布应用上下文准备好事件（ApplicationContextInitializedEvent），通知监听器应用上下文已经初始化完成。</li>\n    </ul>\n  </li>\n  <li><strong>刷新应用上下文</strong>：\n    <ul>\n      <li>调用<code>AbstractApplicationContext</code>的<code>refresh</code>方法，这是Spring框架的核心方法，会完成以下重要操作：\n        <ul>\n          <li>创建BeanFactory，并加载所有的Bean定义。</li>\n          <li>注册BeanPostProcessor和BeanFactoryPostProcessor，用于在Bean创建前后进行额外的处理。</li>\n          <li>实例化所有单例Bean。</li>\n          <li>初始化消息源，用于国际化支持。</li>\n          <li>初始化事件广播器，用于事件的发布和监听。</li>\n          <li>启动嵌入式服务器（如果是Web应用）。对于Servlet应用，会启动Tomcat、Jetty等嵌入式Servlet容器；对于Reactive应用，会启动Netty等嵌入式服务器。</li>\n        </ul>\n      </li>\n      <li>发布应用上下文刷新完成事件（ApplicationReadyEvent），表示应用已经准备好接受请求。</li>\n    </ul>\n  </li>\n  <li><strong>调用所有实现了<code>CommandLineRunner</code>或<code>ApplicationRunner</code>接口的Bean</strong>：这些Bean可以在应用启动完成后执行一些额外的初始化操作，如数据初始化、日志记录等。</li>\n  <li><strong>发布应用启动完成事件（ApplicationStartedEvent）</strong>：通知所有监听器应用已经成功启动。</li>\n</ul>\n<h3>3. 异常处理</h3>\n<p>在整个启动过程中，如果发生异常，会发布应用启动失败事件（ApplicationFailedEvent），通知监听器应用启动失败，并进行相应的异常处理。</p>\n<p>综上所述，Spring Boot的启动过程涉及到实例初始化、环境配置、上下文创建与刷新、嵌入式服务器启动以及事件发布等多个步骤，通过这些步骤，Spring Boot能够快速、便捷地启动一个完整的应用。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.009345794,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring Boot启动过程干了哪些事？</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring Boot启动流程的整体理解。</li>\n      <li>Spring Boot自动配置原理。</li>\n      <li>Spring容器的初始化和启动。</li>\n      <li>应用上下文的创建和使用。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）Spring Boot简介</h4>\n<p>Spring Boot是Spring框架的扩展，旨在简化Spring应用的开发和部署。它通过自动配置和约定优于配置的原则，减少了开发人员的配置工作。</p>\n<h4>（2）Spring容器</h4>\n<p>Spring容器是Spring框架的核心，负责创建、管理和装配Bean。Spring Boot启动过程中会创建和启动Spring容器。</p>\n<h4>（3）自动配置</h4>\n<p>Spring Boot的自动配置机制根据项目的依赖和配置，自动为应用添加必要的配置，减少了手动配置的工作量。</p>\n<h3>3. 解析</h3>\n<h4>（1）启动类和主方法</h4>\n<p>Spring Boot应用通常有一个带有<code>@SpringBootApplication</code>注解的启动类，其中包含<code>main</code>方法。<code>@SpringBootApplication</code>是一个组合注解，包含了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>。</p>\n<pre><code class=\"language-java\">import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MyApp {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApp.class, args);\n    }\n}\n</code></pre>\n<h4>（2）SpringApplication实例化</h4>\n<p><code>SpringApplication.run</code>方法会创建一个<code>SpringApplication</code>实例，该实例负责启动Spring Boot应用。在实例化过程中，会进行以下操作：</p>\n<ul>\n  <li>推断应用类型（如Web应用、非Web应用）。</li>\n  <li>查找并加载所有的初始化器（<code>ApplicationContextInitializer</code>）和监听器（<code>ApplicationListener</code>）。</li>\n</ul>\n<h4>（3）应用上下文创建</h4>\n<p><code>SpringApplication</code>会根据应用类型创建相应的应用上下文（<code>ApplicationContext</code>），如<code>AnnotationConfigServletWebServerApplicationContext</code>（用于Web应用）或<code>AnnotationConfigApplicationContext</code>（用于非Web应用）。</p>\n<h4>（4）自动配置</h4>\n<p><code>@EnableAutoConfiguration</code>注解启用了Spring Boot的自动配置机制。Spring Boot会根据项目的依赖和配置，自动为应用添加必要的配置。自动配置的过程如下：</p>\n<ul>\n  <li>扫描<code>META-INF/spring.factories</code>文件，查找所有的自动配置类。</li>\n  <li>根据条件注解（如<code>@ConditionalOnClass</code>、<code>@ConditionalOnMissingBean</code>等），筛选出符合条件的自动配置类。</li>\n  <li>将筛选后的自动配置类加载到Spring容器中。</li>\n</ul>\n<h4>（5）Bean定义加载</h4>\n<p>Spring Boot会扫描应用的类路径，查找所有带有<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>等注解的类，并将它们注册为Bean定义。</p>\n<h4>（6）Spring容器刷新</h4>\n<p><code>SpringApplication</code>会调用应用上下文的<code>refresh</code>方法，启动Spring容器。在刷新过程中，会进行以下操作：</p>\n<ul>\n  <li>创建和初始化所有的Bean。</li>\n  <li>处理Bean之间的依赖关系。</li>\n  <li>启动嵌入式服务器（如果是Web应用）。</li>\n</ul>\n<h4>（7）应用启动完成</h4>\n<p>Spring Boot应用启动完成后，会发布<code>ApplicationReadyEvent</code>事件，通知所有的监听器应用已经准备好接受请求。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-java\">import org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.stereotype.Component;\n\n@SpringBootApplication\npublic class MyApp {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApp.class, args);\n    }\n}\n\n@Component\nclass MyCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"Application started!\");\n    }\n}\n</code></pre>\n<p>在这个例子中，<code>MyCommandLineRunner</code>实现了<code>CommandLineRunner</code>接口，当应用启动完成后，会执行<code>run</code>方法。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）忽视自动配置的作用</h4>\n<ul>\n  <li>误区：认为Spring Boot启动过程中没有自动配置，需要手动配置所有的组件。</li>\n  <li>纠正：Spring Boot的自动配置机制可以根据项目的依赖和配置，自动为应用添加必要的配置，减少了手动配置的工作量。</li>\n</ul>\n<h4>（2）混淆应用上下文和Spring容器</h4>\n<ul>\n  <li>误区：认为应用上下文和Spring容器是同一个概念。</li>\n  <li>纠正：应用上下文是Spring容器的一种实现，它继承了Spring容器的功能，并提供了更多的特性，如事件发布、国际化支持等。</li>\n</ul>\n<h4>（3）忽略启动过程中的事件机制</h4>\n<ul>\n  <li>误区：只关注应用启动的结果，忽略了启动过程中的事件机制。</li>\n  <li>纠正：Spring Boot启动过程中会发布多个事件，如<code>ApplicationStartingEvent</code>、<code>ApplicationReadyEvent</code>等，开发人员可以通过监听这些事件来实现特定的功能。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>\n  Spring Boot启动过程主要包括以下步骤：\n  首先，通过带有<code>@SpringBootApplication</code>注解的启动类中的<code>main</code>方法调用<code>SpringApplication.run</code>方法。在这个过程中，会创建<code>SpringApplication</code>实例，推断应用类型，查找并加载初始化器和监听器。\n  接着，根据应用类型创建相应的应用上下文。然后，启用自动配置机制，扫描<code>META-INF/spring.factories</code>文件，根据条件注解筛选并加载符合条件的自动配置类。\n  之后，扫描应用类路径，将带有特定注解的类注册为Bean定义。再调用应用上下文的<code>refresh</code>方法，启动Spring容器，创建和初始化所有Bean，处理依赖关系，若为Web应用则启动嵌入式服务器。\n  最后，应用启动完成，发布<code>ApplicationReadyEvent</code>事件。不过，要注意不能忽视自动配置的作用，要区分应用上下文和Spring容器，同时关注启动过程中的事件机制。\n</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      <strong>Spring Boot自动配置原理中，<code>@EnableAutoConfiguration</code>注解是如何工作的？</strong>\n      提示：思考该注解内部的实现，以及它与<code>META - INF/spring.factories</code>文件的关联。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在Spring Boot启动过程中，<code>ApplicationContext</code>的创建和初始化具体步骤是怎样的？</strong>\n      提示：关注不同类型<code>ApplicationContext</code>的创建过程，以及初始化时的关键方法调用。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动时，如何处理<code>@ComponentScan</code>注解扫描到的组件？</strong>\n      提示：考虑扫描规则、组件的注册和处理流程。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动过程中，嵌入式服务器（如Tomcat）是如何启动的？</strong>\n      提示：了解嵌入式服务器的启动类和关键配置加载过程。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动时，<code>Environment</code>对象是如何构建和加载配置的？</strong>\n      提示：思考配置文件的加载顺序、不同配置源的处理。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在Spring Boot启动过程中，<code>Bean</code>的创建和初始化遵循什么顺序？</strong>\n      提示：关注<code>@Order</code>注解、<code>Ordered</code>接口以及不同类型<code>Bean</code>的创建时机。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动时，如何处理<code>@Conditional</code>注解来决定是否加载某个<code>Bean</code>？</strong>\n      提示：了解条件注解的实现原理和判断逻辑。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动过程中，<code>SpringApplicationRunListeners</code>的作用是什么，有哪些关键方法？</strong>\n      提示：思考这些监听器在启动流程中的不同阶段的作用。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动时，如何处理<code>CommandLineRunner</code>和<code>ApplicationRunner</code>接口的实现类？</strong>\n      提示：关注它们的执行顺序和执行时机。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>Spring Boot启动过程中，<code>Actuator</code>是如何集成和启动的？</strong>\n      提示：了解<code>Actuator</code>的依赖和自动配置机制。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Spring Boot启动过程))\n    初始化SpringApplication实例\n      推断应用类型\n      查找并加载初始化器（Initializers）\n      查找并加载监听器（Listeners）\n      推断主应用类\n    调用run方法\n      发布应用启动事件（ApplicationStartingEvent）\n      创建并配置环境（Environment）\n        确定并加载运行环境\n        根据应用类型配置环境\n        发布应用环境准备好事件（ApplicationEnvironmentPreparedEvent）\n      创建应用上下文（ApplicationContext）\n      准备应用上下文\n        设置环境信息到上下文\n        应用初始化器初始化上下文\n        发布应用上下文准备好事件（ApplicationContextInitializedEvent）\n      刷新应用上下文\n        调用refresh方法\n          创建BeanFactory并加载Bean定义\n          注册BeanPostProcessor和BeanFactoryPostProcessor\n          实例化单例Bean\n          初始化消息源\n          初始化事件广播器\n          启动嵌入式服务器\n        发布应用上下文刷新完成事件（ApplicationReadyEvent）\n      调用实现CommandLineRunner或ApplicationRunner接口的Bean\n      发布应用启动完成事件（ApplicationStartedEvent）\n    异常处理\n      发布应用启动失败事件（ApplicationFailedEvent）",
    "keynote": "初始化SpringApplication实例：推断应用类型、加载初始化器和监听器、推断主应用类\n调用run方法：发布启动事件、创建配置环境、创建准备刷新应用上下文、调用特定接口Bean、发布启动完成事件\n异常处理：发布启动失败事件",
    "group_id": 7,
    "kps": [
      "基础知识"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "兴业数金",
      "得物",
      "小米",
      "网易",
      "中兴通讯",
      "网商银行",
      "顺丰"
    ]
  }
}