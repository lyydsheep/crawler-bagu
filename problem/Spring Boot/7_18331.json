{"success":true,"data":{"id":18331,"name":"<p>SpringBoot在Controller、Service等各层用到哪些注解，Mapper层还有哪些注解</p>","options":null,"answer":"<h3>Controller层常用注解</h3>\n<ul>\n  <li><strong>@RestController</strong>：该注解是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。使用<code>@RestController</code>注解的类会被Spring识别为控制器，并且该控制器的所有方法返回的对象会自动转换为JSON或XML等格式的响应体，适用于构建RESTful风格的API。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@RestController\npublic class UserController {\n    @GetMapping(\"/users\")\n    public String getUsers() {\n        return \"All users\";\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>@Controller</strong>：用于定义控制器类，在Spring MVC中，控制器负责处理客户端的请求并返回响应。通常与<code>@ResponseBody</code>或视图解析器配合使用。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class HomeController {\n    @GetMapping(\"/home\")\n    @ResponseBody\n    public String home() {\n        return \"Welcome to the home page\";\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>@RequestMapping</strong>：用于映射HTTP请求到控制器的处理方法上，可以指定请求的URL、请求方法（GET、POST等）、请求参数等。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/products\")\npublic class ProductController {\n    @RequestMapping(method = RequestMethod.GET)\n    public String getProducts() {\n        return \"All products\";\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping</strong>：它们是<code>@RequestMapping</code>的特定方法的快捷注解，分别对应HTTP的GET、POST、PUT、DELETE请求方法。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/orders\")\npublic class OrderController {\n    @GetMapping\n    public String getOrders() {\n        return \"All orders\";\n    }\n\n    @PostMapping\n    public String createOrder() {\n        return \"Order created\";\n    }\n}\n</code></pre>\n<h3>Service层常用注解</h3>\n<ul>\n  <li><strong>@Service</strong>：用于标记业务逻辑层的类，被Spring容器识别并管理，将其作为一个Bean注册到容器中。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    public String getUserInfo() {\n        return \"User information\";\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>@Transactional</strong>：用于声明事务，可应用于类或方法上。当应用于类上时，该类的所有公共方法都将具有事务属性；当应用于方法上时，只有该方法具有事务属性。</li>\n</ul>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class AccountService {\n    @Transactional\n    public void transferMoney() {\n        // 转账业务逻辑\n    }\n}\n</code></pre>\n<h3>Mapper层常用注解</h3>\n<ul>\n  <li><strong>@Mapper</strong>：在MyBatis - Spring Boot项目中，使用<code>@Mapper</code>注解标记Mapper接口，Spring会自动扫描并将其注册为MyBatis的Mapper Bean。</li>\n</ul>\n<pre><code class=\"language-java\">import org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface UserMapper {\n    User selectUserById(int id);\n}\n</code></pre>\n<ul>\n  <li><strong>@Select、@Insert、@Update、@Delete</strong>：这些注解用于在Mapper接口中直接编写SQL语句，分别对应SQL的查询、插入、更新和删除操作。</li>\n</ul>\n<pre><code class=\"language-java\">import org.apache.ibatis.annotations.Select;\n\n@Mapper\npublic interface UserMapper {\n    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n    User selectUserById(int id);\n}\n</code></pre>\n<ul>\n  <li><strong>@Results、@Result</strong>：用于处理查询结果集的映射，当数据库表字段名和Java对象属性名不一致时，可以使用这两个注解进行手动映射。</li>\n</ul>\n<pre><code class=\"language-java\">import org.apache.ibatis.annotations.Select;\nimport org.apache.ibatis.annotations.Results;\nimport org.apache.ibatis.annotations.Result;\n\n@Mapper\npublic interface UserMapper {\n    @Select(\"SELECT id, user_name, email FROM users WHERE id = #{id}\")\n    @Results({\n        @Result(property = \"id\", column = \"id\"),\n        @Result(property = \"userName\", column = \"user_name\"),\n        @Result(property = \"email\", column = \"email\")\n    })\n    User selectUserById(int id);\n}\n</code></pre>","type":6,"level":1,"freq":0.005340454,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring Boot在Controller、Service、Mapper层分别用到哪些注解。</li>\n  <li><strong>考察点</strong>：对Spring Boot不同层次架构及对应注解的掌握，理解各注解在不同层次的作用。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<ul>\n  <li>Spring Boot是基于Spring框架的快速开发框架，采用分层架构，包括Controller层（负责接收请求、返回响应）、Service层（处理业务逻辑）、Mapper层（与数据库交互）。注解是Spring Boot实现功能的重要方式，能简化配置。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）Controller层常用注解</h4>\n<ul>\n  <li><strong>@RestController</strong>：是<code>@Controller</code>和<code>@ResponseBody</code>的组合注解。<code>@Controller</code>表明该类是一个控制器组件，会被Spring容器扫描并注册；<code>@ResponseBody</code>表示方法的返回值会直接作为HTTP响应体返回，常用于返回JSON数据。</li>\n  <li><strong>@RequestMapping</strong>：用于映射HTTP请求到控制器的处理方法。可以指定请求的URL、请求方法（GET、POST等）。</li>\n  <li><strong>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping</strong>：是<code>@RequestMapping</code>的特定方法的简化注解，分别对应HTTP的GET、POST、PUT、DELETE请求。</li>\n  <li><strong>@RequestBody</strong>：用于将HTTP请求体中的数据绑定到方法的参数上，通常用于接收JSON格式的数据。</li>\n  <li><strong>@PathVariable</strong>：用于获取URL中的路径变量。</li>\n</ul>\n<h4>（2）Service层常用注解</h4>\n<ul>\n  <li><strong>@Service</strong>：表明该类是一个服务组件，会被Spring容器扫描并注册为Bean，用于处理业务逻辑。</li>\n  <li><strong>@Transactional</strong>：用于开启事务管理，保证一系列数据库操作的原子性。可以指定事务的传播行为、隔离级别等。</li>\n</ul>\n<h4>（3）Mapper层常用注解</h4>\n<ul>\n  <li><strong>@Mapper</strong>：用于标记Mapper接口，Spring Boot会自动扫描并将其注册为Bean，使其可以被注入到Service层使用。</li>\n  <li><strong>@Select</strong>：用于执行SQL查询语句，将查询结果映射到Java对象。</li>\n  <li><strong>@Insert</strong>：用于执行SQL插入语句。</li>\n  <li><strong>@Update</strong>：用于执行SQL更新语句。</li>\n  <li><strong>@Delete</strong>：用于执行SQL删除语句。</li>\n  <li><strong>@Results、@Result</strong>：用于手动映射查询结果，当数据库表字段名和Java对象属性名不一致时使用。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<h4>（1）Controller层示例</h4>\n<pre><code class=\"language-java\">import org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserController {\n\n    @GetMapping(\"/users/{id}\")\n    public String getUser(@PathVariable(\"id\") Long id) {\n        return \"User with id: \" + id;\n    }\n\n    @PostMapping(\"/users\")\n    public String createUser(@RequestBody String user) {\n        return \"User created: \" + user;\n    }\n}\n</code></pre>\n<h4>（2）Service层示例</h4>\n<pre><code class=\"language-java\">import org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\npublic class UserService {\n\n    @Transactional\n    public void doSomething() {\n        // 业务逻辑\n    }\n}\n</code></pre>\n<h4>（3）Mapper层示例</h4>\n<pre><code class=\"language-java\">import org.apache.ibatis.annotations.*;\n\n@Mapper\npublic interface UserMapper {\n\n    @Select(\"SELECT * FROM users WHERE id = #{id}\")\n    User getUserById(Long id);\n\n    @Insert(\"INSERT INTO users (name, age) VALUES (#{name}, #{age})\")\n    int insertUser(User user);\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）注解使用层次混乱</h4>\n<ul>\n  <li>误区：在Controller层使用Service层或Mapper层的注解，导致功能实现错误。</li>\n  <li>纠正：明确各层的职责和对应的注解，Controller层负责请求响应处理，Service层处理业务逻辑，Mapper层与数据库交互。</li>\n</ul>\n<h4>（2）忽略注解的参数</h4>\n<ul>\n  <li>误区：使用注解时不关注参数设置，如<code>@RequestMapping</code>不指定请求方法，导致请求处理混乱。</li>\n  <li>纠正：仔细阅读注解文档，根据实际需求设置注解参数。</li>\n</ul>\n<h4>（3）事务注解使用不当</h4>\n<ul>\n  <li>误区：在不需要事务的方法上使用<code>@Transactional</code>，影响性能；或者在需要事务的方法上忘记使用。</li>\n  <li>纠正：根据业务需求合理使用<code>@Transactional</code>注解，确保事务的正确开启和提交。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Spring Boot在不同层次使用不同的注解：</p>\n<ul>\n  <li><strong>Controller层</strong>：常用<code>@RestController</code>、<code>@RequestMapping</code>、<code>@GetMapping</code>、<code>@PostMapping</code>、<code>@PutMapping</code>、<code>@DeleteMapping</code>、<code>@RequestBody</code>、<code>@PathVariable</code>等注解，用于处理HTTP请求和响应。</li>\n  <li><strong>Service层</strong>：常用<code>@Service</code>注解标记服务组件，使用<code>@Transactional</code>注解进行事务管理。</li>\n  <li><strong>Mapper层</strong>：常用<code>@Mapper</code>注解标记Mapper接口，使用<code>@Select</code>、<code>@Insert</code>、<code>@Update</code>、<code>@Delete</code>等注解执行SQL语句，使用<code>@Results</code>、<code>@Result</code>注解进行结果映射。</li>\n</ul>\n<p>在使用这些注解时，要注意各层的职责划分，合理设置注解参数，避免出现注解使用层次混乱、忽略注解参数、事务注解使用不当等问题。</p>","more_ask":"<h3>注解原理相关</h3>\n<ol>\n  <li>\n    <p>\n      <strong><code>@Autowired</code>注解的注入原理是什么，它是如何解决依赖注入问题的？</strong>\n      提示：从Spring的BeanFactory、依赖查找和注入流程方面思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong><code>@Transactional</code>注解的底层实现原理，它是如何管理事务的？</strong>\n      提示：涉及Spring AOP和事务管理器，考虑代理模式和事务传播行为。\n    </p>\n  </li>\n</ol>\n<h3>注解使用场景与注意事项</h3>\n<ol start=\"3\">\n  <li>\n    <p>\n      <strong>在什么情况下会使用<code>@Qualifier</code>注解，它和<code>@Autowired</code>注解有什么关系？</strong>\n      提示：当存在多个相同类型的Bean时，思考如何精确注入。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong><code>@Async</code>注解在使用时有哪些注意事项，如何保证异步方法的正确执行？</strong>\n      提示：考虑线程池配置、异常处理和Spring的异步支持。\n    </p>\n  </li>\n</ol>\n<h3>注解组合与自定义注解</h3>\n<ol start=\"5\">\n  <li>\n    <p>\n      <strong>如何组合使用Spring Boot的注解来实现特定的功能，举例说明。</strong>\n      提示：可以结合<code>@RestController</code>、<code>@RequestMapping</code>等注解实现一个完整的RESTful接口。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>如何自定义一个类似Spring Boot的注解，需要考虑哪些方面？</strong>\n      提示：涉及元注解的使用、注解处理器的开发。\n    </p>\n  </li>\n</ol>\n<h3>与其他框架集成时注解的使用</h3>\n<ol start=\"7\">\n  <li>\n    <p>\n      <strong>在Spring Boot与MyBatis集成时，<code>@MapperScan</code>注解和<code>@Mapper</code>注解有什么区别和联系？</strong>\n      提示：从扫描范围和单个Mapper接口的处理角度思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>当Spring Boot与Redis集成时，会用到哪些注解，它们分别起到什么作用？</strong>\n      提示：考虑缓存注解如<code>@Cacheable</code>、<code>@CachePut</code>等。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((Controller层常用注解))\n    @RestController\n      组合注解：@Controller和@ResponseBody\n      功能：Spring识别为控制器，方法返回对象自动转换为JSON或XML响应体，适用于RESTful API\n    @Controller\n      功能：定义控制器类，处理客户端请求并返回响应，常与@ResponseBody或视图解析器配合\n    @RequestMapping\n      功能：映射HTTP请求到处理方法，可指定URL、请求方法、请求参数等\n    @GetMapping、@PostMapping、@PutMapping、@DeleteMapping\n      功能：@RequestMapping特定方法快捷注解，对应GET、POST、PUT、DELETE请求方法\n  叶子节点2((Service层常用注解))\n    @Service\n      功能：标记业务逻辑层类，被Spring容器识别管理，注册为Bean\n    @Transactional\n      功能：声明事务，可用于类或方法\n  叶子节点3((Mapper层常用注解))\n    @Mapper\n      功能：MyBatis - Spring Boot项目中标记Mapper接口，Spring自动扫描注册为MyBatis Mapper Bean\n    @Select、@Insert、@Update、@Delete\n      功能：在Mapper接口中直接编写SQL语句，对应查询、插入、更新、删除操作\n    @Results、@Result\n      功能：处理查询结果集映射，用于表字段名和Java对象属性名不一致情况","keynote":"Controller层：\n- @RestController：@Controller与@ResponseBody组合，返回对象转JSON/XML，用于RESTful API\n- @Controller：定义控制器，常与@ResponseBody或视图解析器配合\n- @RequestMapping：映射HTTP请求，可指定URL、方法、参数\n- @GetMapping等：对应HTTP特定请求方法的快捷注解\n\nService层：\n- @Service：标记业务逻辑类，注册为Bean\n- @Transactional：声明事务\n\nMapper层：\n- @Mapper：标记Mapper接口，Spring自动注册\n- @Select等：直接编写SQL语句\n- @Results、@Result：处理结果集映射","group_id":7,"kps":["核心注解"],"years":[2024,2022],"corps":["联蔚数科","海康威视","某杭州半导体制造企业","招商银行"]}}