{
  "success": true,
  "data": {
    "id": 36542,
    "name": "<p>Spring Boot相比原生Spring有哪些不同，额外做了哪些事情</p>",
    "options": null,
    "answer": "<p>Spring Boot是在Spring基础上构建的框架，它与原生Spring存在诸多不同，并且额外做了不少事情，以下详细阐述：</p>\n<h3>不同之处</h3>\n<h4>配置方式</h4>\n<ul>\n  <li><strong>原生Spring</strong>：通常需要大量的XML配置文件或者Java配置类来定义Bean、配置数据源、事务管理等。例如，配置一个简单的数据源，需要在XML文件中编写如下代码：</li>\n</ul>\n<pre><code class=\"language-xml\">&#x3C;bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\">\n    &#x3C;property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n    &#x3C;property name=\"url\" value=\"jdbc:mysql://localhost:3306/mydb\"/>\n    &#x3C;property name=\"username\" value=\"root\"/>\n    &#x3C;property name=\"password\" value=\"password\"/>\n&#x3C;/bean>\n</code></pre>\n<ul>\n  <li><strong>Spring Boot</strong>：采用约定大于配置的原则，提供了默认的配置，减少了手动配置的工作量。大部分情况下，只需要在<code>application.properties</code>或<code>application.yml</code>文件中进行简单的配置即可。例如，配置数据源可以这样写：</li>\n</ul>\n<pre><code class=\"language-properties\">spring.datasource.url=jdbc:mysql://localhost:3306/mydb\nspring.datasource.username=root\nspring.datasource.password=password\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n</code></pre>\n<h4>开发效率</h4>\n<ul>\n  <li><strong>原生Spring</strong>：开发过程中需要手动管理依赖，包括版本的兼容性等问题。同时，搭建项目的初始结构和配置环境需要花费较多时间。</li>\n  <li><strong>Spring Boot</strong>：通过Spring Initializr可以快速生成项目骨架，集成了各种常用的依赖，并且会自动处理依赖之间的版本兼容性问题。开发人员可以专注于业务逻辑的实现，大大提高了开发效率。</li>\n</ul>\n<h4>部署方式</h4>\n<ul>\n  <li><strong>原生Spring</strong>：通常需要将应用打包成WAR文件，部署到外部的Servlet容器（如Tomcat、Jetty）中运行。</li>\n  <li><strong>Spring Boot</strong>：支持将应用打包成可执行的JAR文件，内置了Tomcat、Jetty等Servlet容器，直接通过<code>java -jar</code>命令就可以启动应用，简化了部署过程。</li>\n</ul>\n<h3>额外做的事情</h3>\n<h4>自动配置</h4>\n<p>Spring Boot通过自动配置机制，根据项目中引入的依赖自动配置Spring应用上下文。例如，当项目中引入了Spring Data JPA和MySQL驱动依赖时，Spring Boot会自动配置数据源、JPA实体管理器等相关Bean，无需开发人员手动配置。</p>\n<h4>起步依赖</h4>\n<p>Spring Boot提供了一系列的起步依赖（Starter Dependencies），这些依赖是一组经过精心挑选的依赖集合，包含了开发特定类型应用所需的所有依赖。例如，<code>spring-boot-starter-web</code>包含了Spring MVC、Tomcat等开发Web应用所需的依赖，开发人员只需要引入这个起步依赖，就可以快速搭建Web应用。</p>\n<h4>健康检查和监控</h4>\n<p>Spring Boot Actuator模块提供了健康检查、指标监控、审计等功能。通过访问特定的端点（如<code>/actuator/health</code>），可以查看应用的健康状态；通过<code>/actuator/metrics</code>可以查看应用的各种指标数据，方便对应用进行监控和管理。</p>\n<h4>嵌入式服务器支持</h4>\n<p>Spring Boot内置了Tomcat、Jetty、Undertow等Servlet容器，开发人员可以直接在应用中使用这些嵌入式服务器，无需额外安装和配置外部服务器，使得应用的开发和部署更加便捷。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.04138852,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Spring Boot相比原生Spring有哪些不同，额外做了哪些事情。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对Spring Boot和原生Spring特性的理解。</li>\n      <li>Spring Boot在简化开发、配置管理、部署等方面的优势。</li>\n      <li>Spring Boot自动配置机制的原理。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）原生Spring</h4>\n<ul>\n  <li>原生Spring是一个轻量级的Java开发框架，提供了IoC（控制反转）和AOP（面向切面编程）等核心功能，帮助开发者构建企业级应用。</li>\n  <li>但原生Spring的配置较为繁琐，需要开发者手动配置大量的XML文件或Java配置类。</li>\n</ul>\n<h4>（2）Spring Boot</h4>\n<ul>\n  <li>Spring Boot是基于Spring构建的，旨在简化Spring应用的开发过程，提供了快速搭建和开发Spring应用的能力。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）简化配置</h4>\n<ul>\n  <li><strong>原生Spring</strong>：需要手动配置大量的Bean定义、数据源、事务管理器等。例如，使用XML配置文件时，要明确指定每个Bean的类名、属性等信息；使用Java配置类时，也需要编写较多的代码来完成配置。</li>\n  <li><strong>Spring Boot</strong>：采用自动配置机制，根据项目中引入的依赖，自动为应用配置合适的Bean。例如，当项目中引入了Spring Data JPA和数据库驱动依赖时，Spring Boot会自动配置数据源、JPA实体管理器等。开发者只需在<code>application.properties</code>或<code>application.yml</code>中进行少量的配置，如数据库连接信息等。</li>\n</ul>\n<h4>（2）起步依赖</h4>\n<ul>\n  <li><strong>原生Spring</strong>：开发者需要手动管理项目的依赖，要精确地选择和引入所需的库，并且要处理依赖之间的版本冲突问题。</li>\n  <li><strong>Spring Boot</strong>：提供了一系列的起步依赖（Starter Dependencies），这些依赖是一组预先配置好的依赖集合。例如，<code>spring-boot-starter-web</code>包含了Spring MVC、Tomcat等构建Web应用所需的依赖。开发者只需引入相应的起步依赖，Spring Boot会自动处理依赖的版本和传递依赖。</li>\n</ul>\n<h4>（3）嵌入式服务器</h4>\n<ul>\n  <li><strong>原生Spring</strong>：通常需要将应用打包成WAR文件，部署到外部的应用服务器（如Tomcat、Jetty等）中运行。</li>\n  <li><strong>Spring Boot</strong>：内置了嵌入式服务器（如Tomcat、Jetty、Undertow等），可以将应用打包成可执行的JAR文件，直接通过<code>java -jar</code>命令运行。这样简化了部署过程，提高了开发和测试的效率。</li>\n</ul>\n<h4>（4）生产就绪特性</h4>\n<ul>\n  <li><strong>原生Spring</strong>：需要开发者手动集成和配置监控、管理等功能，如使用Spring Actuator等组件时，需要进行较多的配置。</li>\n  <li><strong>Spring Boot</strong>：提供了生产就绪特性，如Spring Actuator，它可以提供应用的健康检查、指标监控、日志管理等功能。开发者只需引入相应的依赖，Spring Boot会自动配置这些功能，方便在生产环境中对应用进行管理和监控。</li>\n</ul>\n<h4>（5）自动配置原理</h4>\n<ul>\n  <li>Spring Boot的自动配置是基于条件注解（如<code>@ConditionalOnClass</code>、<code>@ConditionalOnMissingBean</code>等）实现的。在应用启动时，Spring Boot会根据类路径下的类、配置文件等信息，判断是否需要进行自动配置。如果满足条件，则会自动创建相应的Bean。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<h4>原生Spring配置示例（XML）</h4>\n<pre><code class=\"language-xml\">&#x3C;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    &#x3C;bean id=\"userService\" class=\"com.example.UserService\">\n        &#x3C;property name=\"userRepository\" ref=\"userRepository\"/>\n    &#x3C;/bean>\n\n    &#x3C;bean id=\"userRepository\" class=\"com.example.UserRepository\"/>\n&#x3C;/beans>\n</code></pre>\n<h4>Spring Boot示例</h4>\n<pre><code class=\"language-java\">import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@RestController\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n\n    @GetMapping(\"/\")\n    public String hello() {\n        return \"Hello, Spring Boot!\";\n    }\n}\n</code></pre>\n<p>在这个Spring Boot示例中，只需要一个简单的<code>@SpringBootApplication</code>注解和<code>main</code>方法，就可以启动一个Web应用。</p>\n<h3>5. 常见误区</h3>\n<h4>（1）认为Spring Boot可以完全替代原生Spring</h4>\n<ul>\n  <li>误区：觉得Spring Boot能解决所有问题，不再需要了解原生Spring。</li>\n  <li>纠正：Spring Boot是基于Spring构建的，深入理解原生Spring的核心概念（如IoC、AOP）对于掌握Spring Boot非常重要。在一些复杂场景下，可能还需要手动配置一些Bean，这就需要对原生Spring有一定的了解。</li>\n</ul>\n<h4>（2）忽视自动配置的局限性</h4>\n<ul>\n  <li>误区：认为Spring Boot的自动配置可以满足所有需求。</li>\n  <li>纠正：自动配置是基于一些通用的场景和约定实现的，在一些特殊场景下，可能需要开发者手动配置来覆盖自动配置。</li>\n</ul>\n<h4>（3）不理解起步依赖的本质</h4>\n<ul>\n  <li>误区：只是简单地引入起步依赖，不了解其包含的具体依赖和作用。</li>\n  <li>纠正：应该清楚每个起步依赖包含哪些库，以及它们在项目中的作用，这样才能更好地管理项目的依赖。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“Spring Boot相比原生Spring有诸多不同，并且额外做了很多事情来简化开发过程。</p>\n<p>不同之处在于，原生Spring配置繁琐，需要手动管理大量的Bean定义和依赖，且通常要部署到外部应用服务器；而Spring Boot采用自动配置机制，通过起步依赖简化了依赖管理，内置嵌入式服务器方便部署。</p>\n<p>Spring Boot额外做的事情包括：利用自动配置机制，根据项目依赖自动配置合适的Bean；提供起步依赖，将常用的依赖集合在一起，方便开发者引入；内置嵌入式服务器，使应用可以打包成可执行的JAR文件直接运行；提供生产就绪特性，如Spring Actuator，方便在生产环境中对应用进行管理和监控。</p>\n<p>不过，需要注意的是，Spring Boot不能完全替代原生Spring，在一些复杂场景下仍需手动配置。同时，开发者应理解自动配置的局限性和起步依赖的本质，以便更好地使用Spring Boot。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      Spring Boot的自动配置原理是什么，它是如何实现根据类路径下的依赖自动配置Bean的？\n      提示：思考Spring Boot的核心注解、配置类加载机制以及条件注解的作用。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的Starter机制是怎样的，自定义一个Starter需要做哪些工作？\n      提示：了解Starter的结构和作用，从创建项目、定义自动配置类等方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的嵌入式服务器（如Tomcat）是如何集成和启动的，与传统部署方式有何不同？\n      提示：关注Spring Boot对嵌入式服务器的依赖管理、启动流程以及配置方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的Actuator组件能提供哪些监控和管理功能，如何使用和扩展它？\n      提示：列举Actuator的常见端点，思考如何通过配置和自定义端点来扩展功能。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot在处理多环境配置时是如何实现的，有哪些方式可以切换不同环境的配置？\n      提示：了解Spring Boot的配置文件命名规则、激活配置文件的方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的日志框架是如何集成和配置的，如何自定义日志输出格式和级别？\n      提示：关注Spring Boot默认的日志框架，以及如何通过配置文件或代码进行自定义。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的缓存抽象是如何工作的，如何使用不同的缓存实现（如Redis）？\n      提示：理解Spring Boot的缓存注解和缓存管理器，思考如何集成Redis等缓存。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的事务管理与原生Spring有何不同，如何在Spring Boot中配置和使用事务？\n      提示：对比两者的配置方式，关注Spring Boot的自动配置对事务管理的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot的安全框架（如Spring Security）是如何集成和配置的，如何实现基本的认证和授权？\n      提示：了解Spring Boot对Spring Security的自动配置，思考如何自定义安全规则。\n    </p>\n  </li>\n  <li>\n    <p>\n      Spring Boot在微服务架构中有哪些优势，如何与Spring Cloud结合使用？\n      提示：从简化开发、快速部署等方面考虑优势，了解Spring Cloud的组件和集成方式。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Spring Boot与原生Spring对比))\n    不同之处\n      配置方式\n        原生Spring\n        Spring Boot\n      开发效率\n        原生Spring\n        Spring Boot\n      部署方式\n        原生Spring\n        Spring Boot\n    额外做的事情\n      自动配置\n      起步依赖\n      健康检查和监控\n      嵌入式服务器支持",
    "keynote": "不同之处：\n- 配置方式：原生Spring需大量XML或Java配置类；Spring Boot约定大于配置，在properties或yml文件简单配置\n- 开发效率：原生Spring手动管理依赖、搭建初始结构耗时；Spring Boot用Initializr快速生成骨架，自动处理依赖版本\n- 部署方式：原生Spring打包WAR部署到外部Servlet容器；Spring Boot打包可执行JAR，内置Servlet容器，用java -jar启动\n额外做的事情：\n- 自动配置：根据依赖自动配置Spring应用上下文\n- 起步依赖：提供精心挑选的依赖集合\n- 健康检查和监控：Actuator模块提供相关功能\n- 嵌入式服务器支持：内置多种Servlet容器",
    "group_id": 7,
    "kps": [
      "基础知识"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "途虎养车",
      "科大讯飞",
      "亿纬锂能",
      "卓望",
      "比亚迪",
      "保融科技",
      "神测数据",
      "美团",
      "阿里巴巴",
      "阿里菜鸟",
      "快手",
      "OPPO",
      "联想集团",
      "贝壳",
      "用友",
      "小红书",
      "北京某养老中厂",
      "小米",
      "蚂蚁集团",
      "字节跳动",
      "百度",
      "京东",
      "北京某公司"
    ]
  }
}