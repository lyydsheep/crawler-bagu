{
  "success": true,
  "data": {
    "id": 8373,
    "name": "<p>JWT 的原理是什么</p>",
    "options": null,
    "answer": "<p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在网络应用环境中以一种紧凑和独立的方式安全地传输信息。JWT 经常被用于身份验证和信息交换。以下是 JWT 的基本原理和结构：</p>\n<h3>JWT 的结构</h3>\n<p>JWT 通常由三部分组成，使用句点（<code>.</code>）分隔：</p>\n<ol>\n  <li>\n    <p><strong>头部（Header）</strong>：</p>\n    <ul>\n      <li>头部通常由两个部分组成：令牌的类型（通常是 \"JWT\"）以及所使用的签名算法（如 HMAC SHA256 或 RSA）。</li>\n      <li>示例：\n        <pre><code class=\"language-json\">{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n</code></pre>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>有效载荷（Payload）</strong>：</p>\n    <ul>\n      <li>载荷部分包含了声明（Claims），这些声明是关于实体（通常是用户）和其他数据的。</li>\n      <li>声明分为三类：\n        <ul>\n          <li><strong>注册声明</strong>：如 <code>iss</code>（发行者）、<code>exp</code>（过期时间）、<code>sub</code>（主题）、<code>aud</code>（受众）等。</li>\n          <li><strong>公共声明</strong>：可以自定义的，但要避免命名冲突，可以在 IANA JWT 声明注册表中注册。</li>\n          <li><strong>私有声明</strong>：自定义声明，供两方使用，没有标准定义。</li>\n        </ul>\n      </li>\n      <li>示例：\n        <pre><code class=\"language-json\">{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n</code></pre>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>签名（Signature）</strong>：</p>\n    <ul>\n      <li>为了生成签名部分，需要将编码后的头部、有效载荷和一个密钥结合起来，然后使用指定的算法进行哈希处理。</li>\n      <li>示例代码（使用 HMAC SHA256）：\n        <pre><code class=\"language-plaintext\">HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  secret)\n</code></pre>\n      </li>\n    </ul>\n  </li>\n</ol>\n<h3>JWT 的工作原理</h3>\n<ol>\n  <li>\n    <p><strong>用户身份验证</strong>：</p>\n    <ul>\n      <li>用户登录系统后，服务器验证用户的凭证（如用户名和密码）。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>生成 JWT</strong>：</p>\n    <ul>\n      <li>验证成功后，服务器生成一个 JWT，包括用户的基本信息和过期时间等。</li>\n      <li>服务器将 JWT 返回给客户端。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>客户端存储</strong>：</p>\n    <ul>\n      <li>客户端通常将 JWT 存储在本地存储或 cookie 中。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>后续请求</strong>：</p>\n    <ul>\n      <li>客户端在之后的请求中，输入 JWT，通常会将其放在 <code>Authorization</code> 头部，格式为 <code>Bearer &#x3C;token></code>。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>验证 JWT</strong>：</p>\n    <ul>\n      <li>服务器接收到请求后，解析 JWT，验证签名的有效性和过期时间等。</li>\n      <li>如果有效，服务器可以根据 JWT 中的信息，确认用户的身份并处理请求。</li>\n    </ul>\n  </li>\n</ol>\n<h3>优点和缺点</h3>\n<p><strong>优点</strong>：</p>\n<ul>\n  <li>无状态：JWT 允许无状态的身份验证，减少服务器存储会话的压力。</li>\n  <li>跨域支持：可用于不同域之间的认证。</li>\n  <li>方便传输：JWT 是基于 JSON 的格式，可以在 URL、HTTP 请求头和 POST 数据中传输。</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n  <li>难以撤销：一旦 JWT 发放，无法在服务器端撤销，需设置过期时间。</li>\n  <li>大小问题：JWT 较大可能影响响应体的大小。</li>\n</ul>\n<p>综上所述，JWT 是一种简洁、高效的身份验证机制，适用于前端工程化中的用户身份管理。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.0005488474,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：JWT（JSON Web Token）的原理是什么。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对JWT概念的理解。</li>\n      <li>JWT的组成结构。</li>\n      <li>JWT的生成过程。</li>\n      <li>JWT的验证过程。</li>\n      <li>JWT在身份验证中的应用原理。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）身份验证需求</h4>\n<p>在Web应用中，需要一种安全、高效的方式来验证用户身份。传统的基于会话（session）的身份验证方式存在一些问题，如跨域问题、服务器端存储压力等。JWT是一种基于JSON的开放标准（RFC 7519），用于在各方之间安全地传输声明。</p>\n<h4>（2）JSON</h4>\n<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于阅读和编写，同时也易于机器解析和生成。JWT使用JSON格式来表示用户声明。</p>\n<h3>3. 解析</h3>\n<h4>（1）JWT的组成</h4>\n<p>JWT由三部分组成，通过点（.）分隔：</p>\n<ul>\n  <li><strong>Header（头部）</strong>：包含两部分信息，令牌的类型（通常是JWT）和使用的签名算法，如HMAC SHA256或RSA。它是一个JSON对象，然后进行Base64Url编码。</li>\n  <li><strong>Payload（负载）</strong>：包含声明（Claims），声明是关于实体（通常是用户）和其他数据的声明。声明分为三种类型：注册声明、公开声明和私有声明。同样，它也是一个JSON对象，经过Base64Url编码。</li>\n  <li><strong>Signature（签名）</strong>：为了创建签名部分，需要使用编码后的Header、编码后的Payload、一个密钥（secret）和Header中指定的签名算法进行签名。签名用于验证消息在传输过程中没有被更改，并且在使用私钥签名的情况下，还可以验证JWT的发送者的身份。</li>\n</ul>\n<h4>（2）JWT的生成过程</h4>\n<ul>\n  <li>客户端向服务器发送登录请求，提供用户名和密码。</li>\n  <li>服务器验证用户名和密码，如果验证成功，服务器根据用户信息生成Header和Payload。</li>\n  <li>服务器使用指定的签名算法和密钥对Header和Payload进行签名，生成Signature。</li>\n  <li>将编码后的Header、Payload和Signature用点连接起来，形成完整的JWT。</li>\n  <li>服务器将JWT返回给客户端。</li>\n</ul>\n<h4>（3）JWT的验证过程</h4>\n<ul>\n  <li>客户端在后续请求中，将JWT放在请求头（通常是Authorization字段）中发送给服务器。</li>\n  <li>服务器接收到请求后，从请求头中提取JWT，并将其拆分为Header、Payload和Signature。</li>\n  <li>服务器使用相同的签名算法和密钥对Header和Payload进行签名，生成新的Signature。</li>\n  <li>将新生成的Signature与接收到的Signature进行比较，如果相同，则说明JWT没有被篡改，验证通过。</li>\n  <li>服务器还可以验证Payload中的声明，如过期时间等。</li>\n</ul>\n<h4>（4）JWT在身份验证中的应用原理</h4>\n<ul>\n  <li>服务器不存储JWT的状态，所有信息都包含在JWT本身中，因此是无状态的。这使得JWT非常适合用于分布式系统和跨域应用。</li>\n  <li>客户端在登录成功后，将JWT存储在本地（如localStorage或cookie）。</li>\n  <li>在后续请求中，客户端将JWT发送给服务器，服务器通过验证JWT来确认用户身份。</li>\n</ul>\n<h3>4. 示例代码（Node.js）</h3>\n<pre><code class=\"language-javascript\">const jwt = require('jsonwebtoken');\n\n// 生成JWT\nconst secretKey = 'yourSecretKey';\nconst payload = { userId: 123, username: 'john_doe' };\nconst token = jwt.sign(payload, secretKey, { expiresIn: '1h' });\nconsole.log('Generated JWT:', token);\n\n// 验证JWT\njwt.verify(token, secretKey, (err, decoded) => {\n  if (err) {\n    console.log('Verification failed:', err.message);\n  } else {\n    console.log('Verification successful:', decoded);\n  }\n});\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）认为JWT是加密的</h4>\n<ul>\n  <li>误区：认为JWT中的信息是加密的，其他人无法获取。</li>\n  <li>纠正：JWT只是进行了Base64Url编码，而不是加密。任何人都可以解码Header和Payload，但Signature可以确保信息没有被篡改。</li>\n</ul>\n<h4>（2）将敏感信息放在Payload中</h4>\n<ul>\n  <li>误区：将敏感信息（如密码）放在Payload中。</li>\n  <li>纠正：由于Payload可以被解码，不应该将敏感信息放在其中。</li>\n</ul>\n<h4>（3）不设置过期时间</h4>\n<ul>\n  <li>误区：生成JWT时不设置过期时间，导致JWT永远有效。</li>\n  <li>纠正：为了安全起见，应该设置合理的过期时间，防止JWT被长期滥用。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“JWT（JSON Web Token）是一种用于在各方之间安全地传输声明的开放标准。它的原理基于其独特的组成和生成、验证过程。</p>\n<p>JWT由三部分组成，分别是Header（头部）、Payload（负载）和Signature（签名）。Header包含令牌类型和签名算法信息，Payload包含用户声明，Signature用于验证消息未被篡改。</p>\n<p>在生成JWT时，服务器根据用户信息生成Header和Payload，然后使用指定的签名算法和密钥对其进行签名，生成Signature，最后将三者用点连接起来形成完整的JWT并返回给客户端。</p>\n<p>客户端在后续请求中将JWT发送给服务器，服务器接收到后，将其拆分，重新生成Signature并与接收到的进行比较，同时验证Payload中的声明，以此来确认JWT的有效性和用户身份。</p>\n<p>JWT是无状态的，适合分布式系统和跨域应用。但需要注意的是，JWT只是进行了Base64Url编码而非加密，不应将敏感信息放在Payload中，并且应该设置合理的过期时间。”</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>JWT的结构是什么？</strong></p>\n    <ul>\n      <li>提示：请详细描述JWT的三个部分及其各自的功能。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>JWT如何保证数据的完整性？</strong></p>\n    <ul>\n      <li>提示：讨论签名的作用和使用的加密算法。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>什么情况下你会选择使用JWT，而不是传统的Session？</strong></p>\n    <ul>\n      <li>提示：对比无状态和有状态的认证方式的优缺点。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>JWT的有效期管理是如何实现的？</strong></p>\n    <ul>\n      <li>提示：谈谈过期时间的设置和如何处理过期的Token。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何处理JWT的刷新？</strong></p>\n    <ul>\n      <li>提示：阐述如何设计一个刷新Token机制。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>JWT的安全性考虑有哪些？</strong></p>\n    <ul>\n      <li>提示：讨论常见的攻击方式和防范措施。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何在前端实现JWT的存储和传输？</strong></p>\n    <ul>\n      <li>提示：比较不同存储方法的优缺点，如localStorage和cookie。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果JWT被泄露，应该如何处理？</strong></p>\n    <ul>\n      <li>提示：分析如何检测和响应Token的滥用。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在多角色用户系统中，如何使用JWT进行权限控制？</strong></p>\n    <ul>\n      <li>提示：谈谈在Token中存储角色信息的方案。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何处理跨域问题时使用JWT进行认证？</strong></p>\n    <ul>\n      <li>提示：讨论CORS、cookie和JWT交互的策略。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  JWT((JWT))\n    结构\n      头部\n        令牌类型\n        签名算法\n      有效载荷\n        注册声明\n        公共声明\n        私有声明\n      签名\n    工作原理\n      用户身份验证\n      生成 JWT\n      客户端存储\n      后续请求\n      验证 JWT\n    优点\n      无状态\n      跨域支持\n      方便传输\n    缺点\n      难以撤销\n      大小问题",
    "keynote": "- JWT 是一种用于安全地在网络应用环境中传输信息的开放标准。\n- JWT 由头部、有效载荷和签名三部分组成，各部分使用句点分隔。\n- 头部包含令牌类型及签名算法。\n- 有效载荷包含了关于实体（通常是用户）的信息和其他数据，分为注册声明、公共声明和私有声明。\n- 签名部分通过结合编码后的头部、有效载荷以及密钥，并利用指定算法生成。\n- 用户登录成功后，服务器生成并返回 JWT 给客户端。\n- 客户端将 JWT 存储于本地或cookie中，在后续请求时将其置于Authorization头部。\n- 服务器接收到带有JWT的请求时会进行解析与验证。\n- JWT 的主要优点包括无状态、跨域支持和便于传输。\n- JWT 的缺点主要是难以撤销已发放的令牌以及可能存在的大小问题。",
    "group_id": 68,
    "kps": [
      "前端安全",
      "前端工程化实践"
    ],
    "years": [
      2023
    ],
    "corps": [
      "顺丰"
    ]
  }
}