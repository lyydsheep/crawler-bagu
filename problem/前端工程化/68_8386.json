{
  "success": true,
  "data": {
    "id": 8386,
    "name": "<p>npm 执行命令传递参数时，为何需要双横线</p>",
    "options": null,
    "answer": "<p>在前端工程化中，使用 npm 执行命令时，双横线（<code>--</code>）的作用是用来分隔 npm 命令的参数和你传递给脚本的自定义参数。</p>\n<h3>理由</h3>\n<ol>\n  <li>\n    <p><strong>区分命令和参数</strong>：</p>\n    <ul>\n      <li>在使用 <code>npm run &#x3C;script></code> 命令时，npm 会解析命令，并处理一些特定的选项，比如版本、缓存等。通过在命令后加上 <code>--</code>，可以明确告诉 npm 后面的内容是传递给实际运行的脚本的自定义参数，而不是 npm 自身的选项。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>避免冲突</strong>：</p>\n    <ul>\n      <li>如果没有 <code>--</code>，npm 可能会将后面的参数视为 npm 本身的参数（如 <code>--verbose</code>、<code>--global</code> 等），这可能导致脚本无法接收到你想要传递的参数。</li>\n    </ul>\n  </li>\n</ol>\n<h3>示例</h3>\n<p>例如，你有一个 npm 脚本定义如下：</p>\n<pre><code class=\"language-json\">\"scripts\": {\n  \"build\": \"webpack --config webpack.config.js\"\n}\n</code></pre>\n<p>如果你想要给这个构建命令传递一个环境变量，比如 <code>--mode production</code>，你应该这样执行命令：</p>\n<pre><code class=\"language-bash\">npm run build -- --mode production\n</code></pre>\n<p>这里的第一个 <code>--</code> 是告诉 npm 停止解析选项，后面的 <code>--mode production</code> 会被传递给 <code>webpack</code>，而不是被 npm 干预。</p>\n<h3>小结</h3>\n<p>使用双横线是一个约定，确保你可以在 npm 脚本中安全、有效地传递参数，而不被 npm 本身的解析机制干扰。</p>",
    "type": 6,
    "level": 1,
    "freq": 0,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：npm执行命令传递参数时，为何需要双横线？</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对npm命令执行机制的理解。</li>\n      <li>npm脚本与底层命令的关系。</li>\n      <li>双横线在npm命令参数传递中的作用。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）npm脚本</h4>\n<ul>\n  <li>npm允许在<code>package.json</code>文件里定义脚本命令，借助<code>npm run</code>来执行这些脚本。例如：</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  }\n}\n</code></pre>\n<p>执行<code>npm run start</code>就相当于执行<code>node server.js</code>。</p>\n<h4>（2）命令行参数传递</h4>\n<ul>\n  <li>在执行命令时，经常需要给命令传递参数，不同命令对参数的解析方式存在差异。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）npm命令解析流程</h4>\n<ul>\n  <li>当执行<code>npm run &#x3C;script-name></code>时，npm会读取<code>package.json</code>中对应的脚本命令，然后执行。</li>\n  <li>npm自身也有一套参数解析规则，它会先解析自己的参数。例如<code>npm run --help</code>，这里<code>--help</code>是npm的参数，用于显示帮助信息。</li>\n</ul>\n<h4>（2）双横线的作用</h4>\n<ul>\n  <li>双横线<code>--</code>是一个分隔符，用于告诉npm停止解析自身的参数，将后面的参数传递给实际要执行的脚本命令。</li>\n  <li>比如有这样的<code>package.json</code>：</li>\n</ul>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"test\": \"jest\"\n  }\n}\n</code></pre>\n<p>若要给<code>jest</code>命令传递参数<code>--coverage</code>，不能直接执行<code>npm run test --coverage</code>，因为npm会把<code>--coverage</code>当作自己的参数。正确的做法是<code>npm run test -- --coverage</code>，双横线之后的<code>--coverage</code>就会被传递给<code>jest</code>命令。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-json\">{\n  \"scripts\": {\n    \"build\": \"webpack --config webpack.config.js\"\n  }\n}\n</code></pre>\n<p>如果想给<code>webpack</code>命令传递<code>--mode production</code>参数，需要这样执行：</p>\n<pre><code class=\"language-bash\">npm run build -- --mode production\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）不使用双横线传递参数</h4>\n<ul>\n  <li>误区：直接在<code>npm run</code>命令后添加参数，期望参数能传递给脚本命令。</li>\n  <li>纠正：要使用双横线分隔，确保参数传递给实际执行的脚本命令。</li>\n</ul>\n<h4>（2）误解双横线的用途</h4>\n<ul>\n  <li>误区：不清楚双横线是用于分隔npm参数和脚本命令参数的。</li>\n  <li>纠正：明确双横线的作用是告诉npm停止解析自身参数，将后续参数传递给脚本命令。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>“npm执行命令传递参数时需要双横线，是因为npm自身有一套参数解析规则，它会先解析自己的参数。双横线作为分隔符，能告诉npm停止解析自身的参数，将后面的参数传递给实际要执行的脚本命令。</p>\n<p>例如，在<code>package.json</code>中定义了<code>\"test\": \"jest\"</code>脚本，若要给<code>jest</code>命令传递<code>--coverage</code>参数，需执行<code>npm run test -- --coverage</code>，否则<code>--coverage</code>会被npm当作自身的参数。所以，为了正确地将参数传递给脚本命令，需要使用双横线进行分隔。”</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>npm scripts 的生命周期钩子是什么？</strong></p>\n    <ul>\n      <li>提示：了解在 npm scripts 中不同生命周期的执行顺序及其用途。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何创建自己的 npm 包？</strong></p>\n    <ul>\n      <li>提示：询问包的结构、package.json 的配置及发布流程。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>npm 和 yarn 的区别是什么？</strong></p>\n    <ul>\n      <li>提示：可以讨论包的管理方式、速度、锁文件等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何使用 npm 处理依赖的版本冲突？</strong></p>\n    <ul>\n      <li>提示：可以提及 semver、caret 和 tilde 符号的使用场景。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>npm 依赖的安装和卸载过程是怎样的？</strong></p>\n    <ul>\n      <li>提示：考察对 npm 依赖树的理解及其对项目的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何管理全局和本地安装的 npm 包？</strong></p>\n    <ul>\n      <li>提示：讨论全局安装的用途和可能的版本冲突问题。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>npm 5 引入的 package-lock.json 有什么作用？</strong></p>\n    <ul>\n      <li>提示：探讨其对依赖关系管理和项目稳定性的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>当你使用 npm 安装依赖时，npm 会做些什么？</strong></p>\n    <ul>\n      <li>提示：可以深入到解析依赖、下载、生成 node_modules 目录等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你如何处理 CI/CD 中的 npm 依赖问题？</strong></p>\n    <ul>\n      <li>提示：讨论环境的配置、依赖的缓存策略等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在前端工程化中，为什么需要构建工具？</strong></p>\n    <ul>\n      <li>提示：可以讨论构建工具的作用以及常用工具的比较。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((npm命令中的双横线作用))\n    理由\n      区分命令和参数\n      避免冲突\n    示例\n    小结",
    "keynote": "- 双横线（`--`）用于分隔npm命令的参数与传递给脚本的自定义参数。\n- 使用`--`可以让npm区分哪些是自身选项，哪些是传递给实际运行脚本的参数。\n- 不使用`--`可能导致参数被误认为是npm自身的选项，从而引起问题。\n- 在执行带有额外参数的npm脚本时，应该在`npm run <script>`后立即添加`--`，然后才是自定义参数。",
    "group_id": 68,
    "kps": [
      "Webpack基础与进阶",
      "前端工程化实践"
    ],
    "years": null,
    "corps": null
  }
}