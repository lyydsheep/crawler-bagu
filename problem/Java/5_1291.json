{"success":true,"data":{"id":1291,"name":"<p>HashMap的扩容机制是怎样的</p>","options":null,"answer":"<p>在 Java 中，<code>HashMap</code> 的扩容机制主要涉及以下几个方面：</p>\n<h3>1. <strong>负载因子和初始容量</strong></h3>\n<ul>\n  <li><strong>初始容量（Initial Capacity）</strong>：<code>HashMap</code> 的默认初始容量是 16。</li>\n  <li><strong>负载因子（Load Factor）</strong>：默认负载因子是 0.75。这个值决定了在何时进行扩容。具体来说，当 <code>HashMap</code> 中的元素数量超过当前容量（初始容量 × 负载因子）时，会触发扩容。</li>\n</ul>\n<h3>2. <strong>扩容过程</strong></h3>\n<ul>\n  <li>当存入一个新元素使得 <code>HashMap</code> 的元素数量超过容量 × 负载因子时，<code>HashMap</code> 将进行扩容。</li>\n  <li>扩容的过程包括：\n    <ol>\n      <li>创建一个新的数组，其容量是原容量的两倍。</li>\n      <li>将原数组中的所有键值对重新哈希并插入到新的数组中。</li>\n    </ol>\n  </li>\n</ul>\n<h3>3. <strong>重新哈希</strong></h3>\n<ul>\n  <li>重新哈希的过程会根据新的容量计算新的索引。因为数组的容量增加了，某些键可能会在新的数组中位于不同的位置。</li>\n</ul>\n<h3>4. <strong>扩容时的性能</strong></h3>\n<ul>\n  <li>扩容是一个耗时的操作。这是因为它需要遍历原有的所有元素，并把它们重新插入到新的数组中。在扩容期间，往往可能会影响性能，特别是当存储的元素数量非常大时。</li>\n</ul>\n<h3>5. <strong>自定义容量和负载因子</strong></h3>\n<ul>\n  <li>在创建 <code>HashMap</code> 时，可以指定初始容量和负载因子，从而可以根据预期元素数量和需要的性能来优化 <code>HashMap</code>。</li>\n</ul>\n<h3>例子：</h3>\n<pre><code class=\"language-java\">HashMap&#x3C;String, Integer> map = new HashMap&#x3C;>(16, 0.75f);\n</code></pre>\n<h3>总结</h3>\n<p><code>HashMap</code> 的扩容机制是一种动态调整存储容量的策略，通过控制负载因子来决定何时进行扩容，以平衡时间复杂度和空间复杂度。扩容虽然能够提供更高的存储能力，但也伴随着性能损失，因此在使用时要合理设计容量与负载因子。</p>","type":6,"level":3,"freq":0.007882291,"analysis":"<h3><strong>1. 题目核心</strong></h3>\n<ul>\n  <li><strong>问题</strong>：HashMap的扩容机制是怎样的。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对HashMap底层数据结构的理解。</li>\n      <li>扩容的触发条件。</li>\n      <li>扩容的过程。</li>\n      <li>扩容时数据的迁移。</li>\n    </ul>\n  </li>\n</ul>\n<h3><strong>2. 背景知识</strong></h3>\n<h4><strong>（1）HashMap的数据结构</strong></h4>\n<p>HashMap底层是数组 + 链表 + 红黑树的结构。数组被称为哈希桶，每个桶存储一个链表或红黑树的头节点。当发生哈希冲突时，新的键值对会被添加到对应桶的链表或红黑树中。</p>\n<h4><strong>（2）重要属性</strong></h4>\n<ul>\n  <li><code>capacity</code>：哈希表的容量，初始默认值为16，每次扩容后变为原来的2倍。</li>\n  <li><code>loadFactor</code>：负载因子，默认值为0.75f。</li>\n  <li><code>threshold</code>：阈值，<code>threshold = capacity * loadFactor</code>，当HashMap中的键值对数量超过阈值时，会触发扩容操作。</li>\n</ul>\n<h3><strong>3. 解析</strong></h3>\n<h4><strong>（1）扩容的触发条件</strong></h4>\n<p>当HashMap中的键值对数量（<code>size</code>）超过阈值（<code>threshold</code>）时，就会触发扩容操作。例如，初始容量为16，负载因子为0.75f，那么阈值为16 * 0.75 = 12，当键值对数量达到13时，就会进行扩容。</p>\n<h4><strong>（2）扩容的过程</strong></h4>\n<ul>\n  <li>创建一个新的数组，其容量是原数组的2倍。</li>\n  <li>重新计算原数组中每个键值对在新数组中的位置，并将其迁移到新数组中。</li>\n</ul>\n<h4><strong>（3）数据迁移</strong></h4>\n<ul>\n  <li><strong>链表节点的迁移</strong>：对于链表中的节点，会根据其哈希值重新计算在新数组中的位置。由于新数组容量是原数组的2倍，所以节点要么在原位置，要么在原位置 + 原数组容量的位置。</li>\n  <li><strong>红黑树节点的迁移</strong>：如果红黑树中的节点数量小于等于6，红黑树会退化为链表；否则，红黑树会保持不变，同样根据节点的哈希值重新计算在新数组中的位置。</li>\n</ul>\n<h4><strong>（4）性能影响</strong></h4>\n<p>扩容操作需要重新分配数组并迁移数据，是一个比较耗时的操作。因此，在创建HashMap时，如果能预估存储的键值对数量，可以指定合适的初始容量，以减少扩容的次数。</p>\n<h3><strong>4. 示例代码</strong></h3>\n<pre><code class=\"language-java\">import java.util.HashMap;\n\npublic class HashMapResizeExample {\n    public static void main(String[] args) {\n        HashMap&#x3C;Integer, String> map = new HashMap&#x3C;>(4); // 初始容量为4\n        for (int i = 0; i &#x3C; 4; i++) {\n            map.put(i, \"value\" + i);\n        }\n        System.out.println(\"Before resize, size: \" + map.size() + \", capacity: \" + tableSizeFor(map));\n        map.put(4, \"value4\"); // 触发扩容\n        System.out.println(\"After resize, size: \" + map.size() + \", capacity: \" + tableSizeFor(map));\n    }\n\n    private static int tableSizeFor(HashMap&#x3C;?,?> map) {\n        try {\n            java.lang.reflect.Field tableField = HashMap.class.getDeclaredField(\"table\");\n            tableField.setAccessible(true);\n            Object[] table = (Object[]) tableField.get(map);\n            return table!= null? table.length : 0;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return 0;\n        }\n    }\n}\n</code></pre>\n<ul>\n  <li>在这个例子中，初始容量为4，负载因子为0.75f，阈值为4 * 0.75 = 3。当添加第4个键值对时，会触发扩容操作，容量变为原来的2倍，即8。</li>\n</ul>\n<h3><strong>5. 常见误区</strong></h3>\n<h4><strong>（1）认为扩容只和容量有关</strong></h4>\n<ul>\n  <li>误区：只关注HashMap的容量，忽略了负载因子和阈值的作用。</li>\n  <li>纠正：扩容是由键值对数量和阈值的比较决定的，而阈值是由容量和负载因子计算得出的。</li>\n</ul>\n<h4><strong>（2）不清楚数据迁移的过程</strong></h4>\n<ul>\n  <li>误区：只知道扩容会创建新数组，但不清楚原数组中的数据是如何迁移到新数组中的。</li>\n  <li>纠正：需要了解链表和红黑树节点迁移的规则，以及红黑树可能会退化为链表的情况。</li>\n</ul>\n<h4><strong>（3）忽视扩容的性能影响</strong></h4>\n<ul>\n  <li>误区：不考虑扩容操作对性能的影响，在创建HashMap时不指定合适的初始容量。</li>\n  <li>纠正：在性能敏感的场景中，应尽量减少扩容的次数，通过预估存储的键值对数量来指定合适的初始容量。</li>\n</ul>\n<h3><strong>6. 总结回答</strong></h3>\n<p>HashMap的扩容机制是：当HashMap中的键值对数量（<code>size</code>）超过阈值（<code>threshold</code>，<code>threshold = capacity * loadFactor</code>）时，会触发扩容操作。扩容时，会创建一个新的数组，其容量是原数组的2倍，然后重新计算原数组中每个键值对在新数组中的位置，并将其迁移到新数组中。</p>\n<p>对于链表中的节点，会根据其哈希值重新计算在新数组中的位置，节点要么在原位置，要么在原位置 + 原数组容量的位置。如果红黑树中的节点数量小于等于6，红黑树会退化为链表；否则，红黑树会保持不变，同样根据节点的哈希值重新计算在新数组中的位置。</p>\n<p>扩容操作比较耗时，因为需要重新分配数组并迁移数据。所以在创建HashMap时，如果能预估存储的键值对数量，应指定合适的初始容量，以减少扩容的次数。</p>","more_ask":"<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>HashMap的负载因子是什么？如何影响性能？</strong></p>\n    <ul>\n      <li>提示：可以讨论负载因子的默认值以及增大或减小它对内存和速度的影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>HashMap和Hashtable有什么主要的区别？</strong></p>\n    <ul>\n      <li>提示：考虑线程安全、性能和设计方面的不同。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>HashMap在存储大量数据时可能遇到哪些性能问题？</strong></p>\n    <ul>\n      <li>提示：涉及碰撞处理、链表转红黑树等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如果给定一个自定义的键对象，你会如何实现<code>hashCode()</code>和<code>equals()</code>方法？</strong></p>\n    <ul>\n      <li>提示：讨论这些方法对HashMap的工作方式的重要性。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在什么情况下HashMap不适合使用，应该选择什么替代方案？</strong></p>\n    <ul>\n      <li>提示：考虑线程安全、顺序访问或其他条件下的选择。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>HashMap的初始容量对扩容过程的影响是什么？</strong></p>\n    <ul>\n      <li>提示：讨论初始容量的设置方式及其对性能的潜在影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>何时需要手动调整HashMap的大小，如何进行？</strong></p>\n    <ul>\n      <li>提示：考虑特定场景，比如性能监控或数据特性分析。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在使用HashMap时，如何避免过多的碰撞？</strong></p>\n    <ul>\n      <li>提示：涉及选择合适的哈希函数和合理的键设计。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>Java 8中HashMap的实现有什么新的优化，我想问问关于红黑树的部分。</strong></p>\n    <ul>\n      <li>提示：讨论链表到红黑树转化的条件和影响。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你能解释一下ConcurrentHashMap与HashMap的比较吗？</strong></p>\n    <ul>\n      <li>提示：讨论线程安全实现方式和性能差异。</li>\n    </ul>\n  </li>\n</ol>","mindmap":"mindmap\n  root((HashMap扩容机制))\n    负载因子和初始容量\n      初始容量\n      负载因子\n    扩容过程\n      触发条件\n      创建新数组\n      重新哈希并插入\n    重新哈希\n      计算新的索引\n    扩容时的性能\n      遍历所有元素\n      影响性能\n    自定义容量和负载因子\n      指定初始容量\n      指定负载因子","keynote":"- `HashMap` 的默认初始容量为 16。\n- 默认负载因子是 0.75，决定何时进行扩容。\n- 当元素数量超过容量乘以负载因子时触发扩容。\n- 扩容过程中创建的新数组容量是原数组的两倍。\n- 重新哈希根据新容量计算键值对的新位置。\n- 扩容涉及遍历旧数组中的所有元素，可能影响性能。\n- 可以在创建 `HashMap` 时自定义初始容量和负载因子。","group_id":5,"kps":["集合框架"],"years":[2025,2024,2023,2022],"corps":["德勤","车来了","快手","途虎养车","上海某公司","字节跳动","首约科技","美团优选","钉钉","睿联技术","小红书","经纬恒润","美团","阿里巴巴","华为","小米","中兴通讯","携程","顺丰","用友","唯品会","饿了么","安恒","深圳市优必选科技","百度","广东某不知名小厂","腾讯"]}}