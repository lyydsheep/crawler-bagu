{
  "success": true,
  "data": {
    "id": 16129,
    "name": "<p>请介绍常用的Java集合类，以及哪种集合可以保证有序并去重</p>",
    "options": null,
    "answer": "<h3>常用的 Java 集合类</h3>\n<p>Java 集合框架主要分为两大体系：<code>Collection</code> 和 <code>Map</code>。<code>Collection</code> 接口存储一组不唯一、无序的对象，它有三个主要的子接口：<code>List</code>、<code>Set</code> 和 <code>Queue</code>；<code>Map</code> 接口存储键值对，键是唯一的。以下是常用集合类的介绍：</p>\n<h4>1. <code>List</code> 接口</h4>\n<p><code>List</code> 是一个有序的集合，允许存储重复的元素。常用的实现类有：</p>\n<ul>\n  <li><strong><code>ArrayList</code></strong>：基于动态数组实现，支持随机访问，插入和删除操作在列表末尾效率较高，在中间或开头效率较低。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.ArrayList;\nimport java.util.List;\n\npublic class ArrayListExample {\n    public static void main(String[] args) {\n        List&#x3C;String> list = new ArrayList&#x3C;>();\n        list.add(\"apple\");\n        list.add(\"banana\");\n        System.out.println(list.get(0)); // 输出: apple\n    }\n}\n</code></pre>\n<ul>\n  <li><strong><code>LinkedList</code></strong>：基于双向链表实现，插入和删除操作效率较高，随机访问效率较低。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.LinkedList;\nimport java.util.List;\n\npublic class LinkedListExample {\n    public static void main(String[] args) {\n        List&#x3C;String> list = new LinkedList&#x3C;>();\n        list.add(\"apple\");\n        list.add(\"banana\");\n        System.out.println(list.get(0)); // 输出: apple\n    }\n}\n</code></pre>\n<h4>2. <code>Set</code> 接口</h4>\n<p><code>Set</code> 是一个不允许存储重复元素的集合。常用的实现类有：</p>\n<ul>\n  <li><strong><code>HashSet</code></strong>：基于哈希表实现，不保证元素的顺序，插入、删除和查找操作的时间复杂度为 O(1)。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.HashSet;\nimport java.util.Set;\n\npublic class HashSetExample {\n    public static void main(String[] args) {\n        Set&#x3C;String> set = new HashSet&#x3C;>();\n        set.add(\"apple\");\n        set.add(\"banana\");\n        set.add(\"apple\"); // 重复元素，不会被添加\n        System.out.println(set.size()); // 输出: 2\n    }\n}\n</code></pre>\n<ul>\n  <li><strong><code>TreeSet</code></strong>：基于红黑树实现，元素会按照自然顺序或指定的比较器顺序进行排序，插入、删除和查找操作的时间复杂度为 O(log n)。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.TreeSet;\nimport java.util.Set;\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        Set&#x3C;String> set = new TreeSet&#x3C;>();\n        set.add(\"apple\");\n        set.add(\"banana\");\n        set.add(\"cherry\");\n        for (String s : set) {\n            System.out.println(s); // 按字典序输出\n        }\n    }\n}\n</code></pre>\n<h4>3. <code>Queue</code> 接口</h4>\n<p><code>Queue</code> 是一个先进先出（FIFO）的集合。常用的实现类有：</p>\n<ul>\n  <li><strong><code>LinkedList</code></strong>：除了实现 <code>List</code> 接口，还实现了 <code>Queue</code> 接口，可以作为队列使用。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.LinkedList;\nimport java.util.Queue;\n\npublic class QueueExample {\n    public static void main(String[] args) {\n        Queue&#x3C;String> queue = new LinkedList&#x3C;>();\n        queue.add(\"apple\");\n        queue.add(\"banana\");\n        System.out.println(queue.poll()); // 输出: apple\n    }\n}\n</code></pre>\n<ul>\n  <li><strong><code>PriorityQueue</code></strong>：基于堆实现，元素按照自然顺序或指定的比较器顺序进行排序，每次取出的元素是队列中优先级最高的元素。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.PriorityQueue;\nimport java.util.Queue;\n\npublic class PriorityQueueExample {\n    public static void main(String[] args) {\n        Queue&#x3C;Integer> queue = new PriorityQueue&#x3C;>();\n        queue.add(3);\n        queue.add(1);\n        queue.add(2);\n        System.out.println(queue.poll()); // 输出: 1\n    }\n}\n</code></pre>\n<h4>4. <code>Map</code> 接口</h4>\n<p><code>Map</code> 存储键值对，键是唯一的。常用的实现类有：</p>\n<ul>\n  <li><strong><code>HashMap</code></strong>：基于哈希表实现，不保证键值对的顺序，插入、删除和查找操作的时间复杂度为 O(1)。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.HashMap;\nimport java.util.Map;\n\npublic class HashMapExample {\n    public static void main(String[] args) {\n        Map&#x3C;String, Integer> map = new HashMap&#x3C;>();\n        map.put(\"apple\", 1);\n        map.put(\"banana\", 2);\n        System.out.println(map.get(\"apple\")); // 输出: 1\n    }\n}\n</code></pre>\n<ul>\n  <li><strong><code>TreeMap</code></strong>：基于红黑树实现，键会按照自然顺序或指定的比较器顺序进行排序，插入、删除和查找操作的时间复杂度为 O(log n)。</li>\n</ul>\n<pre><code class=\"language-java\">import java.util.TreeMap;\nimport java.util.Map;\n\npublic class TreeMapExample {\n    public static void main(String[] args) {\n        Map&#x3C;String, Integer> map = new TreeMap&#x3C;>();\n        map.put(\"apple\", 1);\n        map.put(\"banana\", 2);\n        map.put(\"cherry\", 3);\n        for (Map.Entry&#x3C;String, Integer> entry : map.entrySet()) {\n            System.out.println(entry.getKey() + \": \" + entry.getValue()); // 按键的字典序输出\n        }\n    }\n}\n</code></pre>\n<h3>可以保证有序并去重的集合</h3>\n<p>在 Java 中，<code>LinkedHashSet</code> 可以保证元素的插入顺序并去重。它是 <code>HashSet</code> 的子类，基于哈希表和链表实现，链表用于维护元素的插入顺序。</p>\n<pre><code class=\"language-java\">import java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic class LinkedHashSetExample {\n    public static void main(String[] args) {\n        Set&#x3C;String> set = new LinkedHashSet&#x3C;>();\n        set.add(\"apple\");\n        set.add(\"banana\");\n        set.add(\"apple\"); // 重复元素，不会被添加\n        for (String s : set) {\n            System.out.println(s); // 按插入顺序输出\n        }\n    }\n}\n</code></pre>\n<p>如果需要按照元素的自然顺序或指定的比较器顺序进行排序并去重，可以使用 <code>TreeSet</code>。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.008758102,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：介绍常用的 Java 集合类，并指出哪种集合可以保证有序并去重。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对 Java 常用集合类的了解。</li>\n      <li>不同集合类的特点，如是否有序、是否允许重复元素。</li>\n      <li>有序且去重集合类的特性。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>Java 集合框架主要分为两大接口体系：<code>Collection</code> 和 <code>Map</code>。<code>Collection</code> 接口下又有 <code>List</code>、<code>Set</code> 和 <code>Queue</code> 等子接口，<code>Map</code> 接口用于存储键值对。</p>\n<h3>3. 解析</h3>\n<h4>（1）常用 Java 集合类介绍</h4>\n<ul>\n  <li><strong>List 接口</strong>\n    <ul>\n      <li><strong>ArrayList</strong>：基于动态数组实现，支持随机访问，查找元素速度快，但插入和删除操作效率较低，尤其是在数组中间位置进行操作。它允许存储重复元素，元素按照插入顺序排列。</li>\n      <li><strong>LinkedList</strong>：基于双向链表实现，插入和删除操作效率高，尤其是在链表头部和尾部进行操作，但随机访问速度慢。同样允许存储重复元素，元素按插入顺序排列。</li>\n    </ul>\n  </li>\n  <li><strong>Set 接口</strong>\n    <ul>\n      <li><strong>HashSet</strong>：基于哈希表实现，不允许存储重复元素，元素存储是无序的。它通过元素的 <code>hashCode()</code> 和 <code>equals()</code> 方法来判断元素是否重复。</li>\n      <li><strong>TreeSet</strong>：基于红黑树实现，不允许存储重复元素，元素会按照自然顺序或者指定的比较器顺序进行排序。</li>\n    </ul>\n  </li>\n  <li><strong>Queue 接口</strong>\n    <ul>\n      <li><strong>LinkedList</strong>：除了实现 <code>List</code> 接口，还实现了 <code>Queue</code> 接口，可以作为队列使用。它遵循先进先出（FIFO）原则。</li>\n      <li><strong>PriorityQueue</strong>：基于堆实现，元素按照自然顺序或者指定的比较器顺序进行排序，每次取出的元素是队列中优先级最高的元素。</li>\n    </ul>\n  </li>\n  <li><strong>Map 接口</strong>\n    <ul>\n      <li><strong>HashMap</strong>：基于哈希表实现，用于存储键值对，键不允许重复，值可以重复。元素存储是无序的。</li>\n      <li><strong>TreeMap</strong>：基于红黑树实现，键不允许重复，键会按照自然顺序或者指定的比较器顺序进行排序。</li>\n    </ul>\n  </li>\n</ul>\n<h4>（2）保证有序并去重的集合</h4>\n<p><code>LinkedHashSet</code> 可以保证元素的插入顺序，同时不允许存储重复元素。它继承自 <code>HashSet</code>，内部使用链表维护元素的插入顺序。当遍历 <code>LinkedHashSet</code> 时，元素会按照插入的顺序依次被访问。</p>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-java\">import java.util.*;\n\npublic class CollectionExample {\n    public static void main(String[] args) {\n        // 使用 LinkedHashSet 保证有序并去重\n        LinkedHashSet&#x3C;Integer> linkedHashSet = new LinkedHashSet&#x3C;>();\n        linkedHashSet.add(3);\n        linkedHashSet.add(1);\n        linkedHashSet.add(2);\n        linkedHashSet.add(1); // 重复元素，不会被添加\n\n        for (Integer num : linkedHashSet) {\n            System.out.println(num); // 输出: 3 1 2\n        }\n    }\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆不同集合类的特点</h4>\n<ul>\n  <li>误区：认为所有 <code>Set</code> 集合都是有序的。</li>\n  <li>纠正：<code>HashSet</code> 是无序的，只有 <code>TreeSet</code> 和 <code>LinkedHashSet</code> 是有序的，但排序方式不同。</li>\n</ul>\n<h4>（2）对 <code>Map</code> 集合的理解有误</h4>\n<ul>\n  <li>误区：认为 <code>Map</code> 集合可以直接作为有序并去重的集合使用。</li>\n  <li>纠正：<code>Map</code> 存储的是键值对，虽然 <code>TreeMap</code> 可以对键进行排序，但它不是单纯的元素集合，不能直接用于存储单个元素。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>常用的 Java 集合类主要分为 <code>Collection</code> 和 <code>Map</code> 两大体系。<code>Collection</code> 体系下的常用集合类有：<code>ArrayList</code> 和 <code>LinkedList</code> 属于 <code>List</code> 接口，允许存储重复元素，按插入顺序排列；<code>HashSet</code> 和 <code>TreeSet</code> 属于 <code>Set</code> 接口，不允许存储重复元素，<code>HashSet</code> 无序，<code>TreeSet</code> 按自然或指定顺序排序；<code>LinkedList</code> 和 <code>PriorityQueue</code> 属于 <code>Queue</code> 接口，分别遵循先进先出和优先级顺序。<code>Map</code> 体系下的常用集合类有 <code>HashMap</code> 和 <code>TreeMap</code>，用于存储键值对，<code>HashMap</code> 无序，<code>TreeMap</code> 按键排序。</p>\n<p>可以保证有序并去重的集合是 <code>LinkedHashSet</code>，它继承自 <code>HashSet</code>，内部使用链表维护元素的插入顺序，在遍历时元素会按照插入顺序依次被访问。</p>",
    "more_ask": "<h3>1. 有序去重集合的底层实现原理</h3>\n<p>提示：从数据结构和算法角度思考，比如红黑树、链表等在有序去重集合中的应用。</p>\n<h3>2. 有序去重集合在多线程环境下的表现</h3>\n<p>提示：考虑线程安全问题，以及是否有对应的线程安全版本集合。</p>\n<h3>3. 不同有序去重集合的性能比较</h3>\n<p>提示：从插入、删除、查找操作的时间复杂度等方面进行分析。</p>\n<h3>4. 如何在有序去重集合中自定义排序规则</h3>\n<p>提示：思考集合提供的接口或方法，如<code>Comparator</code>接口。</p>\n<h3>5. 有序去重集合在大数据场景下的优化策略</h3>\n<p>提示：结合大数据的特点，如数据量巨大、内存限制等，考虑优化方法。</p>\n<h3>6. 当有序去重集合存储自定义对象时，需要注意什么</h3>\n<p>提示：涉及对象的<code>equals()</code>和<code>hashCode()</code>方法的重写。</p>\n<h3>7. 有序去重集合与无序集合在内存占用上的差异</h3>\n<p>提示：从数据结构和存储方式的角度分析内存占用情况。</p>\n<h3>8. 如何将无序集合转换为有序去重集合</h3>\n<p>提示：思考集合提供的转换方法或借助中间步骤实现。</p>",
    "mindmap": "mindmap\n  root((常用的 Java 集合类))\n    Java 集合框架体系\n      Collection 接口\n        存储不唯一、无序对象\n        子接口：List、Set、Queue\n      Map 接口\n        存储键值对，键唯一\n    List 接口\n      有序集合，允许重复元素\n      实现类\n        ArrayList\n          基于动态数组\n          支持随机访问\n          末尾插入删除效率高\n        LinkedList\n          基于双向链表\n          插入删除效率高\n          随机访问效率低\n    Set 接口\n      不允许重复元素\n      实现类\n        HashSet\n          基于哈希表\n          不保证顺序\n          操作时间复杂度 O(1)\n        TreeSet\n          基于红黑树\n          元素排序\n          操作时间复杂度 O(log n)\n    Queue 接口\n      先进先出集合\n      实现类\n        LinkedList\n          可作队列\n        PriorityQueue\n          基于堆\n          元素排序\n          取优先级最高元素\n    Map 接口\n      存储键值对，键唯一\n      实现类\n        HashMap\n          基于哈希表\n          不保证顺序\n          操作时间复杂度 O(1)\n        TreeMap\n          基于红黑树\n          键排序\n          操作时间复杂度 O(log n)\n    保证有序并去重的集合\n      LinkedHashSet\n        保证插入顺序\n        基于哈希表和链表\n      TreeSet\n        按自然或指定顺序排序",
    "keynote": "Java 集合框架体系：Collection（存储不唯一、无序对象，子接口 List、Set、Queue）和 Map（存储键值对，键唯一）\nList 接口：有序，允许重复元素，实现类有 ArrayList（动态数组，支持随机访问，末尾操作效率高）、LinkedList（双向链表，插入删除效率高）\nSet 接口：不允许重复元素，实现类有 HashSet（哈希表，不保证顺序，操作 O(1)）、TreeSet（红黑树，元素排序，操作 O(log n)）\nQueue 接口：先进先出，实现类有 LinkedList（可作队列）、PriorityQueue（堆，元素排序，取最高优先级元素）\nMap 接口：存储键值对，键唯一，实现类有 HashMap（哈希表，不保证顺序，操作 O(1)）、TreeMap（红黑树，键排序，操作 O(log n)）\n保证有序并去重的集合：LinkedHashSet（保证插入顺序，基于哈希表和链表）、TreeSet（按自然或指定顺序排序）",
    "group_id": 5,
    "kps": [
      "集合框架"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "卓望",
      "携程",
      "宇信科技",
      "同盾科技",
      "小鹏汽车",
      "康冠",
      "华为",
      "联蔚",
      "招银网络科技",
      "字节跳动",
      "快手",
      "CVTE视源股份",
      "平安产险科技中心",
      "小米",
      "睿联技术",
      "美团",
      "中国农业银行",
      "阿里巴巴",
      "科大讯飞",
      "途虎养车",
      "拼多多",
      "顺丰",
      "蚂蚁集团",
      "用友",
      "网易有道",
      "浩鲸科技",
      "饿了么",
      "滴滴",
      "帆软",
      "长安深蓝",
      "腾讯",
      "百度",
      "OPPO",
      "松鼠AI",
      "京东"
    ]
  }
}