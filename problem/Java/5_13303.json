{
  "success": true,
  "data": {
    "id": 13303,
    "name": "<p>Java基本数据类型有哪些</p>",
    "options": null,
    "answer": "<p>在 Java 中，基本数据类型是最基础的数据类型，它们不是对象，而是直接存储在栈内存中的简单数据值。Java 有 8 种基本数据类型，可分为 4 大类，以下为你详细介绍：</p>\n<h3>整数类型</h3>\n<p>用于表示整数数值，根据取值范围和占用存储空间的不同，分为以下 4 种：</p>\n<table>\n  <thead>\n    <tr>\n      <th>数据类型</th>\n      <th>关键字</th>\n      <th>占用存储空间</th>\n      <th>取值范围</th>\n      <th>示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>字节型</td>\n      <td><code>byte</code></td>\n      <td>1 字节（8 位）</td>\n      <td>-128 到 127</td>\n      <td><code>byte num = 100;</code></td>\n    </tr>\n    <tr>\n      <td>短整型</td>\n      <td><code>short</code></td>\n      <td>2 字节（16 位）</td>\n      <td>-32768 到 32767</td>\n      <td><code>short num = 2000;</code></td>\n    </tr>\n    <tr>\n      <td>整型</td>\n      <td><code>int</code></td>\n      <td>4 字节（32 位）</td>\n      <td>-2147483648 到 2147483647</td>\n      <td><code>int num = 100000;</code></td>\n    </tr>\n    <tr>\n      <td>长整型</td>\n      <td><code>long</code></td>\n      <td>8 字节（64 位）</td>\n      <td>-9223372036854775808 到 9223372036854775807</td>\n      <td><code>long num = 10000000000L;</code>（注意：长整型数值后面需要加 <code>L</code> 或 <code>l</code>）</td>\n    </tr>\n  </tbody>\n</table>\n<h3>浮点类型</h3>\n<p>用于表示带有小数部分的数值，分为以下 2 种：</p>\n<table>\n  <thead>\n    <tr>\n      <th>数据类型</th>\n      <th>关键字</th>\n      <th>占用存储空间</th>\n      <th>取值范围</th>\n      <th>示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>单精度浮点型</td>\n      <td><code>float</code></td>\n      <td>4 字节（32 位）</td>\n      <td>大约 ±3.40282347E+38F（有效位数为 6 - 7 位）</td>\n      <td><code>float num = 3.14F;</code>（注意：单精度浮点型数值后面需要加 <code>F</code> 或 <code>f</code>）</td>\n    </tr>\n    <tr>\n      <td>双精度浮点型</td>\n      <td><code>double</code></td>\n      <td>8 字节（64 位）</td>\n      <td>大约 ±1.79769313486231570E+308（有效位数为 15 位）</td>\n      <td><code>double num = 3.1415926;</code></td>\n    </tr>\n  </tbody>\n</table>\n<h3>字符类型</h3>\n<p>用于表示单个字符，使用 Unicode 编码。</p>\n<table>\n  <thead>\n    <tr>\n      <th>数据类型</th>\n      <th>关键字</th>\n      <th>占用存储空间</th>\n      <th>取值范围</th>\n      <th>示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>字符型</td>\n      <td><code>char</code></td>\n      <td>2 字节（16 位）</td>\n      <td>0 到 65535</td>\n      <td><code>char ch = 'A';</code></td>\n    </tr>\n  </tbody>\n</table>\n<h3>布尔类型</h3>\n<p>用于表示逻辑值，只有两个取值。</p>\n<table>\n  <thead>\n    <tr>\n      <th>数据类型</th>\n      <th>关键字</th>\n      <th>占用存储空间</th>\n      <th>取值范围</th>\n      <th>示例</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>布尔型</td>\n      <td><code>boolean</code></td>\n      <td>理论上 1 位，但实际实现中通常占用 1 字节</td>\n      <td><code>true</code> 或 <code>false</code></td>\n      <td><code>boolean flag = true;</code></td>\n    </tr>\n  </tbody>\n</table>\n<h3>示例代码</h3>\n<pre><code class=\"language-java\">public class BasicDataTypesExample {\n    public static void main(String[] args) {\n        // 整数类型\n        byte byteNum = 100;\n        short shortNum = 2000;\n        int intNum = 100000;\n        long longNum = 10000000000L;\n\n        // 浮点类型\n        float floatNum = 3.14F;\n        double doubleNum = 3.1415926;\n\n        // 字符类型\n        char charValue = 'A';\n\n        // 布尔类型\n        boolean booleanValue = true;\n\n        // 输出结果\n        System.out.println(\"byte: \" + byteNum);\n        System.out.println(\"short: \" + shortNum);\n        System.out.println(\"int: \" + intNum);\n        System.out.println(\"long: \" + longNum);\n        System.out.println(\"float: \" + floatNum);\n        System.out.println(\"double: \" + doubleNum);\n        System.out.println(\"char: \" + charValue);\n        System.out.println(\"boolean: \" + booleanValue);\n    }\n}\n</code></pre>\n<h3>代码解释</h3>\n<p>上述代码定义了各种基本数据类型的变量，并为它们赋予了初始值，最后将这些变量的值输出到控制台。运行该程序，你将看到每种基本数据类型的具体取值。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.01208618,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：Java基本数据类型有哪些。</li>\n  <li><strong>考察点</strong>：对Java基本数据类型的记忆和理解。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>在Java中，数据类型分为基本数据类型和引用数据类型。基本数据类型是Java语言内置的数据类型，它们在内存中直接存储值，而不是存储引用。</p>\n<h3>3. 解析</h3>\n<p>Java有8种基本数据类型，可分为以下4类：</p>\n<h4>（1）整数类型</h4>\n<ul>\n  <li><strong>byte</strong>：字节型，占用1个字节（8位），取值范围是 -128 到 127。常用于处理字节数据，如文件读写、网络传输等。</li>\n  <li><strong>short</strong>：短整型，占用2个字节（16位），取值范围是 -32768 到 32767。</li>\n  <li><strong>int</strong>：整型，占用4个字节（32位），取值范围是 -2147483648 到 2147483647。是最常用的整数类型。</li>\n  <li><strong>long</strong>：长整型，占用8个字节（64位），取值范围非常大。在表示长整型常量时，需要在数字后面加 <code>L</code> 或 <code>l</code>，如 <code>100L</code>。</li>\n</ul>\n<h4>（2）浮点类型</h4>\n<ul>\n  <li><strong>float</strong>：单精度浮点型，占用4个字节（32位），能表示大约6 - 7位有效数字。在表示单精度浮点型常量时，需要在数字后面加 <code>F</code> 或 <code>f</code>，如 <code>3.14F</code>。</li>\n  <li><strong>double</strong>：双精度浮点型，占用8个字节（64位），能表示大约15位有效数字。是最常用的浮点类型，浮点型常量默认是 <code>double</code> 类型。</li>\n</ul>\n<h4>（3）字符类型</h4>\n<ul>\n  <li><strong>char</strong>：字符型，占用2个字节（16位），用于表示单个字符。字符常量用单引号括起来，如 <code>'A'</code>。Java中的 <code>char</code> 类型采用Unicode编码，可以表示各种语言的字符。</li>\n</ul>\n<h4>（4）布尔类型</h4>\n<ul>\n  <li><strong>boolean</strong>：布尔型，只有两个值：<code>true</code> 和 <code>false</code>，用于逻辑判断。</li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-java\">public class BasicDataTypes {\n    public static void main(String[] args) {\n        // 整数类型\n        byte b = 100;\n        short s = 20000;\n        int i = 123456;\n        long l = 123456789L;\n\n        // 浮点类型\n        float f = 3.14F;\n        double d = 3.1415926;\n\n        // 字符类型\n        char c = 'A';\n\n        // 布尔类型\n        boolean bool = true;\n\n        System.out.println(\"byte: \" + b);\n        System.out.println(\"short: \" + s);\n        System.out.println(\"int: \" + i);\n        System.out.println(\"long: \" + l);\n        System.out.println(\"float: \" + f);\n        System.out.println(\"double: \" + d);\n        System.out.println(\"char: \" + c);\n        System.out.println(\"boolean: \" + bool);\n    }\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）遗漏某些基本数据类型</h4>\n<ul>\n  <li>误区：只记得部分基本数据类型，如只记得 <code>int</code>、<code>double</code> 等常用类型，而遗漏了 <code>byte</code>、<code>short</code>、<code>long</code>、<code>float</code>、<code>char</code>、<code>boolean</code> 等。</li>\n  <li>纠正：牢记Java有8种基本数据类型，分为整数、浮点、字符、布尔4类。</li>\n</ul>\n<h4>（2）混淆基本数据类型和引用数据类型</h4>\n<ul>\n  <li>误区：将数组、字符串等引用数据类型误认为是基本数据类型。</li>\n  <li>纠正：明确基本数据类型是Java内置的简单数据类型，而引用数据类型是通过类创建的对象。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>Java有8种基本数据类型，可分为4类：</p>\n<ul>\n  <li>整数类型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>。</li>\n  <li>浮点类型：<code>float</code>、<code>double</code>。</li>\n  <li>字符类型：<code>char</code>。</li>\n  <li>布尔类型：<code>boolean</code>。</li>\n</ul>\n<p>每种基本数据类型都有其特定的取值范围和用途，在编程时需要根据实际需求选择合适的数据类型。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      基本数据类型的默认值分别是什么？\n      提示：思考在类中定义基本数据类型变量但未显式赋值时的情况。\n    </p>\n  </li>\n  <li>\n    <p>\n      基本数据类型的包装类有什么作用，它们之间的自动装箱和拆箱是如何实现的？\n      提示：从基本数据类型和对象的使用场景差异去理解包装类作用，结合源码看装箱拆箱方法。\n    </p>\n  </li>\n  <li>\n    <p>\n      不同基本数据类型在内存中所占的字节数是多少？\n      提示：可参考 Java 语言规范中对各基本数据类型的定义。\n    </p>\n  </li>\n  <li>\n    <p>\n      基本数据类型之间的转换规则是怎样的，有哪些注意事项？\n      提示：考虑自动类型转换和强制类型转换的条件和可能出现的问题。\n    </p>\n  </li>\n  <li>\n    <p>\n      请举例说明基本数据类型在多线程环境下可能出现的问题。\n      提示：从数据的可见性、原子性等方面去思考。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Java基本数据类型))\n    基本概念\n      非对象\n      存储于栈内存\n      8种类型分4大类\n    整数类型\n      字节型(byte)\n        1字节(8位)\n        -128到127\n      短整型(short)\n        2字节(16位)\n        -32768到32767\n      整型(int)\n        4字节(32位)\n        -2147483648到2147483647\n      长整型(long)\n        8字节(64位)\n        -9223372036854775808到9223372036854775807\n        数值后加L或l\n    浮点类型\n      单精度浮点型(float)\n        4字节(32位)\n        大约±3.40282347E+38F\n        有效位数6 - 7位\n        数值后加F或f\n      双精度浮点型(double)\n        8字节(64位)\n        大约±1.79769313486231570E+308\n        有效位数15位\n    字符类型\n      字符型(char)\n        2字节(16位)\n        0到65535\n        Unicode编码\n    布尔类型\n      布尔型(boolean)\n        理论1位，实际1字节\n        true或false",
    "keynote": "Java基本数据类型非对象，存于栈内存，共8种分4大类\n整数类型：\n  - 字节型(byte)：1字节，-128到127\n  - 短整型(short)：2字节，-32768到32767\n  - 整型(int)：4字节，-2147483648到2147483647\n  - 长整型(long)：8字节，-9223372036854775808到9223372036854775807，数值后加L或l\n浮点类型：\n  - 单精度浮点型(float)：4字节，约±3.40282347E+38F，有效6 - 7位，数值后加F或f\n  - 双精度浮点型(double)：8字节，约±1.79769313486231570E+308，有效15位\n字符类型：\n  - 字符型(char)：2字节，0到65535，Unicode编码\n布尔类型：\n  - 布尔型(boolean)：理论1位，实际1字节，值为true或false",
    "group_id": 5,
    "kps": [
      "基本语法"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "快手",
      "华为OD",
      "武汉小厂",
      "三未信安",
      "万达信息",
      "广州小公司",
      "百度",
      "亚信",
      "卓望",
      "华为",
      "滴滴",
      "竞技世界",
      "科大讯飞",
      "腾讯",
      "数字马力",
      "松鼠AI",
      "哈啰出行",
      "美团",
      "七牛云",
      "武汉crm企业",
      "京东",
      "小米",
      "招商银行",
      "奇安信",
      "用友",
      "天融信",
      "小红书",
      "唯品会",
      "搜狐畅游",
      "知乎",
      "字节跳动",
      "阿里巴巴",
      "58同城",
      "好未来",
      "字节飞书"
    ]
  }
}