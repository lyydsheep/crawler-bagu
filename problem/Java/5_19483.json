{
  "success": true,
  "data": {
    "id": 19483,
    "name": "<p>什么是浅拷贝和深拷贝</p>",
    "options": null,
    "answer": "<p>在 Java 中，浅拷贝和深拷贝是两种不同的对象复制方式，它们的主要区别在于复制对象时对对象内部引用类型成员变量的处理方式。下面详细介绍这两种拷贝方式。</p>\n<h3>浅拷贝（Shallow Copy）</h3>\n<ul>\n  <li><strong>定义</strong>：浅拷贝创建一个新对象，新对象的基本数据类型属性会复制一份新的值，而引用数据类型属性则只复制引用，即新对象和原对象的引用类型属性指向同一个内存地址。</li>\n  <li><strong>实现方式</strong>：在 Java 中，要实现浅拷贝，可以让类实现 <code>Cloneable</code> 接口，并重写 <code>clone()</code> 方法。</li>\n  <li><strong>示例代码</strong>：</li>\n</ul>\n<pre><code class=\"language-java\">class Address {\n    String city;\n\n    public Address(String city) {\n        this.city = city;\n    }\n}\n\nclass Person implements Cloneable {\n    String name;\n    Address address;\n\n    public Person(String name, Address address) {\n        this.name = name;\n        this.address = address;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\npublic class ShallowCopyExample {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Address address = new Address(\"Beijing\");\n        Person person1 = new Person(\"Alice\", address);\n        Person person2 = (Person) person1.clone();\n\n        // 修改 person2 的基本类型属性\n        person2.name = \"Bob\";\n        // 修改 person2 的引用类型属性\n        person2.address.city = \"Shanghai\";\n\n        System.out.println(\"person1 name: \" + person1.name);\n        System.out.println(\"person1 address: \" + person1.address.city);\n        System.out.println(\"person2 name: \" + person2.name);\n        System.out.println(\"person2 address: \" + person2.address.city);\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>代码解释</strong>：在上述代码中，<code>Person</code> 类实现了 <code>Cloneable</code> 接口并重写了 <code>clone()</code> 方法。当调用 <code>person1.clone()</code> 时，会创建一个新的 <code>Person</code> 对象 <code>person2</code>。<code>person2</code> 的 <code>name</code> 属性是一个新的值，但 <code>address</code> 属性和 <code>person1</code> 的 <code>address</code> 属性指向同一个 <code>Address</code> 对象。因此，当修改 <code>person2.address.city</code> 时，<code>person1.address.city</code> 也会被修改。</li>\n</ul>\n<h3>深拷贝（Deep Copy）</h3>\n<ul>\n  <li><strong>定义</strong>：深拷贝创建一个新对象，新对象的基本数据类型属性会复制一份新的值，对于引用数据类型属性，会递归地复制其内部的所有对象，即新对象和原对象的引用类型属性指向不同的内存地址。</li>\n  <li><strong>实现方式</strong>：可以通过手动复制每个引用类型属性，或者使用序列化和反序列化的方式实现深拷贝。</li>\n  <li><strong>示例代码（手动复制）</strong>：</li>\n</ul>\n<pre><code class=\"language-java\">class Address {\n    String city;\n\n    public Address(String city) {\n        this.city = city;\n    }\n\n    public Address clone() {\n        return new Address(this.city);\n    }\n}\n\nclass Person {\n    String name;\n    Address address;\n\n    public Person(String name, Address address) {\n        this.name = name;\n        this.address = address;\n    }\n\n    public Person clone() {\n        Address newAddress = this.address.clone();\n        return new Person(this.name, newAddress);\n    }\n}\n\npublic class DeepCopyExample {\n    public static void main(String[] args) {\n        Address address = new Address(\"Beijing\");\n        Person person1 = new Person(\"Alice\", address);\n        Person person2 = person1.clone();\n\n        // 修改 person2 的基本类型属性\n        person2.name = \"Bob\";\n        // 修改 person2 的引用类型属性\n        person2.address.city = \"Shanghai\";\n\n        System.out.println(\"person1 name: \" + person1.name);\n        System.out.println(\"person1 address: \" + person1.address.city);\n        System.out.println(\"person2 name: \" + person2.name);\n        System.out.println(\"person2 address: \" + person2.address.city);\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>代码解释</strong>：在上述代码中，<code>Address</code> 类和 <code>Person</code> 类都提供了 <code>clone()</code> 方法。当调用 <code>person1.clone()</code> 时，会创建一个新的 <code>Person</code> 对象 <code>person2</code>，并且 <code>person2</code> 的 <code>address</code> 属性是一个新的 <code>Address</code> 对象，与 <code>person1</code> 的 <code>address</code> 对象指向不同的内存地址。因此，修改 <code>person2.address.city</code> 不会影响 <code>person1.address.city</code>。</li>\n</ul>\n<h3>总结</h3>\n<ul>\n  <li>浅拷贝只复制对象的一层属性，对于引用类型属性只复制引用，多个对象可能共享同一个引用对象。</li>\n  <li>深拷贝会递归地复制对象的所有属性，包括引用类型属性，每个对象都有自己独立的属性副本。</li>\n</ul>",
    "type": 6,
    "level": 2,
    "freq": 0.008057453,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：什么是浅拷贝和深拷贝。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对浅拷贝和深拷贝概念的理解。</li>\n      <li>浅拷贝和深拷贝在对象复制时的不同实现方式。</li>\n      <li>浅拷贝和深拷贝对对象内部引用的处理差异。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）对象复制的需求</h4>\n<p>在编程中，有时需要创建一个对象的副本，以避免对原对象的修改影响到其他部分的代码，或者为了在不同的上下文中使用相同的数据。</p>\n<h4>（2）对象的组成</h4>\n<p>Java对象可能包含基本数据类型的成员变量和引用类型的成员变量。基本数据类型存储的是实际的值，而引用类型存储的是对象的引用。</p>\n<h3>3. 解析</h3>\n<h4>（1）浅拷贝</h4>\n<ul>\n  <li><strong>定义</strong>：浅拷贝创建一个新对象，新对象的属性值与原对象相同。对于基本数据类型，会直接复制其值；对于引用类型，只复制引用，而不复制引用指向的对象本身。也就是说，新对象和原对象的引用类型属性会指向同一个对象。</li>\n  <li><strong>实现方式</strong>：在Java中，可以通过实现<code>Cloneable</code>接口并重写<code>clone()</code>方法来实现浅拷贝。</li>\n  <li><strong>示例代码</strong>：</li>\n</ul>\n<pre><code class=\"language-java\">class Person implements Cloneable {\n    int age;\n    Address address;\n\n    public Person(int age, Address address) {\n        this.age = age;\n        this.address = address;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\nclass Address {\n    String city;\n\n    public Address(String city) {\n        this.city = city;\n    }\n}\n\npublic class ShallowCopyExample {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Address address = new Address(\"Beijing\");\n        Person person1 = new Person(20, address);\n        Person person2 = (Person) person1.clone();\n\n        System.out.println(person1.address == person2.address); // 输出: true\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>分析</strong>：在上述代码中，<code>person2</code>是<code>person1</code>的浅拷贝。<code>person1</code>和<code>person2</code>的<code>address</code>属性指向同一个<code>Address</code>对象，修改其中一个对象的<code>address</code>属性会影响到另一个对象。</li>\n</ul>\n<h4>（2）深拷贝</h4>\n<ul>\n  <li><strong>定义</strong>：深拷贝创建一个新对象，新对象的属性值与原对象相同。对于基本数据类型，会直接复制其值；对于引用类型，会递归地复制引用指向的对象，即创建一个新的对象并复制其内容。这样，新对象和原对象的引用类型属性指向不同的对象。</li>\n  <li><strong>实现方式</strong>：可以通过手动复制每个引用类型的属性，或者使用序列化和反序列化的方式来实现深拷贝。</li>\n  <li><strong>示例代码（手动复制）</strong>：</li>\n</ul>\n<pre><code class=\"language-java\">class Person implements Cloneable {\n    int age;\n    Address address;\n\n    public Person(int age, Address address) {\n        this.age = age;\n        this.address = address;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        Person cloned = (Person) super.clone();\n        cloned.address = (Address) this.address.clone();\n        return cloned;\n    }\n}\n\nclass Address implements Cloneable {\n    String city;\n\n    public Address(String city) {\n        this.city = city;\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n\npublic class DeepCopyExample {\n    public static void main(String[] args) throws CloneNotSupportedException {\n        Address address = new Address(\"Beijing\");\n        Person person1 = new Person(20, address);\n        Person person2 = (Person) person1.clone();\n\n        System.out.println(person1.address == person2.address); // 输出: false\n    }\n}\n</code></pre>\n<ul>\n  <li><strong>分析</strong>：在上述代码中，<code>person2</code>是<code>person1</code>的深拷贝。<code>person1</code>和<code>person2</code>的<code>address</code>属性指向不同的<code>Address</code>对象，修改其中一个对象的<code>address</code>属性不会影响到另一个对象。</li>\n</ul>\n<h3>4. 常见误区</h3>\n<h4>（1）混淆浅拷贝和深拷贝的概念</h4>\n<ul>\n  <li>误区：认为浅拷贝和深拷贝没有区别，或者错误地认为浅拷贝也会复制引用类型的对象。</li>\n  <li>纠正：明确浅拷贝只复制引用，而深拷贝会递归地复制引用指向的对象。</li>\n</ul>\n<h4>（2）实现浅拷贝时未正确处理引用类型</h4>\n<ul>\n  <li>误区：在实现浅拷贝时，没有意识到引用类型属性会指向同一个对象，导致修改一个对象的引用类型属性影响到另一个对象。</li>\n  <li>纠正：理解浅拷贝的原理，在使用浅拷贝时注意引用类型属性的共享问题。</li>\n</ul>\n<h4>（3）实现深拷贝时未递归复制引用类型</h4>\n<ul>\n  <li>误区：在实现深拷贝时，只复制了一层引用类型的对象，而没有递归地复制其内部的引用类型对象。</li>\n  <li>纠正：确保在实现深拷贝时，对所有引用类型的属性进行递归复制。</li>\n</ul>\n<h3>5. 总结回答</h3>\n<p>“浅拷贝和深拷贝是对象复制的两种方式。浅拷贝创建一个新对象，新对象的基本数据类型属性会复制原对象的值，而引用类型属性只复制引用，新对象和原对象的引用类型属性指向同一个对象。在Java中，可以通过实现<code>Cloneable</code>接口并重写<code>clone()</code>方法来实现浅拷贝。</p>\n<p>深拷贝也创建一个新对象，新对象的基本数据类型属性复制原对象的值，对于引用类型属性，会递归地复制引用指向的对象，新对象和原对象的引用类型属性指向不同的对象。可以通过手动复制每个引用类型的属性，或者使用序列化和反序列化的方式来实现深拷贝。</p>\n<p>需要注意的是，浅拷贝可能会导致多个对象共享同一个引用类型的对象，修改其中一个对象的引用类型属性会影响到其他对象；而深拷贝可以避免这种问题，但实现起来相对复杂。”</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      <strong>浅拷贝和深拷贝在集合类中的应用有什么不同？</strong>\n      提示：思考像 <code>ArrayList</code> 这种集合类，浅拷贝和深拷贝对集合元素的影响。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>如何实现一个自定义类的深拷贝？请给出具体步骤和示例代码。</strong>\n      提示：考虑重写 <code>clone()</code> 方法或使用序列化和反序列化的方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在多线程环境下，浅拷贝和深拷贝会有什么潜在问题？</strong>\n      提示：从线程安全的角度，思考共享对象和独立对象在多线程中的表现。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>如果一个对象包含不可变对象和可变对象，浅拷贝和深拷贝分别会如何处理？</strong>\n      提示：不可变对象如 <code>String</code>，可变对象如自定义的引用类型。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>使用序列化实现深拷贝有什么优缺点？</strong>\n      提示：从性能、代码复杂度、对象要求等方面去分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>浅拷贝和深拷贝对对象的内存占用有什么影响？</strong>\n      提示：对比浅拷贝和深拷贝后，对象在堆内存中的存储情况。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>在 Java 中，<code>Object.clone()</code> 方法是浅拷贝还是深拷贝？如何将其改造成深拷贝？</strong>\n      提示：查看 <code>Object.clone()</code> 方法的默认实现，思考改造的思路。\n    </p>\n  </li>\n  <li>\n    <p>\n      <strong>当对象存在循环引用时，深拷贝会遇到什么问题，如何解决？</strong>\n      提示：循环引用会导致无限递归，考虑使用标记或缓存的方式解决。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((Java 浅拷贝和深拷贝))\n    浅拷贝（Shallow Copy）\n      定义\n        新对象基本类型属性复制新值\n        引用类型属性只复制引用\n      实现方式\n        类实现 Cloneable 接口\n        重写 clone() 方法\n      代码解释\n        新对象基本类型属性为新值\n        引用类型属性与原对象指向同一地址\n    深拷贝（Deep Copy）\n      定义\n        新对象基本类型属性复制新值\n        引用类型属性递归复制内部对象\n      实现方式\n        手动复制引用类型属性\n        使用序列化和反序列化\n      代码解释\n        新对象引用类型属性指向不同地址\n    总结\n      浅拷贝只复制一层属性，引用共享\n      深拷贝递归复制所有属性，各有副本",
    "keynote": "浅拷贝：\n- 定义：基本类型复制值，引用类型复制引用\n- 实现：实现 Cloneable 接口，重写 clone() 方法\n- 特点：引用类型属性共享同一地址\n\n深拷贝：\n- 定义：基本类型复制值，引用类型递归复制\n- 实现：手动复制或序列化反序列化\n- 特点：引用类型属性指向不同地址\n\n总结：\n- 浅拷贝：复制一层，引用共享\n- 深拷贝：递归复制，各有副本",
    "group_id": 5,
    "kps": [
      "面向对象编程",
      "Java API与常用库"
    ],
    "years": [
      2024,
      2023,
      2022
    ],
    "corps": [
      "同程旅行",
      "远大芯数字",
      "卓望",
      "合肥科大国创",
      "京东",
      "深圳贝尔信息",
      "中兴通讯",
      "多益网络",
      "南昌龙孚信息技术",
      "蔚来",
      "懂车帝",
      "华为",
      "美团",
      "阿里乌鸫科技",
      "百度",
      "华为OD",
      "快手",
      "度小满",
      "途虎养车",
      "联影集团",
      "奇安信",
      "神策数据",
      "货拉拉",
      "滴滴",
      "顺丰",
      "大华",
      "昆山海隆",
      "联想集团",
      "科大讯飞",
      "字节跳动"
    ]
  }
}