{
  "success": true,
  "data": {
    "id": 4612,
    "name": "<p>简述TypeScript 中 interface 和 type 的差别是什么？</p>",
    "options": null,
    "answer": "<p>在 TypeScript 中，<code>interface</code> 和 <code>type</code> 都可以用来定义对象的形状和类型，但它们之间有一些关键的区别：</p>\n<h3>1. <strong>声明合并</strong></h3>\n<ul>\n  <li><strong>interface</strong> 支持声明合并，即你可以多次定义同一个接口，TypeScript 会将它们合并成一个接口。</li>\n  <li><strong>type</strong> 不支持声明合并。如果你尝试定义同一个类型多次，会引发错误。</li>\n</ul>\n<pre><code class=\"language-typescript\">interface User {\n  name: string;\n}\n\ninterface User {\n  age: number;\n}\n\n// 合并后有效\nconst user: User = {\n  name: \"Alice\",\n  age: 30,\n};\n\ntype Point = {\n  x: number;\n};\n\n// 下面的定义会导致错误\n// type Point = {\n//   y: number;\n// };\n</code></pre>\n<h3>2. <strong>扩展能力</strong></h3>\n<ul>\n  <li><strong>interface</strong> 使用 <code>extends</code> 关键字可以扩展其他接口，可以实现多重继承。</li>\n  <li><strong>type</strong> 则使用交叉类型 <code>&#x26;</code> 来实现合并。</li>\n</ul>\n<pre><code class=\"language-typescript\">interface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  breed: string;\n}\n\ntype Vehicle = {\n  wheels: number;\n};\n\ntype Car = Vehicle &#x26; {\n  model: string;\n};\n</code></pre>\n<h3>3. <strong>可以描述的类型</strong></h3>\n<ul>\n  <li><strong>type</strong> 可以用来描述基本类型（如字符串和数字）、联合类型和元组等。</li>\n  <li><strong>interface</strong> 主要用于对象的结构定义，不能用来定义类型的联合。</li>\n</ul>\n<pre><code class=\"language-typescript\">type StringOrNumber = string | number; // 合并类型\n\ninterface Animal {\n  name: string;\n}\n\n// 下面的定义方式不适用于 interface\n// interface StringOrNumber {} \n</code></pre>\n<h3>4. <strong>语法</strong></h3>\n<ul>\n  <li>在定义时，<code>interface</code> 使用 <code>interface</code> 关键字，而 <code>type</code> 使用 <code>type</code> 关键字，语法上略有不同。</li>\n</ul>\n<h3>总结</h3>\n<ul>\n  <li>如果需要定义对象的形状并且可能会进行合并或者扩展，使用 <code>interface</code>。</li>\n  <li>如果需要定义更复杂的类型，包括联合、交叉类型等，使用 <code>type</code>。</li>\n</ul>\n<p>在实践中，通常可以根据需要选用其中一种，但目前的推荐是在大多数情况下使用 <code>interface</code>，而 <code>type</code> 则用于其他更特殊的场景。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.003225806,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：简述TypeScript中interface和type的差别。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对TypeScript中interface和type基本概念的理解。</li>\n      <li>掌握interface和type在定义方式、扩展方式、合并特性、使用场景等方面的差异。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）interface</h4>\n<ul>\n  <li>在TypeScript里，interface是用于定义对象类型的一种方式，可描述对象的属性、方法的类型和结构，让代码具有更好的可读性和可维护性。</li>\n</ul>\n<h4>（2）type</h4>\n<ul>\n  <li>type（类型别名）能为任意类型创建一个新名字，可用于定义基本类型、联合类型、交叉类型、元组类型等多种类型，提供了更灵活的类型定义方式。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）定义方式</h4>\n<ul>\n  <li><strong>interface</strong>：使用<code>interface</code>关键字定义，语法为<code>interface InterfaceName { property: type; }</code>。</li>\n</ul>\n<pre><code class=\"language-typescript\">interface Person {\n  name: string;\n  age: number;\n}\n</code></pre>\n<ul>\n  <li><strong>type</strong>：使用<code>type</code>关键字定义，语法为<code>type TypeName = type;</code>。</li>\n</ul>\n<pre><code class=\"language-typescript\">type PersonType = {\n  name: string;\n  age: number;\n};\n</code></pre>\n<h4>（2）扩展方式</h4>\n<ul>\n  <li><strong>interface</strong>：可以使用<code>extends</code>关键字来扩展其他接口。</li>\n</ul>\n<pre><code class=\"language-typescript\">interface Animal {\n  name: string;\n}\ninterface Dog extends Animal {\n  bark(): void;\n}\n</code></pre>\n<ul>\n  <li><strong>type</strong>：使用交叉类型<code>&#x26;</code>来实现类似扩展的效果。</li>\n</ul>\n<pre><code class=\"language-typescript\">type AnimalType = {\n  name: string;\n};\ntype DogType = AnimalType &#x26; {\n  bark(): void;\n};\n</code></pre>\n<h4>（3）合并特性</h4>\n<ul>\n  <li><strong>interface</strong>：同名的interface会自动合并。</li>\n</ul>\n<pre><code class=\"language-typescript\">interface User {\n  name: string;\n}\ninterface User {\n  age: number;\n}\n// 此时User接口有name和age两个属性\n</code></pre>\n<ul>\n  <li><strong>type</strong>：同名的type不能重复定义，会报错。</li>\n</ul>\n<h4>（4）定义类型范围</h4>\n<ul>\n  <li><strong>interface</strong>：主要用于定义对象类型、函数类型、类类型等结构化类型。</li>\n  <li><strong>type</strong>：除了能定义interface可以定义的类型，还能定义基本类型（如<code>type Str = string;</code>）、联合类型（如<code>type NumOrStr = number | string;</code>）、交叉类型、元组类型等。</li>\n</ul>\n<h4>（5）使用场景</h4>\n<ul>\n  <li><strong>interface</strong>：当需要定义可扩展、可合并的对象类型，或者为类实现契约时，使用interface更合适。比如在面向对象编程中，为类定义公共接口。</li>\n  <li><strong>type</strong>：当需要定义联合类型、交叉类型、基本类型别名等复杂类型，或者希望一次性定义一个完整的类型时，使用type更方便。</li>\n</ul>\n<h3>4. 常见误区</h3>\n<h4>（1）认为两者完全等价</h4>\n<ul>\n  <li>误区：觉得interface和type在所有场景下都能互换使用。</li>\n  <li>纠正：虽然在很多情况下它们可以实现相似功能，但在定义类型范围、合并特性等方面存在明显差异。</li>\n</ul>\n<h4>（2）滥用interface或type</h4>\n<ul>\n  <li>误区：不根据具体场景，随意选择interface或type。</li>\n  <li>纠正：应根据需求，如是否需要扩展、合并，以及定义的类型种类等来合理选择。</li>\n</ul>\n<h3>5. 总结回答</h3>\n<p>在TypeScript中，interface和type存在多方面差别。定义方式上，interface用<code>interface</code>关键字，type用<code>type</code>关键字。扩展方式上，interface用<code>extends</code>，type用交叉类型<code>&#x26;</code>。合并特性方面，同名interface会自动合并，同名type不能重复定义。定义类型范围上，interface主要用于结构化类型，type能定义更多类型如基本类型、联合类型等。使用场景上，interface适合定义可扩展、可合并的对象类型和类的契约，type适合定义复杂类型。因此，在实际使用中要根据具体需求合理选择。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>如何在 TypeScript 中扩展接口（interface）？</strong></p>\n    <ul>\n      <li>提示：请解释一下使用 <code>extends</code> 关键字的方式，并给出示例。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在什么情况下你会选择使用 <code>type</code> 而不是 <code>interface</code>？</strong></p>\n    <ul>\n      <li>提示：考虑具体的场景，比如联合类型、交叉类型等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你能解释一下 <code>type</code> 可以包含哪些其他类型吗？</strong></p>\n    <ul>\n      <li>提示：例如，联合类型、交叉类型等。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在 TypeScript 中 <code>type</code> 和 <code>interface</code> 是否可以互换使用？如果可以，何时应该这样做？</strong></p>\n    <ul>\n      <li>提示：考虑类型兼容性和可扩展性的差异。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在某些情况下，如果 interface 和 type 定义了相同的属性，谁会优先？</strong></p>\n    <ul>\n      <li>提示：思考类型合并和重复声明的规则。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何在 interface 中定义只读属性和可选属性？</strong></p>\n    <ul>\n      <li>提示：具体示例，包含 <code>readonly</code> 和 <code>?</code> 的使用。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在大型项目中，如何组织和管理 interface 和 type 的使用？</strong></p>\n    <ul>\n      <li>提示：有关目录结构、模块化等的讨论。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>有没有情况是使用 <code>interface</code> 或 <code>type</code> 导致性能差异？</strong></p>\n    <ul>\n      <li>提示：关于编译时检查和类型推断的讨论。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong><code>interface</code> 有继承支持，而 <code>type</code> 不可以，但是两者在实际开发中各自的优势和劣势是什么？</strong></p>\n    <ul>\n      <li>提示：考察设计灵活性与复杂度。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你能给出实际开发中 <code>interface</code> 和 <code>type</code> 各自的使用实例吗？</strong></p>\n    <ul>\n      <li>提示：建议谈谈具体的开发经验和场景。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  TypeScript中interface和type的区别\n    声明合并\n      interface支持声明合并\n      type不支持声明合并\n    扩展能力\n      interface使用extends关键字扩展\n      type使用交叉类型&\n    可以描述的类型\n      type描述基本类型、联合类型和元组\n      interface主要用于对象结构定义\n    语法\n      interface使用interface关键字\n      type使用type关键字\n    总结\n      定义对象形状且可能合并或扩展使用interface\n      定义复杂类型使用type",
    "keynote": "- `interface` 支持声明合并，`type` 不支持\n- `interface` 使用 `extends` 扩展，`type` 使用 `&` 交叉类型\n- `type` 描述基本类型、联合类型和元组，`interface` 主要用于对象结构\n- `interface` 推荐用于对象形状定义，`type` 用于复杂类型定义",
    "group_id": 58,
    "kps": [
      "类型系统"
    ],
    "years": [
      2023
    ],
    "corps": [
      "快手"
    ]
  }
}