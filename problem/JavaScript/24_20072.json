{
  "success": true,
  "data": {
    "id": 20072,
    "name": "<p>JavaScript中有哪些数据类型</p>",
    "options": null,
    "answer": "<p>JavaScript 中的数据类型分为基本数据类型和引用数据类型。</p>\n<h3>基本数据类型</h3>\n<ol>\n  <li><strong>Number</strong>：用于表示整数和浮点数，例如 <code>1</code>、<code>3.14</code> 等。还包括特殊值 <code>NaN</code>（非数字）和 <code>Infinity</code>（无穷大）。</li>\n  <li><strong>String</strong>：表示文本数据，由零个或多个 16 位 Unicode 字符组成，用单引号、双引号或反引号包裹，如 <code>'hello'</code>、<code>\"world\"</code>、<code>`JavaScript`</code>。</li>\n  <li><strong>Boolean</strong>：只有两个值，<code>true</code> 和 <code>false</code>，用于逻辑判断。</li>\n  <li><strong>Null</strong>：只有一个值 <code>null</code>，表示一个空对象指针，通常用于手动释放对象引用。</li>\n  <li><strong>Undefined</strong>：变量已声明但未赋值，或者函数没有返回值时，其值为 <code>undefined</code>。</li>\n  <li><strong>Symbol</strong>：ES6 新增的数据类型，它表示独一无二的值，主要用于创建对象的私有属性和方法。例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">const sym = Symbol('description');\n</code></pre>\n<ol start=\"7\">\n  <li><strong>BigInt</strong>：ES2020 引入，用于表示任意大的整数，在整数后面加 <code>n</code> 来表示，如 <code>123n</code>。</li>\n</ol>\n<h3>引用数据类型</h3>\n<p>主要是 <strong>Object</strong>，Object 是一种无序的数据集合，由键值对组成。常见的对象类型有：</p>\n<ol>\n  <li><strong>普通对象</strong>：使用对象字面量 <code>{}</code> 或 <code>new Object()</code> 创建，例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">const person = {\n    name: 'John',\n    age: 30\n};\n</code></pre>\n<ol start=\"2\">\n  <li><strong>数组</strong>：用于存储有序的数据集合，使用方括号 <code>[]</code> 或 <code>new Array()</code> 创建，例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">const numbers = [1, 2, 3];\n</code></pre>\n<ol start=\"3\">\n  <li><strong>函数</strong>：是可执行的代码块，使用函数声明、函数表达式或箭头函数创建，例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">function add(a, b) {\n    return a + b;\n}\n</code></pre>\n<ol start=\"4\">\n  <li><strong>日期对象</strong>：使用 <code>new Date()</code> 创建，用于处理日期和时间，例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">const now = new Date();\n</code></pre>\n<ol start=\"5\">\n  <li><strong>正则表达式对象</strong>：用于匹配和处理字符串，使用正则表达式字面量 <code>/pattern/flags</code> 或 <code>new RegExp(pattern, flags)</code> 创建，例如：</li>\n</ol>\n<pre><code class=\"language-javascript\">const regex = /abc/;\n</code></pre>",
    "type": 6,
    "level": 1,
    "freq": 0.09892328,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：JavaScript中有哪些数据类型。</li>\n  <li><strong>考察点</strong>：对JavaScript数据类型体系的了解，包括基本数据类型和引用数据类型的具体种类。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）数据类型的分类</h4>\n<p>在JavaScript中，数据类型主要分为基本数据类型（也叫原始数据类型）和引用数据类型。基本数据类型是简单的数据段，而引用数据类型是对象，存储的是对内存中对象的引用。</p>\n<h4>（2）不同数据类型的特点</h4>\n<p>基本数据类型直接存储在栈内存中，操作的是数据本身；引用数据类型存储在堆内存中，变量保存的是指向堆中对象的引用，操作的是引用。</p>\n<h3>3. 解析</h3>\n<h4>（1）基本数据类型</h4>\n<ul>\n  <li><strong>Number</strong>：用于表示数字，包括整数和浮点数。例如：<code>let num = 10;</code> 或 <code>let floatNum = 3.14;</code>。</li>\n  <li><strong>String</strong>：用于表示文本，由零个或多个16位Unicode字符组成。可以使用单引号、双引号或反引号来创建字符串。例如：<code>let str = 'hello';</code>。</li>\n  <li><strong>Boolean</strong>：只有两个值，<code>true</code> 和 <code>false</code>，用于逻辑判断。例如：<code>let isTrue = true;</code>。</li>\n  <li><strong>Null</strong>：只有一个值 <code>null</code>，表示一个空对象指针。例如：<code>let emptyObj = null;</code>。</li>\n  <li><strong>Undefined</strong>：当变量已声明但未赋值，或者函数没有返回值时，变量的值就是 <code>undefined</code>。例如：<code>let unassigned;</code> 此时 <code>unassigned</code> 的值为 <code>undefined</code>。</li>\n  <li><strong>Symbol</strong>：ES6 新增的数据类型，它表示独一无二的值。例如：<code>const sym = Symbol('description');</code>。</li>\n  <li><strong>BigInt</strong>：ES2020 引入的数据类型，用于表示任意大的整数。例如：<code>const bigNum = 123456789012345678901234567890n;</code></li>\n</ul>\n<h4>（2）引用数据类型</h4>\n<ul>\n  <li><strong>Object</strong>：是最常用的引用数据类型，可以包含各种键值对。例如：<code>let person = {name: 'John', age: 30};</code></li>\n  <li><strong>Array</strong>：是一种特殊的对象，用于存储有序的数据集合。例如：<code>let arr = [1, 2, 3];</code></li>\n  <li><strong>Function</strong>：也是一种对象，可用于封装可重复使用的代码块。例如：<code>function add(a, b) { return a + b; }</code></li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-javascript\">// 基本数据类型\nlet num = 10;\nlet str = \"hello\";\nlet bool = true;\nlet nullValue = null;\nlet undefinedValue;\nconst sym = Symbol('test');\nconst bigNum = 123456789012345678901234567890n;\n\n// 引用数据类型\nlet obj = { key: 'value' };\nlet arr = [1, 2, 3];\nfunction func() {\n    console.log('This is a function');\n}\n</code></pre>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆基本数据类型和引用数据类型的赋值和传递</h4>\n<ul>\n  <li>误区：认为基本数据类型和引用数据类型在赋值和传递时表现相同。</li>\n  <li>纠正：基本数据类型赋值和传递的是值本身，而引用数据类型赋值和传递的是引用。</li>\n</ul>\n<h4>（2）遗漏新的数据类型</h4>\n<ul>\n  <li>误区：只记得传统的基本数据类型和引用数据类型，忽略了 ES6 及以后新增的 Symbol 和 BigInt。</li>\n  <li>纠正：要了解 JavaScript 语言的发展，掌握新的数据类型。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>JavaScript 中的数据类型分为基本数据类型和引用数据类型。基本数据类型包括 Number、String、Boolean、Null、Undefined、Symbol 和 BigInt；引用数据类型主要有 Object、Array 和 Function。基本数据类型直接存储值，而引用数据类型存储的是对内存中对象的引用。在使用时要注意它们在赋值和传递时的不同表现，同时要关注语言发展带来的新数据类型。</p>",
    "more_ask": "<ol>\n  <li>\n    <p>\n      如何判断一个变量是数组类型？\n      提示：可以从 JavaScript 提供的内置方法和操作符去思考。\n    </p>\n  </li>\n  <li>\n    <p>\n      请说明 null 和 undefined 的区别，以及在什么场景下会分别出现？\n      提示：从定义、使用场景和在布尔运算中的表现等方面考虑。\n    </p>\n  </li>\n  <li>\n    <p>\n      基本数据类型和引用数据类型在内存中的存储方式有什么不同？\n      提示：结合栈内存和堆内存的特点来分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何将一个对象的所有属性复制到另一个对象，有哪些方法？\n      提示：考虑浅拷贝和深拷贝的不同实现方式。\n    </p>\n  </li>\n  <li>\n    <p>\n      当对不同数据类型进行加法运算时，JavaScript 是如何处理的？\n      提示：分析基本数据类型和引用数据类型在加法运算中的转换规则。\n    </p>\n  </li>\n  <li>\n    <p>\n      请解释一下 JavaScript 中的包装对象，它和基本数据类型有什么关系？\n      提示：思考基本数据类型调用方法时发生了什么。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何判断一个变量是否为 NaN？\n      提示：不能直接用等号判断，要借助特定的函数。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于 Symbol 类型，它的主要用途是什么，有什么特点？\n      提示：从唯一性和避免属性名冲突等方面思考。\n    </p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  root((JavaScript 数据类型))\n    基本数据类型\n      Number\n        整数和浮点数\n        特殊值 NaN\n        特殊值 Infinity\n      String\n        文本数据\n        单引号、双引号、反引号包裹\n      Boolean\n        true\n        false\n      Null\n        null\n      Undefined\n        变量声明未赋值\n        函数无返回值\n      Symbol\n        独一无二的值\n        创建对象私有属性和方法\n      BigInt\n        任意大整数\n        整数后加 n\n    引用数据类型\n      Object\n        普通对象\n          对象字面量 {}\n          new Object()\n        数组\n          方括号 []\n          new Array()\n        函数\n          函数声明\n          函数表达式\n          箭头函数\n        日期对象\n          new Date()\n        正则表达式对象\n          正则表达式字面量 /pattern/flags\n          new RegExp(pattern, flags)",
    "keynote": "JavaScript 数据类型：基本、引用\n基本数据类型：\n  - Number：整数、浮点数、NaN、Infinity\n  - String：文本，单/双/反引号包裹\n  - Boolean：true、false\n  - Null：null\n  - Undefined：声明未赋值、函数无返回值\n  - Symbol：独一无二，用于对象私有属性方法\n  - BigInt：任意大整数，整数后加 n\n引用数据类型：\n  - Object：\n    - 普通对象：对象字面量、new Object()\n    - 数组：方括号、new Array()\n    - 函数：声明、表达式、箭头函数\n    - 日期对象：new Date()\n    - 正则表达式对象：字面量、new RegExp()",
    "group_id": 24,
    "kps": [
      "基础语法"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "广州云趣科技",
      "某快消服装头部万人厂",
      "字节跳动",
      "趣链科技",
      "中软国际",
      "懂车帝",
      "美团",
      "百度",
      "滴滴",
      "网思科技",
      "网易有道",
      "GitCode",
      "小红书",
      "高顿教育",
      "牧原集团",
      "携程",
      "宁波蛙声科技",
      "锐明技术",
      "杭州0 - 20人小厂",
      "Cider",
      "京东",
      "卫瓴科技",
      "晶果网络",
      "腾讯云智",
      "淘天集团",
      "小鹅通",
      "网易",
      "快手",
      "Wind万得",
      "中科院软件所",
      "米哈游",
      "金山",
      "比心",
      "小米",
      "Shopee虾皮",
      "深信服",
      "深信服-信锐技术",
      "顺丰",
      "vivo",
      "CVTE视源股份",
      "蚂蚁集团",
      "360",
      "猿辅导",
      "大华",
      "B站",
      "广联达",
      "奇安信",
      "用友",
      "恒生电子",
      "去哪儿网",
      "欢聚集团",
      "亚信安全",
      "酷家乐",
      "旷视科技",
      "同程旅行",
      "知乎",
      "富士康",
      "Momenta",
      "字节飞书",
      "天融信",
      "飞猪",
      "字节国际",
      "腾讯",
      "美团金服",
      "阿里盒马",
      "阿里大文娱",
      "阿里巴巴",
      "百度网盘",
      "百度智能云",
      "华为",
      "众安",
      "OPPO",
      "科大讯飞",
      "好未来",
      "好未来教育",
      "腾讯音乐",
      "途虎养车",
      "心动游戏"
    ]
  }
}