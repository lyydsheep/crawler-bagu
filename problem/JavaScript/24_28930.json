{"success":true,"data":{"id":28930,"name":"<p>请解释深拷贝和浅拷贝的概念</p>","options":null,"answer":"<p>在 JavaScript 中，深拷贝和浅拷贝是处理对象和数组复制时的两种不同方式。</p>\n<h3>浅拷贝</h3>\n<p>浅拷贝创建一个新对象或数组，新对象或数组会复制原始对象或数组的一层属性。对于基本数据类型的属性，会直接复制其值；而对于引用数据类型的属性，复制的是该属性的引用，也就是新对象和原始对象中的引用数据类型属性会指向同一个内存地址。这意味着，如果修改新对象中引用数据类型的属性，原始对象中对应的属性也会被修改。</p>\n<p>以下是一个浅拷贝的示例代码：</p>\n<pre><code class=\"language-javascript\">// 浅拷贝函数\nfunction shallowCopy(obj) {\n    if (typeof obj!== 'object' || obj === null) {\n        return obj;\n    }\n    let newObj = Array.isArray(obj)? [] : {};\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            newObj[key] = obj[key];\n        }\n    }\n    return newObj;\n}\n\n// 示例对象\nlet originalObj = {\n    name: 'John',\n    hobbies: ['reading', 'running']\n};\n\n// 进行浅拷贝\nlet copiedObj = shallowCopy(originalObj);\n\n// 修改浅拷贝对象中的引用类型属性\ncopiedObj.hobbies.push('swimming');\n\n// 输出原始对象和浅拷贝对象的 hobbies 属性\nconsole.log(originalObj.hobbies); // 输出: ['reading', 'running', 'swimming']\nconsole.log(copiedObj.hobbies);   // 输出: ['reading', 'running', 'swimming']\n</code></pre>\n<p>在上述代码中，<code>shallowCopy</code> 函数实现了浅拷贝。当修改 <code>copiedObj</code> 中的 <code>hobbies</code> 数组时，<code>originalObj</code> 中的 <code>hobbies</code> 数组也会被修改，因为它们指向同一个内存地址。</p>\n<h3>深拷贝</h3>\n<p>深拷贝会递归地复制原始对象或数组的所有属性，包括嵌套的对象和数组。这意味着，深拷贝会创建一个完全独立的新对象或数组，新对象和原始对象在内存中是完全分离的，修改新对象的任何属性都不会影响原始对象，反之亦然。</p>\n<p>以下是一个深拷贝的示例代码：</p>\n<pre><code class=\"language-javascript\">// 深拷贝函数\nfunction deepCopy(obj) {\n    if (typeof obj!== 'object' || obj === null) {\n        return obj;\n    }\n    let newObj = Array.isArray(obj)? [] : {};\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            newObj[key] = deepCopy(obj[key]);\n        }\n    }\n    return newObj;\n}\n\n// 示例对象\nlet originalObj = {\n    name: 'John',\n    hobbies: ['reading', 'running']\n};\n\n// 进行深拷贝\nlet copiedObj = deepCopy(originalObj);\n\n// 修改深拷贝对象中的引用类型属性\ncopiedObj.hobbies.push('swimming');\n\n// 输出原始对象和深拷贝对象的 hobbies 属性\nconsole.log(originalObj.hobbies); // 输出: ['reading', 'running']\nconsole.log(copiedObj.hobbies);   // 输出: ['reading', 'running', 'swimming']\n</code></pre>\n<p>在上述代码中，<code>deepCopy</code> 函数实现了深拷贝。当修改 <code>copiedObj</code> 中的 <code>hobbies</code> 数组时，<code>originalObj</code> 中的 <code>hobbies</code> 数组不会受到影响，因为它们在内存中是独立的。</p>","type":6,"level":1,"freq":0.01581427,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：解释JavaScript中深拷贝和浅拷贝的概念。</li>\n  <li><strong>考察点</strong>：对JavaScript数据类型（基本数据类型和引用数据类型）存储方式的理解，以及深拷贝和浅拷贝在处理不同数据类型时的差异。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）JavaScript数据类型</h4>\n<ul>\n  <li><strong>基本数据类型</strong>：如<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Symbol</code>，它们的值直接存储在栈内存中。</li>\n  <li><strong>引用数据类型</strong>：如<code>Object</code>、<code>Array</code>、<code>Function</code>等，变量在栈内存中存储的是指向堆内存中实际对象的引用地址。</li>\n</ul>\n<h4>（2）赋值操作</h4>\n<ul>\n  <li>基本数据类型赋值时，会在栈内存中创建一个新的值。</li>\n  <li>引用数据类型赋值时，只是复制了引用地址，而不是对象本身，多个变量会指向同一个堆内存中的对象。</li>\n</ul>\n<h3>3. 解析</h3>\n<h4>（1）浅拷贝</h4>\n<ul>\n  <li><strong>概念</strong>：浅拷贝只复制对象的一层属性。对于基本数据类型，会复制其值；对于引用数据类型，只复制引用地址，而不复制对象本身。这意味着原对象和浅拷贝后的对象会共享部分引用数据类型的子对象。</li>\n  <li><strong>示例代码</strong>：</li>\n</ul>\n<pre><code class=\"language-javascript\">const original = {\n    name: 'John',\n    hobbies: ['reading', 'swimming']\n};\nconst shallowCopy = Object.assign({}, original);\nshallowCopy.hobbies.push('running');\nconsole.log(original.hobbies); // 输出: ['reading', 'swimming', 'running']\n</code></pre>\n<ul>\n  <li><strong>解释</strong>：在这个例子中，<code>shallowCopy</code>是<code>original</code>的浅拷贝。<code>name</code>是基本数据类型，复制了值；<code>hobbies</code>是引用数据类型，只复制了引用地址。所以修改<code>shallowCopy.hobbies</code>会影响到<code>original.hobbies</code>。</li>\n</ul>\n<h4>（2）深拷贝</h4>\n<ul>\n  <li><strong>概念</strong>：深拷贝会递归地复制对象的所有属性，包括嵌套的对象。它会在堆内存中创建一个完全独立的新对象，新对象和原对象没有任何引用关系。</li>\n  <li><strong>示例代码</strong>：</li>\n</ul>\n<pre><code class=\"language-javascript\">function deepCopy(obj) {\n    if (typeof obj!== 'object' || obj === null) {\n        return obj;\n    }\n    let copy;\n    if (Array.isArray(obj)) {\n        copy = [];\n        for (let i = 0; i &#x3C; obj.length; i++) {\n            copy[i] = deepCopy(obj[i]);\n        }\n    } else {\n        copy = {};\n        for (let key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                copy[key] = deepCopy(obj[key]);\n            }\n        }\n    }\n    return copy;\n}\nconst original = {\n    name: 'John',\n    hobbies: ['reading', 'swimming']\n};\nconst deepCopyObj = deepCopy(original);\ndeepCopyObj.hobbies.push('running');\nconsole.log(original.hobbies); // 输出: ['reading', 'swimming']\n</code></pre>\n<ul>\n  <li><strong>解释</strong>：<code>deepCopy</code>函数会递归地复制对象的所有属性。对于基本数据类型，直接返回其值；对于引用数据类型，会创建一个新的对象或数组，并递归地复制其属性。所以修改<code>deepCopyObj.hobbies</code>不会影响到<code>original.hobbies</code>。</li>\n</ul>\n<h3>4. 常见误区</h3>\n<h4>（1）混淆浅拷贝和赋值</h4>\n<ul>\n  <li>误区：认为浅拷贝和直接赋值是一样的。</li>\n  <li>纠正：直接赋值只是复制引用地址，而浅拷贝会创建一个新对象，并复制其一层属性。</li>\n</ul>\n<h4>（2）认为JSON.stringify和JSON.parse是完美的深拷贝方法</h4>\n<ul>\n  <li>误区：使用<code>JSON.stringify</code>和<code>JSON.parse</code>进行深拷贝，认为它可以处理所有情况。</li>\n  <li>纠正：这种方法有局限性，它不能处理函数、<code>Symbol</code>、<code>Date</code>等特殊对象，也不能处理循环引用的对象。</li>\n</ul>\n<h3>5. 总结回答</h3>\n<p>“在JavaScript中，浅拷贝和深拷贝是用于复制对象的两种不同方式。</p>\n<p>浅拷贝只复制对象的一层属性。对于基本数据类型，会复制其值；对于引用数据类型，只复制引用地址，原对象和浅拷贝后的对象会共享部分引用数据类型的子对象。例如，使用<code>Object.assign</code>方法可以实现浅拷贝。</p>\n<p>深拷贝会递归地复制对象的所有属性，包括嵌套的对象。它会在堆内存中创建一个完全独立的新对象，新对象和原对象没有任何引用关系。可以通过自定义递归函数来实现深拷贝。</p>\n<p>需要注意的是，直接赋值和浅拷贝不同，而使用<code>JSON.stringify</code>和<code>JSON.parse</code>进行深拷贝有一定的局限性。”</p>","more_ask":"<ol>\n  <li>\n    <p>\n      请详细说明在 JavaScript 中实现深拷贝的几种常见方法，并分析它们的优缺点。\n      提示：可以从使用递归、JSON.stringify()、第三方库等角度思考，分析时考虑性能、适用场景等。\n    </p>\n  </li>\n  <li>\n    <p>\n      浅拷贝在处理嵌套对象时会出现什么问题？请举例说明。\n      提示：创建一个包含嵌套对象的对象，进行浅拷贝后修改嵌套对象的值，观察原对象和拷贝对象的变化。\n    </p>\n  </li>\n  <li>\n    <p>\n      当对象中包含函数、正则表达式等特殊类型时，深拷贝会遇到什么挑战，如何解决？\n      提示：函数和正则表达式有其特殊的属性和行为，思考深拷贝时如何正确处理它们。\n    </p>\n  </li>\n  <li>\n    <p>\n      请实现一个能处理循环引用的深拷贝函数。\n      提示：循环引用指对象直接或间接引用自身，需要使用一个数据结构来记录已经拷贝过的对象，避免无限循环。\n    </p>\n  </li>\n  <li>\n    <p>\n      比较深拷贝和浅拷贝在内存占用和性能上的差异。\n      提示：从复制对象时内存分配和操作复杂度的角度分析。\n    </p>\n  </li>\n  <li>\n    <p>\n      在数组的浅拷贝和深拷贝中，有哪些不同的实现方式？\n      提示：数组有一些特有的方法可以用于浅拷贝，深拷贝时要考虑数组元素的类型。\n    </p>\n  </li>\n  <li>\n    <p>\n      对于大型对象的深拷贝，有什么优化策略？\n      提示：可以从减少不必要的复制、分块处理等方面考虑。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((JavaScript 深拷贝和浅拷贝))\n    浅拷贝\n      创建新对象或数组\n      复制一层属性\n      基本数据类型：复制值\n      引用数据类型：复制引用\n      修改新对象引用属性影响原始对象\n    深拷贝\n      递归复制所有属性\n      创建完全独立新对象或数组\n      修改新对象属性不影响原始对象","keynote":"JavaScript 深拷贝和浅拷贝\n- 浅拷贝：创建新对象或数组，复制一层属性，基本类型复制值，引用类型复制引用，改新对象引用属性影响原始对象\n- 深拷贝：递归复制所有属性，创建独立新对象或数组，改新对象属性不影响原始对象","group_id":24,"kps":["对象和数组"],"years":[2024,2023,2022],"corps":["华为","古茗","上海某小厂","腾讯","唯品会","奇富借条","美象信息","腾讯云智","淘天集团","数新网络","用友","小米","滴滴","携程","B站","广联达","4399","群核科技（酷家乐）","酷家乐","旷视科技","吉比特","浩鲸科技","金山","美团","百度","科大讯飞","好未来","途虎养车","字节跳动","快手"]}}