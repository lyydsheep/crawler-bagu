{
  "success": true,
  "data": {
    "id": 7856,
    "name": "<p>箭头函数与普通函数的区别</p>",
    "options": null,
    "answer": "<p>在 JavaScript 中，箭头函数和普通函数（通常指函数声明和函数表达式）之间存在一些重要的区别，主要体现在以下几个方面：</p>\n<h3>1. <code>this</code> 的绑定</h3>\n<ul>\n  <li><strong>普通函数</strong>: 其 <code>this</code> 绑定是动态的，取决于函数被调用的方式（调用者）。</li>\n  <li><strong>箭头函数</strong>: 不会创建自己的 <code>this</code>，而是继承外层作用域的 <code>this</code> 值。换句话说，箭头函数中的 <code>this</code> 是在函数定义时确定的，而不是在调用时。</li>\n</ul>\n<pre><code class=\"language-javascript\">function Person() {\n  this.age = 0;\n\n  setInterval(function growUp() {\n    this.age++; // this指向全局对象或undefined\n  }, 1000);\n}\n\nconst p = new Person();\n\nsetTimeout(() => {\n  console.log(p.age); // 正确的输出年龄\n}, 3000);\n</code></pre>\n<h3>2. <code>arguments</code> 对象</h3>\n<ul>\n  <li><strong>普通函数</strong>: 拥有自己的 <code>arguments</code> 对象，代表传递给函数的参数。</li>\n  <li><strong>箭头函数</strong>: 不有自己的 <code>arguments</code>，如果需要参数列表，可以直接使用 Rest 参数语法。</li>\n</ul>\n<pre><code class=\"language-javascript\">function normalFunction() {\n  console.log(arguments);\n}\n\nconst arrowFunction = () => {\n  console.log(arguments); // 报错：arguments is not defined\n};\n\nnormalFunction(1, 2, 3); // 输出: { '0': 1, '1': 2, '2': 3 }\narrowFunction(1, 2, 3); // 报错\n</code></pre>\n<h3>3. 作为构造函数</h3>\n<ul>\n  <li><strong>普通函数</strong>: 可以用 <code>new</code> 关键字调用，作为构造函数使用。</li>\n  <li><strong>箭头函数</strong>: 不能作为构造函数使用，如果用 <code>new</code> 调用箭头函数，会抛出错误。</li>\n</ul>\n<pre><code class=\"language-javascript\">const ArrowFunc = () => {};\nconst NormalFunc = function() {};\n\nconst a = new ArrowFunc(); // 报错: ArrowFunc is not a constructor\nconst b = new NormalFunc(); // 正确: 创建一个对象\n</code></pre>\n<h3>4. 语法简洁性</h3>\n<ul>\n  <li><strong>箭头函数</strong>: 语法更简洁，适用于一行的简短函数，且可以省略 <code>{}</code> 和 <code>return</code>。</li>\n</ul>\n<pre><code class=\"language-javascript\">const add = (a, b) => a + b; // 简洁的箭头函数\n</code></pre>\n<ul>\n  <li><strong>普通函数</strong>: 需要完整的 <code>function</code> 关键字、名称、参数列表和大括号。</li>\n</ul>\n<h3>5. 不能使用 <code>bind</code>、<code>call</code>、<code>apply</code></h3>\n<ul>\n  <li><strong>普通函数</strong>: 可以使用 <code>.bind()</code>、<code>.call()</code> 或 <code>.apply()</code> 方法来显式改变 <code>this</code> 的上下文。</li>\n  <li><strong>箭头函数</strong>: 不会改变 <code>this</code> 的值，且调用时忽略这些方法。</li>\n</ul>\n<h3>总结</h3>\n<p>箭头函数在某些情况下更简洁，更便于处理函数内部的上下文，不过也带来了一些限制（如无法用作构造函数、没有自己的 <code>this</code> 和 <code>arguments</code>）。根据具体的需求，选择使用合适的函数形式会更好。</p>",
    "type": 6,
    "level": 2,
    "freq": 0.05652759,
    "analysis": "<h3><strong>1. 题目核心</strong></h3>\n<ul>\n  <li><strong>问题</strong>：JavaScript中箭头函数与普通函数的区别。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>语法差异。</li>\n      <li>函数内部<code>this</code>的指向。</li>\n      <li>构造函数使用。</li>\n      <li><code>arguments</code>对象的使用。</li>\n      <li>生成器函数使用。</li>\n    </ul>\n  </li>\n</ul>\n<h3><strong>2. 背景知识</strong></h3>\n<h4><strong>（1）普通函数</strong></h4>\n<ul>\n  <li>是JavaScript中传统的函数定义方式，通过<code>function</code>关键字声明。</li>\n  <li>具有自己独立的执行上下文，有自己的<code>this</code>、<code>arguments</code>等。</li>\n</ul>\n<h4><strong>（2）箭头函数</strong></h4>\n<ul>\n  <li>是ES6引入的新的函数定义语法，语法更简洁。</li>\n  <li>主要用于简洁的函数定义场景。</li>\n</ul>\n<h3><strong>3. 解析</strong></h3>\n<h4><strong>（1）语法差异</strong></h4>\n<ul>\n  <li><strong>普通函数</strong>：可以有函数名，使用<code>function</code>关键字定义，函数体可以是单行或多行。</li>\n</ul>\n<pre><code class=\"language-javascript\">function add(a, b) {\n    return a + b;\n}\n</code></pre>\n<ul>\n  <li><strong>箭头函数</strong>：没有函数名（除非赋值给变量），使用箭头<code>=></code>定义。如果函数体只有一条语句，可以省略<code>return</code>关键字和花括号。</li>\n</ul>\n<pre><code class=\"language-javascript\">const add = (a, b) => a + b;\n</code></pre>\n<h4><strong>（2）<code>this</code>指向不同</strong></h4>\n<ul>\n  <li><strong>普通函数</strong>：<code>this</code>的值取决于函数的调用方式，在全局作用域中，<code>this</code>指向全局对象（在浏览器中是<code>window</code>）；作为对象方法调用时，<code>this</code>指向调用该方法的对象；使用<code>new</code>关键字调用时，<code>this</code>指向新创建的对象。</li>\n</ul>\n<pre><code class=\"language-javascript\">const obj = {\n    name: 'John',\n    sayName: function() {\n        console.log(this.name);\n    }\n};\nobj.sayName(); // 输出: John\n</code></pre>\n<ul>\n  <li><strong>箭头函数</strong>：<code>this</code>的值继承自外层函数（即定义时的上下文），不会根据调用方式改变。</li>\n</ul>\n<pre><code class=\"language-javascript\">const obj = {\n    name: 'John',\n    sayName: () => {\n        console.log(this.name);\n    }\n};\nobj.sayName(); // 输出: undefined\n</code></pre>\n<h4><strong>（3）构造函数使用</strong></h4>\n<ul>\n  <li><strong>普通函数</strong>：可以作为构造函数使用，通过<code>new</code>关键字创建对象实例。</li>\n</ul>\n<pre><code class=\"language-javascript\">function Person(name) {\n    this.name = name;\n}\nconst person = new Person('John');\nconsole.log(person.name); // 输出: John\n</code></pre>\n<ul>\n  <li><strong>箭头函数</strong>：不能作为构造函数使用，使用<code>new</code>关键字调用箭头函数会报错。</li>\n</ul>\n<pre><code class=\"language-javascript\">const Person = (name) => {\n    this.name = name;\n};\n// const person = new Person('John'); // 报错\n</code></pre>\n<h4><strong>（4）<code>arguments</code>对象</strong></h4>\n<ul>\n  <li><strong>普通函数</strong>：函数内部有<code>arguments</code>对象，它是一个类数组对象，包含了函数调用时传递的所有参数。</li>\n</ul>\n<pre><code class=\"language-javascript\">function sum() {\n    let total = 0;\n    for (let i = 0; i &#x3C; arguments.length; i++) {\n        total += arguments[i];\n    }\n    return total;\n}\nconsole.log(sum(1, 2, 3)); // 输出: 6\n</code></pre>\n<ul>\n  <li><strong>箭头函数</strong>：没有自己的<code>arguments</code>对象，如果要访问参数，需要使用剩余参数语法。</li>\n</ul>\n<pre><code class=\"language-javascript\">const sum = (...args) => {\n    let total = 0;\n    for (let i = 0; i &#x3C; args.length; i++) {\n        total += args[i];\n    }\n    return total;\n};\nconsole.log(sum(1, 2, 3)); // 输出: 6\n</code></pre>\n<h4><strong>（5）生成器函数使用</strong></h4>\n<ul>\n  <li><strong>普通函数</strong>：可以通过在<code>function</code>关键字后加<code>*</code>定义生成器函数。</li>\n</ul>\n<pre><code class=\"language-javascript\">function* generator() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value); // 输出: 1\n</code></pre>\n<ul>\n  <li><strong>箭头函数</strong>：不能定义生成器函数。</li>\n</ul>\n<h3><strong>4. 常见误区</strong></h3>\n<h4><strong>（1）混淆<code>this</code>指向</strong></h4>\n<ul>\n  <li>误区：认为箭头函数的<code>this</code>指向和普通函数一样，根据调用方式改变。</li>\n  <li>纠正：明确箭头函数<code>this</code>指向定义时的外层上下文。</li>\n</ul>\n<h4><strong>（2）用箭头函数作构造函数</strong></h4>\n<ul>\n  <li>误区：尝试使用箭头函数作为构造函数创建对象。</li>\n  <li>纠正：记住箭头函数不能用作构造函数。</li>\n</ul>\n<h4><strong>（3）在箭头函数中使用<code>arguments</code></strong></h4>\n<ul>\n  <li>误区：在箭头函数中直接使用<code>arguments</code>对象。</li>\n  <li>纠正：使用剩余参数语法来处理箭头函数的参数。</li>\n</ul>\n<h3><strong>5. 总结回答</strong></h3>\n<p>JavaScript中箭头函数与普通函数有以下区别：</p>\n<ul>\n  <li><strong>语法</strong>：普通函数用<code>function</code>关键字定义，可有名，函数体灵活；箭头函数用<code>=></code>定义，语法简洁，单语句可省略<code>return</code>和花括号。</li>\n  <li><strong><code>this</code>指向</strong>：普通函数<code>this</code>取决于调用方式；箭头函数<code>this</code>继承自外层函数定义时的上下文。</li>\n  <li><strong>构造函数</strong>：普通函数可作为构造函数用<code>new</code>创建对象；箭头函数不能作为构造函数。</li>\n  <li><strong><code>arguments</code>对象</strong>：普通函数内部有<code>arguments</code>对象；箭头函数没有，需用剩余参数语法处理参数。</li>\n  <li><strong>生成器函数</strong>：普通函数可定义生成器函数；箭头函数不能定义。</li>\n</ul>\n<p>在实际开发中，若需灵活的<code>this</code>指向、使用构造函数或<code>arguments</code>对象，应使用普通函数；若只是简单的函数逻辑且希望语法简洁，可使用箭头函数。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong><code>this</code>的上下文</strong><br>提示：可以举例说明箭头函数中的<code>this</code>与普通函数中的<code>this</code>的不同。</p>\n  </li>\n  <li>\n    <p><strong>构造函数的用途</strong><br>提示：询问箭头函数是否可以用作构造函数，为什么或为什么不。</p>\n  </li>\n  <li>\n    <p><strong>函数的参数处理</strong><br>提示：讨论箭头函数在处理参数时与普通函数在某些情况下的区别。</p>\n  </li>\n  <li>\n    <p><strong>使用场景</strong><br>提示：问面试者在什么情况下更倾向于使用箭头函数或者普通函数，并给出具体示例。</p>\n  </li>\n  <li>\n    <p><strong>语法糖与可读性</strong><br>提示：探讨箭头函数的简洁语法对代码可读性产生的影响。</p>\n  </li>\n  <li>\n    <p><strong>与Promise结合使用</strong><br>提示：询问在使用Promise时，箭头函数的表现如何，并举例说明。</p>\n  </li>\n  <li>\n    <p><strong>性能比较</strong><br>提示：讨论箭头函数和普通函数的性能差异是否显著，涉及到何种使用场景。</p>\n  </li>\n  <li>\n    <p><strong>与高阶函数的结合</strong><br>提示：询问箭头函数在高阶函数中的应用，举例说明。</p>\n  </li>\n  <li>\n    <p><strong>嵌套使用</strong><br>提示：讨论在嵌套函数中使用箭头函数和普通函数时，如何处理<code>this</code>。</p>\n  </li>\n  <li>\n    <p><strong>箭头函数的可调用性</strong><br>提示：询问箭头函数是否可以使用<code>apply</code>和<code>call</code>，并解释原因。</p>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  JavaScript函数\n    箭头函数与普通函数的区别\n      this的绑定\n        普通函数\n          动态绑定\n        箭头函数\n          继承外层作用域\n      arguments对象\n        普通函数\n          拥有arguments\n        箭头函数\n          不拥有arguments\n      作为构造函数\n        普通函数\n          可以用new关键字\n        箭头函数\n          不能作为构造函数\n      语法简洁性\n        箭头函数\n          更简洁\n        普通函数\n          需要完整语法\n      bind、call、apply\n        普通函数\n          可以使用\n        箭头函数\n          不能改变this",
    "keynote": "- 箭头函数和普通函数在`this`绑定上的区别：箭头函数继承外部`this`，而普通函数的`this`是动态的。\n- 箭头函数没有自己的`arguments`对象；普通函数则有自己的`arguments`。\n- 箭头函数不能被用作构造函数，而普通函数可以。\n- 箭头函数提供更简洁的语法形式，适合用于简短操作。\n- 箭头函数不支持`.bind()`、`.call()`或`.apply()`来更改其`this`值。",
    "group_id": 24,
    "kps": [
      "ES6"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "懂车帝",
      "京东",
      "数字马力",
      "B站",
      "童心制物",
      "高顿教育",
      "趣链科技",
      "泰豪软件",
      "唯品会",
      "极智嘉",
      "小米",
      "帆软",
      "Cider",
      "小红书",
      "4399",
      "美团",
      "滴滴",
      "淘天集团",
      "微众银行",
      "比心",
      "Shopee虾皮",
      "深信服",
      "深信服-信锐技术",
      "拼多多",
      "携程",
      "CVTE视源股份",
      "招商银行",
      "蚂蚁集团",
      "澎贝数科",
      "360",
      "广联达",
      "奇安信",
      "远景",
      "汇量科技",
      "腾讯音乐",
      "网易有道",
      "知乎",
      "群核科技（酷家乐）",
      "酷家乐",
      "旷视科技",
      "神策数据",
      "吉比特",
      "中国联通",
      "浩鲸科技",
      "同程旅行",
      "金山",
      "货拉拉",
      "七牛云",
      "Momenta",
      "牛客",
      "星环科技",
      "字节跳动",
      "腾讯金融科技",
      "腾讯",
      "阿里巴巴",
      "钉钉",
      "百度",
      "众安",
      "成都飞书",
      "网易",
      "快手",
      "OPPO",
      "好未来",
      "联想集团",
      "完美世界",
      "途虎养车",
      "扁鹊健康"
    ]
  }
}