{"success":true,"data":{"id":20161,"name":"<p>请解释宏任务和微任务，并说明事件循环机制</p>","options":null,"answer":"<h3>宏任务和微任务的解释</h3>\n<h4>宏任务</h4>\n<p>宏任务是由宿主环境（如浏览器、Node.js）发起的任务。在浏览器环境中，常见的宏任务包括：</p>\n<ul>\n  <li><code>setTimeout</code>：用于在指定的延迟时间后执行回调函数。例如：</li>\n</ul>\n<pre><code class=\"language-javascript\">setTimeout(() => {\n    console.log('这是一个宏任务');\n}, 1000);\n</code></pre>\n<ul>\n  <li><code>setInterval</code>：按指定的时间间隔重复执行回调函数。</li>\n</ul>\n<pre><code class=\"language-javascript\">setInterval(() => {\n    console.log('每隔一段时间执行的宏任务');\n}, 2000);\n</code></pre>\n<ul>\n  <li><code>setImmediate</code>（Node.js 环境）：在当前事件轮询结束时执行回调。</li>\n  <li><code>I/O 操作</code>：如文件读取、网络请求等。当这些操作完成时，对应的回调函数会作为宏任务加入到任务队列中。</li>\n</ul>\n<h4>微任务</h4>\n<p>微任务是由 JavaScript 引擎自身发起的任务。常见的微任务有：</p>\n<ul>\n  <li><code>Promise.then</code>：当 <code>Promise</code> 的状态变为 <code>resolved</code> 或 <code>rejected</code> 时，其对应的 <code>then</code> 方法中的回调函数会作为微任务加入到微任务队列。例如：</li>\n</ul>\n<pre><code class=\"language-javascript\">const promise = new Promise((resolve) => {\n    resolve('Promise 已解决');\n});\npromise.then((value) => {\n    console.log(value);\n});\n</code></pre>\n<ul>\n  <li><code>MutationObserver</code>：用于监听 DOM 树的变化，当 DOM 发生变化时，其回调函数会作为微任务执行。</li>\n  <li><code>process.nextTick</code>（Node.js 环境）：在当前操作结束后，下一次事件循环开始前执行。</li>\n</ul>\n<h3>事件循环机制</h3>\n<p>事件循环（Event Loop）是 JavaScript 实现异步编程的核心机制，主要负责协调执行栈和任务队列中的任务。其工作流程如下：</p>\n<h4>1. 执行栈</h4>\n<p>JavaScript 代码开始执行时，会创建一个执行栈。同步代码会依次进入执行栈并执行，当一个函数被调用时，会在执行栈中创建一个新的栈帧，函数执行完毕后，栈帧会从执行栈中弹出。</p>\n<h4>2. 任务队列</h4>\n<p>任务队列分为宏任务队列和微任务队列。当遇到异步操作时，对应的回调函数不会立即执行，而是会被放入相应的任务队列中。</p>\n<h4>3. 事件循环流程</h4>\n<ul>\n  <li><strong>初始阶段</strong>：执行栈开始执行同步代码，同步代码依次入栈并执行。</li>\n  <li><strong>异步操作</strong>：当遇到异步操作（如 <code>setTimeout</code>、<code>Promise</code>）时，异步操作会在后台执行，其回调函数会被放入相应的任务队列中。</li>\n  <li><strong>执行栈为空</strong>：当执行栈中的同步代码执行完毕后，事件循环开始工作。</li>\n  <li><strong>微任务处理</strong>：事件循环会先检查微任务队列，如果微任务队列中有任务，则依次将微任务从队列中取出，放入执行栈中执行，直到微任务队列为空。</li>\n  <li><strong>宏任务处理</strong>：微任务队列处理完毕后，事件循环会从宏任务队列中取出一个宏任务，放入执行栈中执行。</li>\n  <li><strong>重复循环</strong>：执行完一个宏任务后，再次检查微任务队列，重复上述步骤，不断循环，直到任务队列都为空。</li>\n</ul>\n<p>以下是一个示例代码，帮助理解事件循环机制：</p>\n<pre><code class=\"language-javascript\">console.log('同步代码 1');\n\nsetTimeout(() => {\n    console.log('宏任务');\n}, 0);\n\nPromise.resolve().then(() => {\n    console.log('微任务');\n});\n\nconsole.log('同步代码 2');\n</code></pre>\n<p>执行结果依次为：</p>\n<pre><code>同步代码 1\n同步代码 2\n微任务\n宏任务\n</code></pre>\n<p>解释：首先执行同步代码 <code>console.log('同步代码 1')</code> 和 <code>console.log('同步代码 2')</code>，然后 <code>Promise.then</code> 的回调函数作为微任务被放入微任务队列，<code>setTimeout</code> 的回调函数作为宏任务被放入宏任务队列。当同步代码执行完毕后，先处理微任务队列中的任务，输出 <code>微任务</code>，最后处理宏任务队列中的任务，输出 <code>宏任务</code>。</p>","type":6,"level":2,"freq":0.1685733,"analysis":"<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：解释宏任务和微任务，并说明事件循环机制。</li>\n  <li><strong>考察点</strong>：\n    <ul>\n      <li>对宏任务和微任务概念的理解。</li>\n      <li>事件循环机制的工作原理。</li>\n      <li>宏任务、微任务在事件循环中的执行顺序。</li>\n    </ul>\n  </li>\n</ul>\n<h3>2. 背景知识</h3>\n<h4>（1）JavaScript 单线程特性</h4>\n<p>JavaScript 是单线程的，这意味着它一次只能执行一个任务。为了处理异步操作，引入了事件循环机制。</p>\n<h4>（2）异步操作的需求</h4>\n<p>在网页开发中，有很多操作是异步的，如网络请求、定时器等。为了不阻塞主线程，这些操作需要在后台执行，完成后再通知主线程。</p>\n<h3>3. 解析</h3>\n<h4>（1）宏任务</h4>\n<ul>\n  <li><strong>定义</strong>：宏任务是由宿主环境（如浏览器、Node.js）发起的任务。</li>\n  <li><strong>常见的宏任务</strong>：\n    <ul>\n      <li><code>setTimeout</code></li>\n      <li><code>setInterval</code></li>\n      <li><code>setImmediate</code>（Node.js 环境）</li>\n      <li><code>I/O</code> 操作（如文件读取、网络请求）</li>\n      <li><code>UI 渲染</code></li>\n    </ul>\n  </li>\n</ul>\n<h4>（2）微任务</h4>\n<ul>\n  <li><strong>定义</strong>：微任务是由 JavaScript 引擎发起的任务。</li>\n  <li><strong>常见的微任务</strong>：\n    <ul>\n      <li><code>Promise.then</code></li>\n      <li><code>MutationObserver</code></li>\n      <li><code>process.nextTick</code>（Node.js 环境）</li>\n    </ul>\n  </li>\n</ul>\n<h4>（3）事件循环机制</h4>\n<ul>\n  <li><strong>基本概念</strong>：事件循环是 JavaScript 处理异步任务的机制，它不断地从任务队列中取出任务并执行。</li>\n  <li><strong>工作流程</strong>：\n    <ol>\n      <li><strong>执行主线程上的同步代码</strong>：JavaScript 引擎首先会执行主线程上的同步代码，这些代码会依次执行，直到执行完毕。</li>\n      <li><strong>收集宏任务和微任务</strong>：在执行同步代码的过程中，如果遇到异步操作，会将相应的任务添加到对应的任务队列中。宏任务会被添加到宏任务队列，微任务会被添加到微任务队列。</li>\n      <li><strong>执行微任务队列</strong>：当主线程上的同步代码执行完毕后，JavaScript 引擎会检查微任务队列。如果微任务队列中有任务，会依次执行微任务队列中的所有任务，直到微任务队列为空。</li>\n      <li><strong>执行一个宏任务</strong>：微任务队列执行完毕后，从宏任务队列中取出一个宏任务并执行。</li>\n      <li><strong>重复步骤 3 和 4</strong>：执行完一个宏任务后，再次检查微任务队列，执行其中的所有任务，然后再从宏任务队列中取出一个宏任务执行，如此循环，直到所有任务都执行完毕。</li>\n    </ol>\n  </li>\n</ul>\n<h3>4. 示例代码</h3>\n<pre><code class=\"language-javascript\">console.log('1. 同步代码开始');\n\nsetTimeout(() => {\n    console.log('4. 宏任务 setTimeout 执行');\n}, 0);\n\nPromise.resolve().then(() => {\n    console.log('3. 微任务 Promise.then 执行');\n});\n\nconsole.log('2. 同步代码结束');\n</code></pre>\n<ul>\n  <li><strong>执行顺序分析</strong>：\n    <ol>\n      <li>首先执行主线程上的同步代码，输出 <code>1. 同步代码开始</code> 和 <code>2. 同步代码结束</code>。</li>\n      <li>遇到 <code>setTimeout</code>，将其回调函数添加到宏任务队列。</li>\n      <li>遇到 <code>Promise.then</code>，将其回调函数添加到微任务队列。</li>\n      <li>主线程同步代码执行完毕后，检查微任务队列，执行 <code>Promise.then</code> 的回调函数，输出 <code>3. 微任务 Promise.then 执行</code>。</li>\n      <li>微任务队列执行完毕后，从宏任务队列中取出 <code>setTimeout</code> 的回调函数并执行，输出 <code>4. 宏任务 setTimeout 执行</code>。</li>\n    </ol>\n  </li>\n</ul>\n<h3>5. 常见误区</h3>\n<h4>（1）混淆宏任务和微任务的执行顺序</h4>\n<ul>\n  <li>误区：认为宏任务和微任务是交替执行的，或者认为宏任务执行完后才执行微任务。</li>\n  <li>纠正：每次执行完一个宏任务后，会先执行完微任务队列中的所有任务，再执行下一个宏任务。</li>\n</ul>\n<h4>（2）忽视微任务队列的清空</h4>\n<ul>\n  <li>误区：只执行一个微任务就去执行宏任务。</li>\n  <li>纠正：在执行完一个宏任务后，会将微任务队列中的所有任务都执行完毕，直到微任务队列为空，才会执行下一个宏任务。</li>\n</ul>\n<h3>6. 总结回答</h3>\n<p>宏任务是由宿主环境发起的任务，常见的宏任务有 <code>setTimeout</code>、<code>setInterval</code>、<code>I/O</code> 操作等；微任务是由 JavaScript 引擎发起的任务，常见的微任务有 <code>Promise.then</code>、<code>MutationObserver</code> 等。</p>\n<p>事件循环是 JavaScript 处理异步任务的机制。其工作流程为：先执行主线程上的同步代码，在执行过程中遇到异步操作会将相应任务添加到宏任务队列或微任务队列。主线程同步代码执行完毕后，会先执行微任务队列中的所有任务，直到微任务队列为空，然后从宏任务队列中取出一个宏任务执行，执行完一个宏任务后，再次执行微任务队列中的所有任务，如此循环，直到所有任务都执行完毕。</p>\n<p>需要注意的是，要正确理解宏任务和微任务的执行顺序，每次执行完一个宏任务后，要先清空微任务队列，再执行下一个宏任务。</p>","more_ask":"<ol>\n  <li>\n    <p>\n      请举例说明在实际项目中，宏任务和微任务的使用场景及优势。\n      提示：可以从前端页面渲染、异步数据请求、定时任务等方面思考实际项目场景。\n    </p>\n  </li>\n  <li>\n    <p>\n      当宏任务和微任务嵌套时，事件循环的执行顺序是怎样的？请结合代码详细分析。\n      提示：编写包含宏任务嵌套微任务、微任务嵌套宏任务等不同嵌套情况的代码，逐步分析执行顺序。\n    </p>\n  </li>\n  <li>\n    <p>\n      <code>Promise</code> 中的 <code>then</code> 方法和 <code>async/await</code> 语法糖在微任务执行上有什么区别和联系？\n      提示：从语法结构、执行机制、错误处理等方面对比两者在微任务执行时的特点。\n    </p>\n  </li>\n  <li>\n    <p>\n      浏览器和 Node.js 环境下，宏任务和微任务的分类以及事件循环机制有哪些不同？\n      提示：分别了解浏览器和 Node.js 中宏任务和微任务具体包含哪些类型，对比事件循环各阶段的差异。\n    </p>\n  </li>\n  <li>\n    <p>\n      如何利用宏任务和微任务优化异步代码的性能？\n      提示：考虑减少不必要的异步操作、合理安排任务顺序、避免阻塞事件循环等方面。\n    </p>\n  </li>\n  <li>\n    <p>\n      假如在一个复杂的异步操作链中，既有宏任务又有微任务，如何调试和排查可能出现的执行顺序问题？\n      提示：可以从使用浏览器开发者工具、添加日志输出、分析调用栈等方面思考调试方法。\n    </p>\n  </li>\n</ol>","mindmap":"mindmap\n  root((宏任务、微任务与事件循环机制))\n    宏任务\n      宿主环境发起\n      浏览器常见宏任务\n        setTimeout\n        setInterval\n      Node.js 宏任务\n        setImmediate\n      I/O 操作\n    微任务\n      JavaScript 引擎发起\n      常见微任务\n        Promise.then\n        MutationObserver\n      Node.js 微任务\n        process.nextTick\n    事件循环机制\n      核心机制\n        协调执行栈和任务队列\n      工作流程\n        执行栈\n          同步代码入栈执行\n          函数调用创建栈帧\n        任务队列\n          宏任务队列\n          微任务队列\n        事件循环流程\n          初始阶段\n            执行同步代码\n          异步操作\n            回调入相应队列\n          执行栈为空\n            事件循环开始\n          微任务处理\n            清空微任务队列\n          宏任务处理\n            取一个宏任务执行\n          重复循环\n            检查微任务队列","keynote":"宏任务：宿主环境发起，浏览器有 setTimeout、setInterval，Node.js 有 setImmediate，还有 I/O 操作\n微任务：JavaScript 引擎发起，有 Promise.then、MutationObserver，Node.js 有 process.nextTick\n事件循环机制：协调执行栈和任务队列，流程为初始执行同步代码，异步操作回调入队，执行栈空后先处理微任务队列，再取一个宏任务执行，不断循环","group_id":24,"kps":["异步编程"],"years":[2025,2024,2023,2022],"corps":["字节跳动","数坤科技","趣链科技","中软国际","北京某小厂","吉比特","快手","腾讯","百度","蔚来","货拉拉","华顺信安","滴滴","镁伽科技","数字马力","携程","京东","小鹅通","广州迈步科技","美团","迪英加","吉奥时空","派诺科技","B站","Shopee虾皮","米哈游","顺丰","贝壳","读书郎","深圳图灵协同","卓望","同程旅行","新华智云","吉利","科大讯飞","Momenta","帆软","Cider","影石","字节飞书","即时设计","联想集团","途虎养车","小红书","4399","北京秩鼎","小米","锐明技术","深圳吉比特","金山","袋鼠云","网易","深信服","拼多多","CVTE视源股份","蚂蚁集团","360","猿辅导","浙江大华","广联达","奇安信","用友","远景","去哪儿旅行","爱奇艺","网易有道","欢聚集团","中国电信","酷家乐","旷视科技","神策数据","唯品会","知乎","七牛云","小马智行","饿了么","富士康","上海爱数信息技术股份有限公司","爱数科技","牛客","掌阅科技","卫翎科技","58同城","谷斗科技","字节今日头条","TikTok","美团金服","美团优选","阿里巴巴","百度智能云","杭州某小厂","华为","达达集团","海康威视","OPPO","好未来","完美世界","度小满","腾讯音乐","喜马拉雅","钉钉","满帮集团","心动游戏","万兴科技"]}}