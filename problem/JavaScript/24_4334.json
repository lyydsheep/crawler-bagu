{
  "success": true,
  "data": {
    "id": 4334,
    "name": "<p>JavaScript中常用的数组方法？</p>",
    "options": null,
    "answer": "<p>在JavaScript中，数组有许多常用的方法，以下是一些常见的数组方法及其简要说明：</p>\n<ol>\n  <li>\n    <p><strong>push()</strong>: 在数组末尾添加一个或多个元素，并返回新数组的长度。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\narr.push(4); // arr = [1, 2, 3, 4]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>pop()</strong>: 从数组末尾删除一个元素，并返回被删除的元素。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\nlet last = arr.pop(); // last = 3, arr = [1, 2]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>shift()</strong>: 从数组开头删除一个元素，并返回被删除的元素。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\nlet first = arr.shift(); // first = 1, arr = [2, 3]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>unshift()</strong>: 在数组开头添加一个或多个元素，并返回新数组的长度。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\narr.unshift(0); // arr = [0, 1, 2, 3]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>slice()</strong>: 返回数组的一个片段（浅拷贝），不改变原数组。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4];\nlet newArr = arr.slice(1, 3); // newArr = [2, 3]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>splice()</strong>: 可以添加或删除数组中的元素，改变原数组。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4];\narr.splice(1, 2, 'a', 'b'); // arr = [1, 'a', 'b', 4]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>forEach()</strong>: 对数组中的每个元素执行一次提供的函数。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\narr.forEach(num => console.log(num)); // 输出 1 2 3\n</code></pre>\n  </li>\n  <li>\n    <p><strong>map()</strong>: 创建一个新数组，其每个元素都是由调用数组中的每个元素执行提供的函数所返回的结果。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\nlet newArr = arr.map(num => num * 2); // newArr = [2, 4, 6]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>filter()</strong>: 创建一个新数组，包含所有通过测试的元素。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4];\nlet newArr = arr.filter(num => num > 2); // newArr = [3, 4]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>reduce()</strong>: 对数组中的每个元素执行一个由您提供的函数，将其结果汇总为单个返回值。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4];\nlet sum = arr.reduce((acc, num) => acc + num, 0); // sum = 10\n</code></pre>\n  </li>\n  <li>\n    <p><strong>find()</strong>: 返回数组中第一个满足提供的测试函数的元素；如果没有找到，返回 <code>undefined</code>。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3, 4];\nlet found = arr.find(num => num > 2); // found = 3\n</code></pre>\n  </li>\n  <li>\n    <p><strong>includes()</strong>: 判断数组是否包含某个值，返回 <code>true</code> 或 <code>false</code>。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\nlet hasTwo = arr.includes(2); // hasTwo = true\n</code></pre>\n  </li>\n  <li>\n    <p><strong>concat()</strong>: 合并两个或多个数组，返回一个新数组，不改变原数组。</p>\n    <pre><code class=\"language-javascript\">let arr1 = [1, 2];\nlet arr2 = [3, 4];\nlet newArr = arr1.concat(arr2); // newArr = [1, 2, 3, 4]\n</code></pre>\n  </li>\n  <li>\n    <p><strong>join()</strong>: 将数组的所有元素连接成一个字符串。</p>\n    <pre><code class=\"language-javascript\">let arr = [1, 2, 3];\nlet str = arr.join('-'); // str = '1-2-3'\n</code></pre>\n  </li>\n  <li>\n    <p><strong>sort()</strong>: 对数组的元素进行排序，并返回数组（原地排序）。</p>\n    <pre><code class=\"language-javascript\">let arr = [3, 1, 2];\narr.sort(); // arr = [1, 2, 3]\n</code></pre>\n  </li>\n</ol>\n<p>这些方法对于处理数组数据非常有用，可以根据需求选择使用。</p>",
    "type": 6,
    "level": 1,
    "freq": 0.0397039,
    "analysis": "<h3>1. 题目核心</h3>\n<ul>\n  <li><strong>问题</strong>：JavaScript中常用的数组方法有哪些。</li>\n  <li><strong>考察点</strong>：对JavaScript数组操作方法的熟悉程度，包括方法的功能、用法和返回值等。</li>\n</ul>\n<h3>2. 背景知识</h3>\n<p>在JavaScript中，数组是一种非常常用的数据结构，它可以存储多个不同类型的值。为了方便对数组进行操作，JavaScript提供了许多内置的数组方法。</p>\n<h3>3. 解析</h3>\n<h4>（1）添加和删除元素的方法</h4>\n<ul>\n  <li><strong><code>push()</code></strong>：向数组的末尾添加一个或多个元素，并返回新的长度。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst newLength = arr.push(4);\nconsole.log(arr); // [1, 2, 3, 4]\nconsole.log(newLength); // 4\n</code></pre>\n<ul>\n  <li><strong><code>pop()</code></strong>：移除数组的最后一个元素，并返回该元素。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst lastElement = arr.pop();\nconsole.log(arr); // [1, 2]\nconsole.log(lastElement); // 3\n</code></pre>\n<ul>\n  <li><strong><code>unshift()</code></strong>：向数组的开头添加一个或多个元素，并返回新的长度。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst newLength = arr.unshift(0);\nconsole.log(arr); // [0, 1, 2, 3]\nconsole.log(newLength); // 4\n</code></pre>\n<ul>\n  <li><strong><code>shift()</code></strong>：移除数组的第一个元素，并返回该元素。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst firstElement = arr.shift();\nconsole.log(arr); // [2, 3]\nconsole.log(firstElement); // 1\n</code></pre>\n<ul>\n  <li><strong><code>splice()</code></strong>：可以用于添加、删除或替换数组中的元素。它接受三个参数：起始位置、要删除的元素个数、要插入的元素。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3, 4];\n// 从索引1开始删除2个元素，并插入5\narr.splice(1, 2, 5);\nconsole.log(arr); // [1, 5, 4]\n</code></pre>\n<h4>（2）数组遍历方法</h4>\n<ul>\n  <li><strong><code>forEach()</code></strong>：对数组的每个元素执行一次提供的函数。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\narr.forEach((element) => {\n    console.log(element);\n});\n</code></pre>\n<ul>\n  <li><strong><code>map()</code></strong>：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst newArr = arr.map((element) => element * 2);\nconsole.log(newArr); // [2, 4, 6]\n</code></pre>\n<ul>\n  <li><strong><code>filter()</code></strong>：创建一个新数组，其中包含通过所提供函数实现的测试的所有元素。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3, 4];\nconst filteredArr = arr.filter((element) => element > 2);\nconsole.log(filteredArr); // [3, 4]\n</code></pre>\n<h4>（3）查找元素的方法</h4>\n<ul>\n  <li><strong><code>find()</code></strong>：返回数组中满足提供的测试函数的第一个元素的值，否则返回 <code>undefined</code>。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3, 4];\nconst found = arr.find((element) => element > 2);\nconsole.log(found); // 3\n</code></pre>\n<ul>\n  <li><strong><code>indexOf()</code></strong>：返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3, 4];\nconst index = arr.indexOf(3);\nconsole.log(index); // 2\n</code></pre>\n<h4>（4）数组排序和反转方法</h4>\n<ul>\n  <li><strong><code>sort()</code></strong>：对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // [1, 2, 3]\n</code></pre>\n<ul>\n  <li><strong><code>reverse()</code></strong>：将数组中元素的位置颠倒，并返回该数组。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr); // [3, 2, 1]\n</code></pre>\n<h4>（5）其他方法</h4>\n<ul>\n  <li><strong><code>join()</code></strong>：将数组（或一个类数组对象）的所有元素连接成一个字符串。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr = [1, 2, 3];\nconst str = arr.join('-');\nconsole.log(str); // \"1-2-3\"\n</code></pre>\n<ul>\n  <li><strong><code>concat()</code></strong>：用于合并两个或多个数组，此方法不会更改现有数组，而是返回一个新数组。</li>\n</ul>\n<pre><code class=\"language-javascript\">const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst newArr = arr1.concat(arr2);\nconsole.log(newArr); // [1, 2, 3, 4]\n</code></pre>\n<h3>4. 常见误区</h3>\n<h4>（1）混淆方法是否改变原数组</h4>\n<p>有些方法（如 <code>push()</code>、<code>pop()</code>、<code>splice()</code> 等）会改变原数组，而有些方法（如 <code>map()</code>、<code>filter()</code>、<code>concat()</code> 等）不会改变原数组，返回一个新数组。在使用时要注意区分。</p>\n<h4>（2）错误使用排序方法</h4>\n<p><code>sort()</code> 方法默认是按字符串排序的，如果要对数字数组进行排序，需要传入一个比较函数。</p>\n<pre><code class=\"language-javascript\">const arr = [10, 1, 2];\narr.sort((a, b) => a - b);\nconsole.log(arr); // [1, 2, 10]\n</code></pre>\n<h3>5. 总结回答</h3>\n<p>JavaScript中常用的数组方法有很多，不同的方法有不同的用途：</p>\n<ul>\n  <li><strong>添加和删除元素</strong>：<code>push()</code> 用于在数组末尾添加元素，<code>pop()</code> 用于移除数组末尾元素，<code>unshift()</code> 用于在数组开头添加元素，<code>shift()</code> 用于移除数组开头元素，<code>splice()</code> 可用于添加、删除或替换元素。</li>\n  <li><strong>数组遍历</strong>：<code>forEach()</code> 用于遍历数组元素，<code>map()</code> 用于创建一个新数组，其元素是原数组元素经过处理后的结果，<code>filter()</code> 用于筛选出满足条件的元素组成新数组。</li>\n  <li><strong>查找元素</strong>：<code>find()</code> 用于查找满足条件的第一个元素，<code>indexOf()</code> 用于查找元素的索引。</li>\n  <li><strong>排序和反转</strong>：<code>sort()</code> 用于对数组元素进行排序，<code>reverse()</code> 用于颠倒数组元素的顺序。</li>\n  <li><strong>其他</strong>：<code>join()</code> 用于将数组元素连接成字符串，<code>concat()</code> 用于合并多个数组。</li>\n</ul>\n<p>在使用这些方法时，要注意区分哪些方法会改变原数组，哪些方法会返回新数组，同时要正确使用排序方法，避免出现排序错误。</p>",
    "more_ask": "<p>面试官可能会进一步问：</p>\n<ol>\n  <li>\n    <p><strong>请解释一下 <code>map</code> 和 <code>forEach</code> 的区别。</strong></p>\n    <ul>\n      <li>提示：考虑返回值和用途。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>能否讲述 <code>filter</code> 和 <code>reduce</code> 的用途及其适用场景？</strong></p>\n    <ul>\n      <li>提示：思考如何从数组中生成/变化数据。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>你如何使用 <code>sort</code> 方法来排序数组？请举例说明。</strong></p>\n    <ul>\n      <li>提示：包含自定义排序函数的实现。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在使用 <code>splice</code> 和 <code>slice</code> 时有什么不同？能否举例说明？</strong></p>\n    <ul>\n      <li>提示：关注对原数组的影响和返回值。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>谈谈你对 <code>concat</code> 和展开运算符 (<code>...</code>) 的理解。</strong></p>\n    <ul>\n      <li>提示：可以考虑性能和语法的不同。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>请解释一下 <code>find</code> 和 <code>indexOf</code> 的不同应用场景。</strong></p>\n    <ul>\n      <li>提示：回忆一下它们的返回值和查找方式。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>当需要判断数组是否包含某个元素时，你会选择使用哪种方法？为什么？</strong></p>\n    <ul>\n      <li>提示：可以提到 <code>includes</code> 和 <code>indexOf</code>。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>谈谈进而使用 <code>every</code> 和 <code>some</code> 方法的场景。</strong></p>\n    <ul>\n      <li>提示：考虑需要验证的条件及其返回值。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>在处理大型数组时，性能优化方面你会考虑哪些因素？</strong></p>\n    <ul>\n      <li>提示：可以讨论时间复杂度和内存管理。</li>\n    </ul>\n  </li>\n  <li>\n    <p><strong>如何使用 <code>Flat</code> 方法处理嵌套数组？请举个例子。</strong></p>\n    <ul>\n      <li>提示：考虑不同层级的嵌套情况和扁平化深度。</li>\n    </ul>\n  </li>\n</ol>",
    "mindmap": "mindmap\n  JavaScript数组方法\n    添加/删除元素\n      push()\n      pop()\n      shift()\n      unshift()\n    截取/修改\n      slice()\n      splice()\n    遍历\n      forEach()\n      map()\n      filter()\n      reduce()\n    查找\n      find()\n      includes()\n    合并/转换\n      concat()\n      join()\n    排序\n      sort()",
    "keynote": "- push(): 在数组末尾添加一个或多个元素，返回新长度。\n- pop(): 从数组末尾移除一个元素，返回该元素。\n- shift(): 从数组开头移除一个元素，返回该元素。\n- unshift(): 在数组开头添加一个或多个元素，返回新长度。\n- slice(): 返回数组片段（浅拷贝），不改变原数组。\n- splice(): 添加或删除数组中的元素，改变原数组。\n- forEach(): 对每个元素执行一次函数。\n- map(): 创建新数组，每个元素为调用提供的函数的结果。\n- filter(): 创建新数组，包含所有通过测试的元素。\n- reduce(): 汇总数组元素到单个值。\n- find(): 返回第一个满足条件的元素，否则返回undefined。\n- includes(): 判断是否包含指定值，返回布尔值。\n- concat(): 合并两个或更多数组，返回新数组。\n- join(): 将所有元素连接成字符串。\n- sort(): 排序数组元素，原地排序。",
    "group_id": 24,
    "kps": [
      "对象和数组"
    ],
    "years": [
      2025,
      2024,
      2023,
      2022
    ],
    "corps": [
      "某快消服装头部万人厂",
      "趣链科技",
      "建信金融科技",
      "网易有道",
      "字节跳动",
      "京东",
      "慧点科技",
      "滴滴",
      "长园深瑞",
      "牧原集团",
      "B站",
      "奥金拓",
      "快手",
      "晶果网络",
      "Wind万得",
      "锐明技术",
      "淘天集团",
      "小米",
      "Shopee虾皮",
      "深信服",
      "携程",
      "蚂蚁集团",
      "猿辅导",
      "贝壳",
      "奇安信",
      "广州小迈网络科技",
      "腾讯",
      "小红书",
      "去哪儿网",
      "上海平安科技",
      "旷视科技",
      "星环科技",
      "同程旅行",
      "知乎",
      "湖北航信",
      "金山",
      "货拉拉",
      "富士康",
      "Momenta",
      "天融信",
      "上海轻流",
      "美团",
      "美团金服",
      "百度",
      "网易",
      "科大讯飞",
      "好未来",
      "联想集团"
    ]
  }
}